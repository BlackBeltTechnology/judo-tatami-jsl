import "../../../../operations/_importAll.eol";


@greedy
rule CreateUnsetReferenceOperationForEntityType
    transform s: JSL!TransferRelationDeclaration
    to t: JUDOPSM!BoundOperation {
      guard: generateBehaviours and not s.isActorRelated() and s.isUnsetReferenceAllowed()

      t.setId("(jsl/" + s.getId() + ")/CreateUnsetReferenceOperationForEntityType");
      t.instanceRepresentation = s.eContainer.getPSMEquivalent();
      t.name = "unsetReferencesOfRelation" + s.getFqName().fqNameToCamelCase();
      s.eContainer.map.entity.getPSMEquivalent().operations.add(t);
      log.debug("Created CreateUnsetReferenceOperationForEntityType: " + t.name);
}

@greedy
rule CreateUnsetReferenceBehaviourForTransferType
    transform s: JSL!TransferRelationDeclaration
    to t: JUDOPSM!TransferOperationBehaviour {
      guard: generateBehaviours and not s.isActorRelated() and s.isUnsetReferenceAllowed()

      t.setId("(jsl/" + s.getId() + ")/CreateUnsetReferenceBehaviourForTransferType");
      t.behaviourType = JUDOPSM!TransferOperationBehaviourType#UNSET_REFERENCE;
      t.owner = s.getMappedTransferRelationEquivalent();
      log.debug("Created CreateUnsetReferenceBehaviourForTransferType: " + s.name);
}

@greedy
rule CreateUnsetReferenceOperationForTransferType
    transform s: JSL!TransferRelationDeclaration
    to t: JUDOPSM!BoundTransferOperation {
      guard: generateBehaviours and not s.isActorRelated() and s.isUnsetReferenceAllowed()

      t.setId("(jsl/" + s.getId() + ")/CreateUnsetReferenceOperationForTransferType");
      t.name = "unsetReferencesOf" + s.name.firstToUpperCase();
      if (s.eContainer.members.exists(m | m.name == t.name)) {
	      t.name = "_" + t.name;
      }
      
      t.binding = s.equivalent("CreateUnsetReferenceOperationForEntityType");
      t.behaviour = s.equivalent("CreateUnsetReferenceBehaviourForTransferType");

      t.updateOnResult = s.referenceType.isUpdateSupported();
      t.deleteOnResult = s.referenceType.isDeleteSupported();
      
      s.eContainer.getPSMEquivalent().operations.add(t);
      log.debug("Created CreateUnsetReferenceOperationForTransferType: " + t.name);      
}


@greedy
rule CreateUnsetReferenceOperationForTransferTypeInputParameter
    transform s: JSL!TransferRelationDeclaration
    to t: JUDOPSM!Parameter {
      guard: generateBehaviours and not s.isActorRelated() and s.isUnsetReferenceAllowed()

      t.setId("(jsl/" + s.getId() + ")/CreateUnsetReferenceOperationForTransferTypeInputParameter");
      t.cardinality = s.equivalent("CreateCardinalityForUnsetReferenceTransferTypeInput");
      t.name = "input";
	  t.type = s.referenceType.getPSMEquivalent();
      s.equivalent("CreateUnsetReferenceOperationForTransferType").input = t;
      log.debug("Created CreateUnsetReferenceOperationForTransferTypeInputParameter: " + t.name);
}

@greedy
rule CreateUnsetReferenceOperationForEntityTypeInputParameter
    transform s: JSL!TransferRelationDeclaration
    to t: JUDOPSM!Parameter {
      guard: generateBehaviours and not s.isActorRelated() and s.isUnsetReferenceAllowed()

      t.setId("(jsl/" + s.getId() + ")/CreateUnsetReferenceOperationForEntityTypeInputParameter");
      t.cardinality = s.equivalent("CreateCardinalityForUnsetReferenceEntityTypeInput");
      t.name = "input";
	  t.type = s.referenceType.getPSMEquivalent();
      s.equivalent("CreateUnsetReferenceOperationForEntityType").input = t;
      log.debug("Created CreateUnsetReferenceOperationForEntityTypeInputParameter: " + t.name);
}

@lazy
@greedy
rule CreateCardinalityForUnsetReferenceTransferTypeInput
    transform s : JSL!TransferRelationDeclaration
    to t : JUDOPSM!Cardinality {
      t.setId("(jsl/" + s.getId() + ")/CreateCardinalityForUnsetReferenceTransferTypeInput");

      t.lower = s.isRequired and not s.isMany ? 1 : 0;
      t.upper = s.isMany ? -1 : 1;      
}

@lazy
@greedy
rule CreateCardinalityForUnsetReferenceEntityTypeInput
    transform s : JSL!TransferRelationDeclaration
    to t : JUDOPSM!Cardinality {
      t.setId("(jsl/" + s.getId() + ")/CreateCardinalityForUnsetReferenceEntityTypeInput");
      
      t.lower = s.isRequired and not s.isMany ? 1 : 0;
      t.upper = s.isMany ? -1 : 1;      
}

import "../../../../operations/_importAll.eol";


@greedy
rule CreateListOperationForEntityType
    transform s: JSL!TransferRelationDeclaration
    to t: JUDOPSM!BoundOperation {
      guard: generateBehaviours and not s.isActorRelated() and (s.maps() or s.reads())

      t.setId("(jsl/" + s.getId() + ")/CreateListOperationForEntityType");
      t.instanceRepresentation = s.eContainer.getTransferDeclarationEquivalent();
      t.name = "listRelation" + s.getFqName().fqNameToCamelCase();
      s.eContainer.map.entity.getEntityDeclarationEquivalent().operations.add(t);
      log.debug("Created CreateListOperationForEntityType: " + t.name);
}

@greedy
rule CreateListBehaviourForTransferType
    transform s: JSL!TransferRelationDeclaration
    to t: JUDOPSM!TransferOperationBehaviour {
      guard: generateBehaviours and not s.isActorRelated() and (s.maps() or s.reads())

      t.setId("(jsl/" + s.getId() + ")/CreateListBehaviourForTransferType");
      t.behaviourType = JUDOPSM!TransferOperationBehaviourType#LIST;
      t.owner = s.getMappedTransferRelationEquivalent();
      log.debug("Created CreateListBehaviourForTransferType: " + s.name);
}

@greedy
rule CreateListOperationForTransferType
    transform s: JSL!TransferRelationDeclaration
    to t: JUDOPSM!BoundTransferOperation {
      guard: generateBehaviours and not s.isActorRelated() and (s.maps() or s.reads())

      t.setId("(jsl/" + s.getId() + ")/CreateListOperationForTransferType");
      t.name = "listOf" +  s.name.firstToUpperCase();
      if (s.eContainer.members.exists(m | m.name == t.name)) {
	      t.name = "_" + t.name;
      }

      t.binding = s.equivalent("CreateListOperationForEntityType");
      t.behaviour = s.equivalent("CreateListBehaviourForTransferType");

      t.updateOnResult = s.referenceType.isUpdateSupported();
      t.deleteOnResult = s.referenceType.isDeleteSupported();
      
      s.eContainer.getTransferDeclarationEquivalent().operations.add(t);
      log.debug("Created CreateListOperationForTransferType: " + t.name);      
}


@greedy
rule CreateListOperationForTransferTypeInputParameter
    transform s: JSL!TransferRelationDeclaration
    to t: JUDOPSM!Parameter {
      guard: generateBehaviours and not s.isActorRelated() and (s.maps() or s.reads())

      t.setId("(jsl/" + s.getId() + ")/CreateListOperationForTransferTypeInputParameter");
      t.cardinality = s.equivalent("CreateCardinalityForListTransferTypeInput");
      t.name = "input";
	  t.type = s.referenceType.equivalent("CreateQueryCustomizerType");
      s.equivalent("CreateListOperationForTransferType").input = t;
      log.debug("Created CreateListOperationForTransferTypeInputParameter: " + t.name);
}

@greedy
rule CreateListOperationForTransferTypeOutputParameter
    transform s: JSL!TransferRelationDeclaration
    to t: JUDOPSM!Parameter {
      guard: generateBehaviours and not s.isActorRelated() and (s.maps() or s.reads())

      t.setId("(jsl/" + s.getId() + ")/CreateListOperationForTransferTypeOutputParameter");
      t.cardinality = s.equivalent("CreateCardinalityForListTransferTypeOutput");
      t.name = "return";
	  t.type = s.referenceType.getTransferDeclarationEquivalent();
      s.equivalent("CreateListOperationForTransferType").output = t;
      log.debug("Created CreateListOperationForTransferTypeOutputParameter: " + t.name);
}

@greedy
rule CreateListOperationForEntityTypeInputParameter
    transform s: JSL!TransferRelationDeclaration
    to t: JUDOPSM!Parameter {
      guard: generateBehaviours and not s.isActorRelated() and (s.maps() or s.reads())

      t.setId("(jsl/" + s.getId() + ")/CreateListOperationForEntityTypeInputParameter");
      t.cardinality = s.equivalent("CreateCardinalityForListEntityTypeInput");
      t.name = "input";
	  t.type = s.referenceType.equivalent("CreateQueryCustomizerType");
      s.equivalent("CreateListOperationForEntityType").input = t;
      log.debug("Created CreateListOperationForEntityTypeInputParameter: " + t.name);
}

@greedy
rule CreateListOperationForEntityTypeOutputParameter
    transform s: JSL!TransferRelationDeclaration
    to t: JUDOPSM!Parameter {
      guard: generateBehaviours and not s.isActorRelated() and (s.maps() or s.reads())

      t.setId("(jsl/" + s.getId() + ")/CreateListOperationForEntityTypeOutputParameter");
      t.cardinality = s.equivalent("CreateCardinalityForListEntityTypeOutput");
      t.name = "return";
	  t.type = s.referenceType.getTransferDeclarationEquivalent();
      s.equivalent("CreateListOperationForEntityType").output = t;
      log.debug("Created CreateListOperationForEntityTypeOutputParameter: " + t.name);
}

@lazy
@greedy
rule CreateCardinalityForListTransferTypeInput
    transform s : JSL!TransferRelationDeclaration
    to t : JUDOPSM!Cardinality {
      t.setId("(jsl/" + s.getId() + ")/CreateCardinalityForListTransferTypeInput");

      t.lower = 0; //s.isRequired() and not s.isMany ? 1 : 0;
      t.upper = 1;
}

@lazy
@greedy
rule CreateCardinalityForListTransferTypeOutput
    transform s : JSL!TransferRelationDeclaration
    to t : JUDOPSM!Cardinality {
      t.setId("(jsl/" + s.getId() + ")/CreateCardinalityForListTransferTypeOutput");


      t.lower = s.isRequired() and not s.isMany ? 1 : 0;
      t.upper = s.isMany ? -1 : 1;
}

@lazy
@greedy
rule CreateCardinalityForListEntityTypeInput
    transform s : JSL!TransferRelationDeclaration
    to t : JUDOPSM!Cardinality {
      t.setId("(jsl/" + s.getId() + ")/CreateCardinalityForListEntityTypeInput");

      t.lower = 0; //s.isRequired() and not s.isMany ? 1 : 0;
      t.upper = 1;
}

@lazy
@greedy
rule CreateCardinalityForListEntityTypeOutput
    transform s : JSL!TransferRelationDeclaration
    to t : JUDOPSM!Cardinality {
      t.setId("(jsl/" + s.getId() + ")/CreateCardinalityForListEntityTypeOutput");

      t.lower = s.isRequired() and not s.isMany ? 1 : 0;
      t.upper = s.isMany ? -1 : 1;
}


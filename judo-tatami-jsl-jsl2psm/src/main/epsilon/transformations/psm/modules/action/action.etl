import "../../../../operations/_importAll.eol";


@abstract
rule AbstractTransferUnboundActionDeclaration
    transform s: JSL!TransferActionDeclaration
    to t: JUDOPSM!UnboundOperation {

      t.name = s.name;
      t.updateOnResult = s.isUpdateAllowed();
      t.deleteOnResult = s.isDeleteAllowed();      
      t.implementation = s.equivalent("CreateEmptyOperationBody");

      if (s.parameterType?.map.isDefined()) {
      	t.inputRange = s.modifiers.selectOne(m | m.isTypeOf(JSL!TransferChoiceModifier)).equivalent("CreateActionInputParameterRangeTransferObjectRelation");
      }

      for (error in s.errors) {
      	t.faults.add(error.equivalentDiscriminated("CreateFaultParameter", s.getId()));
      }      
}

@abstract
rule AbstractTransferBoundActionDeclaration
    transform s: JSL!TransferActionDeclaration
    to t: JUDOPSM!BoundTransferOperation {

      t.name = s.name;

      t.updateOnResult = s.isUpdateAllowed();
      t.deleteOnResult = s.isDeleteAllowed();      

      if (s.parameterType?.map.isDefined()) {
      	t.inputRange = s.modifiers.selectOne(m | m.isTypeOf(JSL!TransferChoiceModifier)).equivalent("CreateActionInputParameterRangeTransferObjectRelation");
      }

      for (error in s.errors) {
      	t.faults.add(error.equivalentDiscriminated("CreateFaultParameter", s.getId() + "/Transfer"));
      }      

}


@abstract
rule AbstractTransferActionDeclarationReturnParameter
    transform s: JSL!TransferActionDeclaration
    to t: JUDOPSM!Parameter {

      t.cardinality = s.equivalent("CreateCardinalityForTransferActionDeclarationOutput");
      t.name = "return";
	  t.type = s.`return`.getPSMEquivalent();
}

@abstract
rule AbstractTransferActionDeclarationInputParameter
    transform s: JSL!TransferActionDeclaration
    to t: JUDOPSM!Parameter {

      t.cardinality = s.equivalent("CreateCardinalityForTransferActionDeclarationInput");
      t.name = s.paramaterName;

	  t.type = s.parameterType.getPSMEquivalent();
	  
}

@greedy
rule CreateEmptyOperationBody
    transform s: JSL!TransferActionDeclaration
    to t: JUDOPSM!OperationBody {
      t.setId("(jsl/" + s.getId() + ")/CreateEmptyOperationBody");

      t.body = "// (jsl/" + s.getId() + ")/CreateEmptyOperationBody";
      t.stateful = true;
      t.customImplementation = true;
      log.debug("Created CreateEmptyOperationBody: " + s.name);
}


@greedy
@lazy
rule CreateFaultParameter
    transform s: JSL!ErrorDeclaration
    to t: JUDOPSM!Parameter {
      t.setId("(jsl/" + s.getId() + ")/CreateFaultParameter");

      t.name = s.name;
      t.type = s.equivalent("CreateUnmappedTransferObjectType");
      t.cardinality = s.equivalent("CreateCardinalityForFaultParameter");
      
      log.debug("Created CreateFaultParameter: " + t.name);
}

//////////////////////////////////////////////////
// Unmapped transfer object type operation
//////////////////////////////////////////////////
@greedy
rule CreateUnboundOperationForUnmappedTransferObjectType
    transform s: JSL!TransferActionDeclaration
    to t: JUDOPSM!UnboundOperation 
    extends AbstractTransferUnboundActionDeclaration {
      guard: s.eContainer.map.isUndefined()

      t.setId("(jsl/" + s.getId() + ")/CreateUnboundOperationForUnmappedTransferObjectType");
      s.eContainer.equivalent("CreateUnmappedTransferObjectType").operations.add(t);
      log.debug("Created CreateUnboundOperationForUnmappedTransferObjectType: " + t.name);
}

@greedy
rule CreateUnboundOperationForUnmappedTransferObjectTypeInputParameter
    transform s: JSL!TransferActionDeclaration
    to t: JUDOPSM!Parameter
    extends AbstractTransferActionDeclarationInputParameter {
      guard: s.eContainer.map.isUndefined() and s.parameterType.isDefined()

      t.setId("(jsl/" + s.getId() + ")/CreateUnboundOperationForUnmappedTransferObjectTypeInputParameter");
      s.equivalent("CreateUnboundOperationForUnmappedTransferObjectType").input = t;
      log.debug("Created CreateUnboundOperationForUnmappedTransferObjectTypeInputParameter: " + t.name);
}

@greedy
rule CreateUnboundOperationForUnmappedTransferObjectTypeOutputParameter
    transform s: JSL!TransferActionDeclaration
    to t: JUDOPSM!Parameter
    extends AbstractTransferActionDeclarationReturnParameter {

      guard: s.eContainer.map.isUndefined() and s.`return`.isDefined()

      t.setId("(jsl/" + s.getId() + ")/CreateUnboundOperationForUnmappedTransferObjectTypeOutputParameter");
      s.equivalent("CreateUnboundOperationForUnmappedTransferObjectType").output = t;
      log.debug("Created CreateUnboundOperationForUnmappedTransferObjectTypeOutputParameter: " + t.name);
}

//////////////////////////////////////////////////
// Mapped transfer object type Unbound Operations
//////////////////////////////////////////////////
@greedy
rule CreateUnboundOperationForMappedTransferObjectType
    transform s: JSL!TransferActionDeclaration
    to t: JUDOPSM!UnboundOperation
    extends AbstractTransferUnboundActionDeclaration {
      guard: s.eContainer.map.isDefined() and s.static

      t.setId("(jsl/" + s.getId() + ")/CreateUnboundOperationForMappedTransferObjectType");
      s.eContainer.getPSMEquivalent().operations.add(t);
      log.debug("Created CreateUnboundOperationForMappedTransferObjectType: " + t.name);
}

@greedy
rule CreateUnboundOperationForMappedTransferObjectTypeInputParameter
    transform s: JSL!TransferActionDeclaration
    to t: JUDOPSM!Parameter
    extends AbstractTransferActionDeclarationInputParameter {
      guard: s.eContainer.map.isDefined() and s.parameterType.isDefined() and s.static

      t.setId("(jsl/" + s.getId() + ")/CreateUnboundOperationForMappedTransferObjectTypeInputParameter");
      s.equivalent("CreateUnboundOperationForMappedTransferObjectType").input = t;
      log.debug("Created CreateUnboundOperationForMappedTransferObjectTypeInputParameter: " + t.name);
}

@greedy
rule CreateUnboundOperationForMappedTransferObjectTypeOutputParameter
    transform s: JSL!TransferActionDeclaration
    to t: JUDOPSM!Parameter
    extends AbstractTransferActionDeclarationReturnParameter {
      guard: s.eContainer.map.isDefined() and s.`return`.isDefined() and s.static

      t.setId("(jsl/" + s.getId() + ")/CreateUnboundOperationForMappedTransferObjectTypeOutputParameter");
      s.equivalent("CreateUnboundOperationForMappedTransferObjectType").output = t;
      log.debug("Created CreateUnboundOperationForMappedTransferObjectTypeOutputParameter: " + t.name);
}

//////////////////////////////////////////////////
// Mapped transfer object type Bound Operations
//////////////////////////////////////////////////
@greedy
rule CreateBoundOperationForEntityType
    transform s: JSL!TransferActionDeclaration
    to t: JUDOPSM!BoundOperation {
      guard: s.eContainer.map.isDefined() and not s.static

      t.setId("(jsl/" + s.getId() + ")/CreateBoundOperationForEntity");

      t.`abstract` = false;
      t.implementation = s.equivalent("CreateEmptyOperationBody");
      t.instanceRepresentation = s.eContainer.getPSMEquivalent();
      t.name = s.name + s.eContainer.getFqName().fqNameToCamelCase();
      
      for (error in s.errors) {
      	t.faults.add(error.equivalentDiscriminated("CreateFaultParameter", s.getId() + "/Entity"));
      }      
      
      s.eContainer.map.entity.getPSMEquivalent().operations.add(t);

      log.debug("Created CreateBoundOperationForEntity: " + t.name);      
}

@greedy
rule CreateBoundOperationForEntityTypeInputParameter
    transform s: JSL!TransferActionDeclaration
    to t: JUDOPSM!Parameter
    extends AbstractTransferActionDeclarationInputParameter {
      guard: s.eContainer.map.isDefined() and s.parameterType.isDefined() and not s.static

      t.setId("(jsl/" + s.getId() + ")/CreateBoundOperationForEntityTypeInputParameter");
      t.cardinality = s.equivalent("CreateCardinalityForTransferActionDeclarationEntityInput");
      t.name = s.paramaterName;

	  t.type = s.parameterType.getPSMEquivalent();

      s.equivalent("CreateBoundOperationForEntityType").input = t;
      log.debug("Created CreateBoundOperationForEntityTypeInputParameter: " + t.name);
}

@greedy
rule CreateBoundOperationForEntityTypeOutputParameter
    transform s: JSL!TransferActionDeclaration
    to t: JUDOPSM!Parameter
    extends AbstractTransferActionDeclarationReturnParameter {

      guard: s.eContainer.map.isDefined() and s.`return`.isDefined() and not s.static

      t.setId("(jsl/" + s.getId() + ")/CreateBoundOperationForEntityTypeOutputParameter");
      t.cardinality = s.equivalent("CreateCardinalityForTransferActionDeclarationEntityOutput");
      t.name = "return";
	  t.type = s.`return`.getPSMEquivalent();
      s.equivalent("CreateBoundOperationForEntityType").output = t;
      log.debug("Created CreateBoundOperationForEntityTypeOutputParameter: " + t.name);
}

@greedy
rule CreateBoundOperationForMappedTransferObjectType
    transform s: JSL!TransferActionDeclaration
    to t: JUDOPSM!BoundTransferOperation
    extends AbstractTransferBoundActionDeclaration {

      guard: s.eContainer.map.isDefined() and not s.static

      t.setId("(jsl/" + s.getId() + ")/CreateBoundOperationForMappedTransferObjectType");
      t.binding = s.equivalent("CreateBoundOperationForEntityType");
      
      s.eContainer.getPSMEquivalent().operations.add(t);
      log.debug("Created CreateBoundOperationForMappedTransferObjectType: " + t.name);
}


@greedy
rule CreateBoundOperationForMappedTransferObjectTypeInputParameter
    transform s: JSL!TransferActionDeclaration
    to t: JUDOPSM!Parameter
    extends AbstractTransferActionDeclarationInputParameter {
      guard: s.eContainer.map.isDefined() and s.parameterType.isDefined() and not s.static

      t.setId("(jsl/" + s.getId() + ")/CreateBoundOperationForMappedTransferObjectTypeInputParameter");
      s.equivalent("CreateBoundOperationForMappedTransferObjectType").input = t;
      log.debug("Created CreateBoundOperationForMappedTransferObjectTypeInputParameter: " + t.name);
}

@greedy
rule CreateBoundOperationForMappedTransferObjectTypeOutputParameter
    transform s: JSL!TransferActionDeclaration
    to t: JUDOPSM!Parameter
    extends AbstractTransferActionDeclarationReturnParameter {

      guard: s.eContainer.map.isDefined() and s.`return`.isDefined() and not s.static

      t.setId("(jsl/" + s.getId() + ")/CreateBoundOperationForMappedTransferObjectTypeOutputParameter");
      s.equivalent("CreateBoundOperationForMappedTransferObjectType").output = t;
      log.debug("Created CreateBoundOperationForMappedTransferObjectTypeOutputParameter: " + t.name);
}

@lazy
@greedy
rule CreateCardinalityForTransferActionDeclarationInput
    transform s : JSL!TransferActionDeclaration
    to t : JUDOPSM!Cardinality {
      t.setId("(jsl/" + s.getId() + ")/CreateCardinalityForTransferActionDeclarationInput");

      t.lower = 1;
      t.upper = 1;
}

@lazy
@greedy
rule CreateCardinalityForTransferActionDeclarationOutput
    transform s : JSL!TransferActionDeclaration
    to t : JUDOPSM!Cardinality {
      t.setId("(jsl/" + s.getId() + ")/CreateCardinalityForTransferActionDeclarationOutput");

      t.lower = 1;
      t.upper = 1;
}

@lazy
@greedy
rule CreateCardinalityForTransferActionDeclarationEntityInput
    transform s : JSL!TransferActionDeclaration
    to t : JUDOPSM!Cardinality {
      t.setId("(jsl/" + s.getId() + ")/CreateCardinalityForTransferActionDeclarationEntityInput");

      t.lower = 1;
      t.upper = 1;
}

@lazy
@greedy
rule CreateCardinalityForTransferActionDeclarationEntityOutput
    transform s : JSL!TransferActionDeclaration
    to t : JUDOPSM!Cardinality {
      t.setId("(jsl/" + s.getId() + ")/CreateCardinalityForTransferActionDeclarationEntityOutput");

      t.lower = 1;
      t.upper = 1;
}

@lazy
@greedy
rule CreateCardinalityForFaultParameter
    transform s : JSL!ErrorDeclaration
    to t : JUDOPSM!Cardinality {
      t.setId("(jsl/" + s.getId() + ")/CreateCardinalityForFaultParameter");

      t.lower = 1;
      t.upper = 1;
}



////////////////////////////////////////////////////////////////////////////////////////////
// Mapped parameter range
////////////////////////////////////////////////////////////////////////////////////////////
@greedy
rule CreateActionInputParameterRangeReferenceExpressionTypeForMappedTransferActionDeclaration
    transform s : JSL!TransferChoiceModifier
    to t: JUDOPSM!ReferenceExpressionType {
        guard: s.eContainer.isKindOf(JSL!TransferActionDeclaration) and s.eContainer.eContainer.map.isDefined()

        t.setId("(jsl/" + s.eContainer.getId() + ")/CreateActionInputParameterRangeReferenceExpressionTypeForMappedTransferActionDeclaration");
        t.expression = expressionUtils.getJqlForExpression(s.expression, entityNamePrefix, entityNamePostfix);
        s.equivalent("CreateActionInputParameterRangeNavigationPropertyForMappedTransferActionDeclaration").getterExpression = t;

        log.debug("Created ReferenceExpressionType for Transfer Object Default Value: " + t.expression);
    }

@greedy
rule CreateActionInputParameterRangeNavigationPropertyForMappedTransferActionDeclaration
    transform s : JSL!TransferChoiceModifier
    to t: JUDOPSM!NavigationProperty {
        guard: s.eContainer.isKindOf(JSL!TransferActionDeclaration) and s.eContainer.eContainer.map.isDefined()

        t.setId("(jsl/" + s.eContainer.getId() + ")/CreateActionInputParameterRangeNavigationPropertyForMappedTransferActionDeclaration");
        t.name = defaultActionInputParameterRangeNamePrefix + s.eContainer.name + defaultActionInputParameterRangeNameMidfix + s.eContainer.eContainer.name + defaultActionInputParameterRangeNamePostfix;
        t.target = s.eContainer.getParameterType().getPSMEquivalent().entityType;
  	    t.cardinality = s.eContainer.equivalentDiscriminated("CreateCardinalityForGetActionInputParameterRangeEntityRelation", t.getId());
        s.eContainer.eContainer.map.entity.getPSMEquivalent().navigationProperties.add(t);

        log.debug("Created NavigationProperty for Transfer Object Default Value: " + s);
    }

@greedy
rule CreateActionInputParameterRangeReferenceExpressionTypeForUnmappedTransferActionDeclaration
    transform s : JSL!TransferChoiceModifier
    to t: JUDOPSM!ReferenceExpressionType {
        guard: s.eContainer.isKindOf(JSL!TransferActionDeclaration) and s.eContainer.eContainer.map.isUndefined()
        
        t.setId("(jsl/" + s.eContainer.getId() + ")/CreateActionInputParameterRangeReferenceExpressionTypeForUnmappedTransferActionDeclaration");
        t.expression = expressionUtils.getJqlForExpression(s.expression, entityNamePrefix, entityNamePostfix);
        s.equivalent("CreateActionInputParameterRangeStaticNavigationForUnmappedTransferActionDeclaration").getterExpression = t;

        log.debug("Created ReferenceExpressionType for Transfer Object Default Value: " + t.expression);
    }

@greedy
rule CreateActionInputParameterRangeStaticNavigationForUnmappedTransferActionDeclaration
    transform s : JSL!TransferChoiceModifier
    to t: JUDOPSM!StaticNavigation {
        guard: s.eContainer.isKindOf(JSL!TransferActionDeclaration) and s.eContainer.eContainer.map.isUndefined()

        t.setId("(jsl/" + s.eContainer.getId() + ")/CreateActionInputParameterRangeStaticNavigationForUnmappedTransferActionDeclaration");
        t.name = defaultActionInputParameterRangeNamePrefix + s.eContainer.name + defaultActionInputParameterRangeNameMidfix + s.eContainer.eContainer.name + defaultActionInputParameterRangeNamePostfix;
        t.target = s.eContainer.getParameterType().getPSMEquivalent().entityType;
  	    t.cardinality = s.eContainer.equivalentDiscriminated("CreateCardinalityForGetActionInputParameterRangeEntityRelation", t.getId());

        s.eContainer.eContainer.eContainer.getModelRoot().elements.add(t);
        
        log.debug("Created StaticNavigation for Transfer Object Default Value: " + s);
    }


@greedy
rule CreateActionInputParameterRangeTransferObjectRelation
    transform s : JSL!TransferChoiceModifier
    to t : JUDOPSM!TransferObjectRelation {
        guard: s.eContainer.isKindOf(JSL!TransferActionDeclaration)

        t.setId("(esm/" + s.getId() + ")/CreateActionInputParameterRangeTransferObjectRelation");

        t.name = s.eContainer.getPSMRangeEquivalent().name;
        t.cardinality = s.eContainer.equivalent("CreateCardinalityForGetActionInputParameterRangeTransferObjectRelation");
        t.target = s.eContainer.getParameterType().getPSMEquivalent();
        t.binding = s.eContainer.getPSMRangeEquivalent();

        s.eContainer.eContainer.getPSMEquivalent().relations.add(t);
}


@lazy
@greedy
rule CreateCardinalityForGetActionInputParameterRangeEntityRelation
    transform s: JSL!TransferActionDeclaration
    to t : JUDOPSM!Cardinality {
        t.setId("(jsl/" + s.getId() + ")/CreateCardinalityForGetActionInputParameterRangeEntityRelation");
        t.lower = 0;
        t.upper = -1;
}

@lazy
@greedy
rule CreateCardinalityForGetActionInputParameterRangeTransferObjectRelation
    transform s: JSL!TransferActionDeclaration
    to t : JUDOPSM!Cardinality {
        t.setId("(jsl/" + s.getId() + ")/CreateCardinalityForGetActionInputParameterRangeTransferObjectRelation");
        t.lower = 0;
        t.upper = -1;
}

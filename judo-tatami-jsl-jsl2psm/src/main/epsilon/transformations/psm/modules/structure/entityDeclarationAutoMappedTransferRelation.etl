///////////////////////////////////////////////////////////////
// Entity composite relation
///////////////////////////////////////////////////////////////

@abstract
rule AbstractCreateTransferObjectEmbeddedRelationForAutoMappedTransferObjectType
    transform s: JSL!EntityStoredFieldDeclaration
    to t: JUDOPSM!TransferObjectRelation {

        t.name = s.name;
        t.target = s.getReferenceType().equivalent("CreateAutoMappedTransferObjectType");

        t.embeddedCreate = not s.eContainer.isAbstract;
        t.embeddedUpdate = not s.eContainer.isAbstract;
        t.embeddedDelete = not s.eContainer.isAbstract;

        t.embedded = true;
        t.binding = s.equivalent("CreateContainmentFromField");
}

@greedy
rule CreateTransferObjectEmbeddedRelationForAutoMappedTransferObjectType
    transform s: JSL!EntityStoredFieldDeclaration
    to t: JUDOPSM!TransferObjectRelation
    extends AbstractCreateTransferObjectEmbeddedRelationForAutoMappedTransferObjectType {
        guard: JSL!TransferDeclaration.all().exists(t | t.automap and t.map.entity == s.eContainer) and s.getReferenceType().isKindOf(JSL!EntityDeclaration)
        t.setId("(jsl/" + s.getId() + ")/CreateTransferObjectEmbeddedRelationForAutoMappedTransferObjectType");
        t.cardinality = s.equivalentWithPrefix("CreateCardinalityForFieldDeclaration", t.getId());

        s.eContainer.equivalent("CreateAutoMappedTransferObjectType").relations.add(t);
        log.debug("Created TransferObjectRelation for AutoMappedTransferObjectType: [" + t.name + "] into [" + t.eContainer.name + "]");
}

@lazy
@greedy
rule CloneTransferObjectEmbeddedRelationForAutoMappedTransferObjectType
    transform s: JSL!EntityStoredFieldDeclaration
    to t: JUDOPSM!TransferObjectRelation
    extends AbstractCreateTransferObjectEmbeddedRelationForAutoMappedTransferObjectType {

        t.setId("(jsl/" + s.getId() + ")/CloneTransferObjectEmbeddedRelationForAutoMappedTransferObjectType");
        t.cardinality = s.equivalentWithPrefix("CreateCardinalityForFieldDeclaration", t.getId());

        log.debug("Clone TransferObjectRelation for AutoMappedTransferObjectType: [" + t.name + "]");
}

///////////////////////////////////////////////////////////////////////////
// Derived relation
///////////////////////////////////////////////////////////////////////////

@abstract
rule AbstractCreateTransferObjectDerivedRelationForAutoMappedTransferObjectType
    transform s : JSL!EntityCalculatedRelationDeclaration
    to t : JUDOPSM!TransferObjectRelation {
      t.name = s.name;
      t.target = s.getReferenceType().equivalent("CreateAutoMappedTransferObjectType");

      t.embeddedCreate = false;
      t.embeddedUpdate = false;
      t.embeddedDelete = false;

      t.binding = s.equivalent("CreateNavigationProperty");
      t.embedded = false;
}

@greedy
rule CreateTransferObjectDerivedRelationForAutoMappedTransferObjectType
    transform s: JSL!EntityCalculatedRelationDeclaration
    to t: JUDOPSM!TransferObjectRelation
    extends AbstractCreateTransferObjectDerivedRelationForAutoMappedTransferObjectType {
        guard: JSL!TransferDeclaration.all().exists(t | t.automap and t.map.entity == s.eContainer) and s.getReferenceType().isKindOf(JSL!EntityDeclaration) and not s.isQuery()

        t.setId("(jsl/" + s.getId() + ")/CreateTransferObjectDerivedRelationForAutoMappedTransferObjectType");
        t.cardinality = s.equivalentWithPrefix("CreateCardinalityForDerivedDeclaration", t.getId());

        s.eContainer.equivalent("CreateAutoMappedTransferObjectType").relations.add(t);

        log.debug("Created TransferObjectRelation (Derived) for AutoMappedTransferObjectType: [" + t.name + "] into [" + t.eContainer.name + "]");
}

@lazy
@greedy
rule CloneTransferObjectDerivedRelationForAutoMappedTransferObjectType
    transform s: JSL!EntityCalculatedRelationDeclaration
    to t: JUDOPSM!TransferObjectRelation
    extends AbstractCreateTransferObjectDerivedRelationForAutoMappedTransferObjectType {

        t.setId("(jsl/" + s.getId() + ")/CloneTransferObjectDerivedRelationForAutoMappedTransferObjectType");
        t.cardinality = s.equivalentWithPrefix("CreateCardinalityForDerivedDeclaration", t.getId());

        log.debug("Clone TransferObjectRelation (Derived)for AutoMappedTransferObjectType: [" + t.name + "]");
}

///////////////////////////////////////////////////////////////////////////
// Entity Query relation
///////////////////////////////////////////////////////////////////////////

@abstract
rule AbstractCreateTransferObjectEntityQueryRelationForAutoMappedTransferObjectType
    transform s : JSL!EntityCalculatedRelationDeclaration
    to t : JUDOPSM!TransferObjectRelation
    {
      t.name = s.name;
      t.target = s.getReferenceType().equivalent("CreateAutoMappedTransferObjectType");

      t.embeddedCreate = false;
      t.embeddedUpdate = false;
      t.embeddedDelete = false;

      t.binding = s.equivalent("CreateNavigationPropertyForEntityQuery");
      t.embedded = false;

}


rule CreateTransferObjectEntityQueryRelationForAutoMappedTransferObjectType
    transform s: JSL!EntityCalculatedRelationDeclaration
    to t: JUDOPSM!TransferObjectRelation
    extends AbstractCreateTransferObjectEntityQueryRelationForAutoMappedTransferObjectType {
        guard: JSL!TransferDeclaration.all().exists(t | t.automap and t.map.entity == s.eContainer) and s.getReferenceType().isKindOf(JSL!EntityDeclaration) and s.isQuery()

        t.setId("(jsl/" + s.getId() + ")/CreateTransferObjectEntityQueryRelationForAutoMappedTransferObjectType");
        t.cardinality = s.equivalentWithPrefix("CreateCardinalityForEntityQueryDeclaration", t.getId());

        s.eContainer.equivalent("CreateAutoMappedTransferObjectType").relations.add(t);

        log.debug("Created TransferObjectRelation for AutoMappedTransferObjectType: [" + t.name + "] into [" + t.eContainer.name + "]");

}

@lazy
rule CloneTransferObjectQueryRelationForAutoMappedTransferObjectType
    transform s: JSL!EntityCalculatedRelationDeclaration
    to t: JUDOPSM!TransferObjectRelation
    extends AbstractCreateTransferObjectEntityQueryRelationForAutoMappedTransferObjectType {

        t.setId("(jsl/" + s.getId() + ")/CloneTransferObjectQueryRelationForAutoMappedTransferObjectType");
        t.cardinality = s.equivalentWithPrefix("CreateCardinalityForEntityQueryDeclaration", t.getId());


        log.debug("Clone TransferObjectRelation for AutoMappedTransferObjectType: [" + t.name + "]");
}


import "../../../../operations/_importAll.eol";
import "../namespace/namespace.etl";


////////////////////////////////////////////////////////////////////////////////////////////
// Auto mapped entity Field
////////////////////////////////////////////////////////////////////////////////////////////
@abstract
rule AbstractCreateTransferAttributeForAutoMappedTransferObjectType
    transform s: JSL!EntityStoredFieldDeclaration
    to t: JUDOPSM!TransferAttribute {
        t.required = s.isRequired;
        t.name = s.name;
        t.binding = s.equivalent("CreateAttributeFromField");
        t.dataType = s.getReferenceType().getPSMEquivalent();

        if (s.defaultExpr.isDefined()) {
            t.defaultValue = s.defaultExpr.equivalent("CreateDefaultValueForPrimitiveEntityMember");
        }
}

// Create default transfer object attribute and add it to default transfer object
@greedy
rule CreateTransferAttributeForAutoMappedTransferObjectType
    transform s: JSL!EntityStoredFieldDeclaration
    to t: JUDOPSM!TransferAttribute
    extends AbstractCreateTransferAttributeForAutoMappedTransferObjectType {
        guard: JSL!TransferDeclaration.all().exists(t | t.automap and t.map.entity == s.eContainer) and s.getReferenceType().isKindOf(JSL!PrimitiveDeclaration)
        t.setId("(jsl/" + s.getId() + ")/CreateTransferAttributeForAutoMappedTransferObjectType");
        s.eContainer.equivalent("CreateAutoMappedTransferObjectType").attributes.add(t);
        log.debug("Created TransferAttribute (Field) for AutoMappedTransferObjectType: [" + t.name + "] into [" + t.eContainer.name + "]");
}


// Create auto mapped transfer object attribute clone. It creates the attribute on the resource root,
// the caller code have to add it to the corresponding transfer object
// This method can be used to make clone attributes to inherited transfer objects
@lazy
@greedy
rule CloneTransferAttributeForAutoMappedTransferObjectType
    transform s: JSL!EntityStoredFieldDeclaration
    to t: JUDOPSM!TransferAttribute
    extends AbstractCreateTransferAttributeForAutoMappedTransferObjectType {
        t.setId("(jsl/" + s.getId() + ")/CloneTransferAttributeForAutoMappedTransferObjectType");
        log.debug("Clone TransferAttribute (Field) for AutoMappedTransferObjectType: [" + t.name + "]");
}

////////////////////////////////////////////////////////////////////////////////////////////
// Auto mapped entity identifier (Primitive)
////////////////////////////////////////////////////////////////////////////////////////////
//@abstract
//rule AbstractCreateIdentifierTransferAttributeForAutoMappedTransferObjectType
//    transform s: JSL!EntityIdentifierDeclaration
//    to t: JUDOPSM!TransferAttribute {
//
//        t.required = s.isRequired;
//        t.name = s.name;
//        t.binding = s.equivalent("CreateAttributeFromIdentifier");
//        t.dataType = s.getReferenceType().getPSMEquivalent();
//
//        if (s.defaultExpression.isDefined()) {
//            t.defaultValue = s.defaultExpression.equivalent("CreateDefaultValueForPrimitiveEntityMember");
//        }
//
//}
//
//@greedy
//rule CreateIdentifierTransferAttributeForAutoMappedTransferObjectType
//    transform s: JSL!EntityIdentifierDeclaration
//    to t: JUDOPSM!TransferAttribute
//    extends AbstractCreateIdentifierTransferAttributeForAutoMappedTransferObjectType {
//        guard: JSL!TransferDeclaration.all().exists(t | t.automap and t.map.entity == s.eContainer) and s.getReferenceType().isKindOf(JSL!PrimitiveDeclaration)
//        t.setId("(jsl/" + s.getId() + ")/CreateIdentifierTransferAttributeForAutoMappedTransferObjectType");
//
//        s.eContainer.equivalent("CreateAutoMappedTransferObjectType").attributes.add(t);
//        log.debug("Created TransferAttribute (Identifier) for AutoMappedTransferObjectType: [" + t.name + "] into [" + t.eContainer.name + "]");
//}
//
//@lazy
//@greedy
//rule CloneIdentifierTransferAttributeForAutoMappedTransferObjectType
//    transform s: JSL!EntityIdentifierDeclaration
//    to t: JUDOPSM!TransferAttribute
//    extends AbstractCreateIdentifierTransferAttributeForAutoMappedTransferObjectType {
//        t.setId("(jsl/" + s.getId() + ")/CloneIdentifierTransferAttributeForAutoMappedTransferObjectType");
//        log.debug("Clone TransferAttribute (Identifier) for AutoMappedTransferObjectType: [" + t.name + "]");
//}

////////////////////////////////////////////////////////////////////////////////////////////
// AutoMapped Primitive and Identifier default value
////////////////////////////////////////////////////////////////////////////////////////////
@abstract
rule AbstractCreateTransferDefaultValueAttributeForAutoMappedTransferObjectType
    transform s: JSL!Expression
    to t: JUDOPSM!TransferAttribute {
        t.name = defaultDefaultNamePrefix + s.eContainer.name + defaultDefaultNameMidfix + s.eContainer.eContainer.name + defaultDefaultNamePostfix;
        t.binding = s.equivalent("CreateDefaultValueForPrimitiveEntityMember");
        t.dataType = s.eContainer.getReferenceType().getPSMEquivalent();
}

@greedy
rule CreateDefaultTransferAttributeForAutoMappedTransferObjectType
    transform s: JSL!Expression
    to t: JUDOPSM!TransferAttribute
    extends AbstractCreateTransferDefaultValueAttributeForAutoMappedTransferObjectType {
        guard: JSL!TransferDeclaration.all().exists(t | t.automap and t.map.entity == s.eContainer) and s.getReferenceType().isKindOf(JSL!PrimitiveDeclaration)
        t.setId("(jsl/" + s.getId() + ")/CreateDefaultTransferAttributeForAutoMappedTransferObjectType");

        s.eContainer.equivalent("CreateEntityAutoMappedTransferObjectType").attributes.add(t);
        log.debug("Created TransferAttribute Default Value for AutoMappedTransferObjectType: [" + t.name + "] into [" + t.eContainer.name + "]");
}


// Create auto mapped transfer object default value attribute clone. It creates the attribute on the resource root,
// the caller code have to add it to the corresponding transfer object
// This method can be used to make clone attributes to inherited transfer objects
@lazy
@greedy
rule CloneTransferDefaultValueAttributeForAutoMappedTransferObjectType
    transform s: JSL!Expression
    to t: JUDOPSM!TransferAttribute
    extends AbstractCreateTransferDefaultValueAttributeForAutoMappedTransferObjectType {
        t.setId("(jsl/" + s.getId() + ")/CloneTransferDefaultValueAttributeForAutoMappedTransferObjectType");
        log.debug("Clone TransferAttribute Default Value (Field) for AutoMappedTransferObjectType: [" + t.name + "]");
}

////////////////////////////////////////////////////////////////////////////////////////////
// Derived (Primitive)
////////////////////////////////////////////////////////////////////////////////////////////

@abstract
rule AbstractCreateDerivedTransferAttributeForAutoMappedTransferObjectType
    transform s : JSL!EntityCalculatedFieldDeclaration
    to t : JUDOPSM!TransferAttribute {
        t.name = s.name;
        t.binding = s.equivalent("CreateDataProperty");
        t.dataType = s.getReferenceType().getPSMEquivalent();
}

@greedy
rule CreateDerivedTransferAttributeForAutoMappedTransferObjectType
    transform s: JSL!EntityCalculatedFieldDeclaration
    to t: JUDOPSM!TransferAttribute
    extends AbstractCreateDerivedTransferAttributeForAutoMappedTransferObjectType {
        guard: JSL!TransferDeclaration.all().exists(t | t.automap and t.map.entity == s.eContainer) and s.getReferenceType().isKindOf(JSL!PrimitiveDeclaration)

        t.setId("(jsl/" + s.getId() + ")/CreateDerivedTransferAttributeForAutoMappedTransferObjectType");

        s.eContainer.equivalent("CreateAutoMappedTransferObjectType").attributes.add(t);
        log.debug("Created TransferAttribute (Derived) for AutoMappedTransferObjectType: [" + t.name + "] into [" + t.eContainer.name + "]");
}

@lazy
@greedy
rule CloneDerivedTransferAttributeForAutoMappedTransferObjectType
    transform s: JSL!EntityCalculatedFieldDeclaration
    to t: JUDOPSM!TransferAttribute
    extends AbstractCreateDerivedTransferAttributeForAutoMappedTransferObjectType {
        t.setId("(jsl/" + s.getId() + ")/CloneDerivedTransferAttributeForAutoMappedTransferObjectType");
        log.debug("Clone TransferAttribute (Derived) for AutoMappedTransferObjectType: [" + t.name + "]");
}


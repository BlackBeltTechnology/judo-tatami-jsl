import "../../../../operations/_importAll.eol";

//////////////////////////////////////////////////
// Entity's default transfer object type
//////////////////////////////////////////////////
@greedy
rule CreateEntityDefaultTransferObjectType
    transform s : JSL!EntityDeclaration
    to t : JUDOPSM!MappedTransferObjectType {
        guard: generateDefaultTransferObject
        t.setId("(jsl/" + s.getId() + ")/CreateEntityDefaultTransferObjectType");
        t.entityType = s.getPSMEquivalent();

        t.entityType.defaultRepresentation = t;

        t.name = defaultTransferObjectNamePrefix + s.name + defaultTransferObjectNamePostfix;
        t.optional = false;
        t.queryCustomizer = false;

        // By default owned attributes are transformed in `transferAttribute.etl`, therefore we only transform inherited
        // members by calling the flattened member list from `entity.getInheritedMembers()`
        for (entity in s.`extends`) {
            var inheritedMembers = entity.getInheritedMembers();

            for (im in inheritedMembers) {
                // Field attribute
                if (im.isKindOf(JSL!EntityFieldDeclaration) and not im.isCalculated()) {
                    // Primitive attributes
                    if (im.getReferenceType().isKindOf(JSL!PrimitiveDeclaration)) {
                        t.attributes.add(im.equivalentDiscriminated("CloneTransferAttributeForDefaultTransferObjectType", t.getId()));
                        if (im.getDefault().isDefined()) {
                            t.attributes.add(im.getDefault().equivalentDiscriminated("CloneTransferDefaultValueAttributeForDefaultTransferObjectType", t.getId()));
                        }
                    // Embedded relations
                    } else if (im.getReferenceType().isKindOf(JSL!EntityDeclaration)) {
                        t.relations.add(im.equivalentDiscriminated("CloneTransferObjectRelationFromEntityFieldForDefaultTransferObjectType", t.getId()));
                    }
                // Relations
                } else if (im.isKindOf(JSL!EntityRelationDeclaration) and not im.isCalculated()) {
                    t.relations.add(im.equivalentDiscriminated("CloneTransferObjectRelationFromEntityRelationForDefaultTransferObjectType", t.getId()));
                // Prmitive Calculated
                } else if (im.isKindOf(JSL!EntityFieldDeclaration) and im.isCalculated()) {
                	if (not im.isEager()) {
                        t.attributes.add(im.equivalentDiscriminated("CloneEntityQueryTransferAttributeForDefaultTransferObjectType", t.getId()));
                	} else {
                        t.attributes.add(im.equivalentDiscriminated("CloneDerivedTransferAttributeForDefaultTransferObjectType", t.getId()));
                	}
                // Entity Calculated
                } else if (im.isKindOf(JSL!EntityRelationDeclaration) and im.isCalculated()) {
                    t.relations.add(im.equivalentDiscriminated("CloneTransferObjectDerivedRelationForDefaultTransferObjectType", t.getId()));
                }
            }

            // Opposite added relation
            for (o in JSL!EntityRelationOppositeInjected.all().select(o | o.eContainer.getReferenceType() == entity)) {
                t.relations.add(o.equivalent("CloneTransferObjectAssociatedOppositeRelationForDefaultTransferObjectType"));
            }
        }

        s.eContainer.getModelRoot().elements.add(t);
        log.debug("Created MappedTransferObjectType: " + t.name);
}

import "../../../../operations/_importAll.eol";

rule CreateEntityDefaultTransferObjectType
    transform s : JSL!EntityDeclaration
    to t : JUDOPSM!MappedTransferObjectType {
		guard: generateDefaultTransferObject
        t.setId("(jsl/" + s.getId() + ")/CreateEntityDefaultTransferObjectType");
        t.entityType = s.getPSMEquivalent();
        
        t.entityType.defaultRepresentation = t;
        
        t.name = defaultTransferObjectNamePrefix + s.name + defaultTransferObjectNamePostfix;
        t.optional = false;
        t.queryCustomizer = false;

        // By default owned attributes are transformed in `transferAttribute.etl`, therefore we only transform inherited
        // members by calling the flattened member list from `entity.getInheritedMembers()`
        for (entity in s.`extends`) {
            var inheritedMembers = entity.getInheritedMembers();

            for (im in inheritedMembers) {
				// Identifier attribute            
		        if (im.isKindOf(JSL!EntityIdentifierDeclaration)) {
					t.attributes.add(im.equivalentWithPrefix("CloneIdentifierTransferAttributeForDefaultTransferObjectType", t.getId()));
				// Field attribute		        
		        } else if (im.isKindOf(JSL!EntityFieldDeclaration)) {
					// Primitive attributes
	                if (im.referenceType.isKindOf(JSL!PrimitiveDeclaration)) {
						t.attributes.add(im.equivalentWithPrefix("CloneTransferAttributeForDefaultTransferObjectType", t.getId()));
						if (im.defaultExpression.isDefined()) {
    						t.attributes.add(im.equivalentWithPrefix("CloneTransferDefaultValueAttributeForDefaultTransferObjectType", t.getId()));
						}
					// Embedded relations
	                } else if (im.referenceType.isKindOf(JSL!EntityDeclaration)) {
						t.relations.add(im.equivalentWithPrefix("CloneTransferObjectEmbeddedRelationForDefaultTransferObjectType", t.getId()));	                
	                }
                // Relations
		        } else if (im.isKindOf(JSL!EntityRelationDeclaration)) {
					t.relations.add(im.equivalentWithPrefix("CloneTransferObjectAssociatedRelationForDefaultTransferObjectType", t.getId()));
                // Derives
		        } else if (im.isKindOf(JSL!EntityDerivedDeclaration)) {
					// Primitive derives
	                if (im.referenceType.isKindOf(JSL!PrimitiveDeclaration)) {
						t.attributes.add(im.equivalentWithPrefix("CloneDerivedTransferAttributeForDefaultTransferObjectType", t.getId()));
	                } else if (im.referenceType.isKindOf(JSL!EntityDeclaration)) {
						t.relations.add(im.equivalentWithPrefix("CloneTransferObjectDerivedRelationForDefaultTransferObjectType", t.getId()));
	                }
                // Entity queries
		        } else if (im.isKindOf(JSL!EntityQueryDeclaration)) {
					// Primitive derives
	                if (im.referenceType.isKindOf(JSL!PrimitiveDeclaration)) {
						t.attributes.add(im.equivalentWithPrefix("CloneEntityQueryTransferAttributeForDefaultTransferObjectType", t.getId()));
	                } else if (im.referenceType.isKindOf(JSL!EntityDeclaration)) {
						t.relations.add(im.equivalentWithPrefix("CloneTransferObjectEntityQueryRelationForDefaultTransferObjectType", t.getId()));
	                }
		        }

            }

			// Opposite added relation            
			for (o in JSL!EntityRelationOpposite.all().select(o | o.oppositeName.isDefined() and o.eContainer.referenceType == entity)) {
				t.relations.add(o.equivalent("CloneTransferObjectAssociatedOppositeRelationForDefaultTransferObjectType"));			
			}
        }

        s.eContainer.getModelRoot().elements.add(t);
        log.debug("Created MappedTransferObjectType: " + t.name);
}

import "../../../../operations/_importAll.eol";
import "../namespace/namespace.etl";

////////////////////////////////////////////////////////////////////////////////////////////
// Entity Field
////////////////////////////////////////////////////////////////////////////////////////////

@abstract
rule AbstractCreateTransferAttributeForDefaultTransferObjectType
    transform s: JSL!EntityFieldDeclaration
    to t: JUDOPSM!TransferAttribute {
        guard: generateDefaultTransferObject and s.getReferenceType().isKindOf(JSL!PrimitiveDeclaration) and not s.isCalculated()
        
        t.required = s.isRequired;
        t.name = s.name;
        t.binding = s.equivalent("CreateAttributeFromField");
        t.dataType = s.getReferenceType().getPSMEquivalent();

        if (s.getDefault().isDefined()) {
            t.defaultValue = s.getDefault().equivalent("CreateDefaultValueForPrimitiveEntityMember");
        }
}


// Create default transfer object attribute and add it to default transfer object
@greedy
rule CreateTransferAttributeForDefaultTransferObjectType
    transform s: JSL!EntityFieldDeclaration
    to t: JUDOPSM!TransferAttribute
    extends AbstractCreateTransferAttributeForDefaultTransferObjectType {
        guard: generateDefaultTransferObject and s.getReferenceType().isKindOf(JSL!PrimitiveDeclaration) and not s.isCalculated()
        
        t.setId("(jsl/" + s.getId() + ")/CreateTransferAttributeForDefaultTransferObjectType");
        s.eContainer.equivalent("CreateEntityDefaultTransferObjectType").attributes.add(t);
        log.debug("Created TransferAttribute (Field) for DefaultTransferObjectType: [" + t.name + "] into [" + t.eContainer.name + "]");
}

// Create default transfer object attribute clone. It creates the attribute on the resource root,
// the caller code have to add it to the corresponding transfer object
// This method can be used to make clone attributes to inherited transfer objects
@lazy
@greedy
rule CloneTransferAttributeForDefaultTransferObjectType
    transform s: JSL!EntityFieldDeclaration
    to t: JUDOPSM!TransferAttribute
    extends AbstractCreateTransferAttributeForDefaultTransferObjectType {
        guard: not s.isCalculated()
    
        t.setId("(jsl/" + s.getId() + ")/CloneTransferAttributeForDefaultTransferObjectType");
        log.debug("Clone TransferAttribute (Field) for DefaultTransferObjectType: [" + t.name + "]");
}

////////////////////////////////////////////////////////////////////////////////////////////
// Derived (Primitive)
////////////////////////////////////////////////////////////////////////////////////////////

@abstract
rule AbstractCreateDerivedTransferAttributeForDefaultTransferObjectType
    transform s : JSL!EntityFieldDeclaration
    to t : JUDOPSM!TransferAttribute {
        guard: generateDefaultTransferObject and s.isCalculated() and s.isEager()

        t.name = s.name;
        t.binding = s.equivalent("CreateDataProperty");
        t.dataType = s.getReferenceType().getPSMEquivalent();
}

@greedy
rule CreateDerivedTransferAttributeForDefaultTransferObjectType
    transform s: JSL!EntityFieldDeclaration
    to t: JUDOPSM!TransferAttribute
    extends AbstractCreateDerivedTransferAttributeForDefaultTransferObjectType {
        guard: generateDefaultTransferObject and s.isCalculated() and s.isEager()

        t.setId("(jsl/" + s.getId() + ")/CreateDerivedTransferAttributeForDefaultTransferObjectType");

        s.eContainer.equivalent("CreateEntityDefaultTransferObjectType").attributes.add(t);
        log.debug("Created TransferAttribute (Derived) for DefaultTransferObjectType: [" + t.name + "] into [" + t.eContainer.name + "]");
}

@lazy
@greedy
rule CloneDerivedTransferAttributeForDefaultTransferObjectType
    transform s: JSL!EntityFieldDeclaration
    to t: JUDOPSM!TransferAttribute
    extends AbstractCreateDerivedTransferAttributeForDefaultTransferObjectType {
        guard: generateDefaultTransferObject and s.isCalculated() and s.isEager()

        t.setId("(jsl/" + s.getId() + ")/CloneDerivedTransferAttributeForDefaultTransferObjectType");
        log.debug("Clone TransferAttribute (Derived) for DefaultTransferObjectType: [" + t.name + "]");
}

////////////////////////////////////////////////////////////////////////////////////////////
// Entity Query (Primitive)
////////////////////////////////////////////////////////////////////////////////////////////

@abstract
rule AbstractCreateEntityQueryTransferAttributeForDefaultTransferObjectType
    transform s : JSL!EntityFieldDeclaration
    to t : JUDOPSM!TransferAttribute {
        guard: generateDefaultTransferObject and s.isCalculated() and not s.isEager()

        t.name = s.name;
        t.binding = s.equivalent("CreateDataPropertyForEntityQuery");
        t.dataType = s.getReferenceType().getPSMEquivalent();
}

@greedy
rule CreateEntityQueryTransferAttributeForDefaultTransferObjectType
    transform s : JSL!EntityFieldDeclaration
    to t : JUDOPSM!TransferAttribute
    extends AbstractCreateEntityQueryTransferAttributeForDefaultTransferObjectType {
        guard: generateDefaultTransferObject and s.isCalculated() and not s.isEager()

        t.setId("(jsl/" + s.getId() + ")/CreateEntityQueryTransferAttributeForDefaultTransferObjectType");

        s.eContainer.equivalent("CreateEntityDefaultTransferObjectType").attributes.add(t);
        log.debug("Created TransferAttribute (Entity Query) for DefaultTransferObjectType: [" + t.name + "] into [" + t.eContainer.name + "]");
}

@lazy
@greedy
rule CloneEntityQueryTransferAttributeForDefaultTransferObjectType
    transform s : JSL!EntityFieldDeclaration
    to t : JUDOPSM!TransferAttribute
    extends AbstractCreateEntityQueryTransferAttributeForDefaultTransferObjectType {
        guard: generateDefaultTransferObject and s.isCalculated() and not s.isEager()

        t.setId("(jsl/" + s.getId() + ")/CloneEntityQueryTransferAttributeForDefaultTransferObjectType");
        log.debug("Clone TransferAttribute (Entity Query) for DefaultTransferObjectType: [" + t.name + "]");
}


////////////////////////////////////////////////////////////////////////////////////////////
// Primitive and Identifier default value
////////////////////////////////////////////////////////////////////////////////////////////

@abstract
rule AbstractCreateTransferDefaultValueAttributeForDefaultTransferObjectType
    transform s: JSL!DefaultModifier
    to t: JUDOPSM!TransferAttribute {
        guard: generateDefaultTransferObject and s.eContainer.isKindOf(JSL!EntityFieldDeclaration) and s.eContainer.getReferenceType().isKindOf(JSL!PrimitiveDeclaration)

        t.name = defaultDefaultNamePrefix + s.eContainer.name + defaultDefaultNameMidfix + s.eContainer.eContainer.name + defaultDefaultNamePostfix;
        t.binding = s.equivalent("CreateDefaultValueForPrimitiveEntityMember");
        t.dataType = s.eContainer.getReferenceType().getPSMEquivalent();
}

// Create default transfer object attribute for default value expression and add it to default transfer object
@greedy
rule CreateTransferDefaultValueAttributeForDefaultTransferObjectType
    transform s: JSL!DefaultModifier
    to t: JUDOPSM!TransferAttribute
    extends AbstractCreateTransferDefaultValueAttributeForDefaultTransferObjectType {
        guard: generateDefaultTransferObject and s.eContainer.isKindOf(JSL!EntityFieldDeclaration) and s.eContainer.getReferenceType().isKindOf(JSL!PrimitiveDeclaration)        

        t.setId("(jsl/" + s.getId() + ")/CreateTransferDefaultValueAttributeForDefaultTransferObjectType");
        s.eContainer.eContainer.equivalent("CreateEntityDefaultTransferObjectType").attributes.add(t);
        log.debug("Created TransferAttribute DefaultValue (Field) for DefaultTransferObjectType: [" + t.name + "] into [" + t.eContainer.name + "]");
}

// Create default transfer object default value attribute clone. It creates the attribute on the resource root,
// the caller code have to add it to the corresponding transfer object
// This method can be used to make clone attributes to inherited transfer objects
@lazy
@greedy
rule CloneTransferDefaultValueAttributeForDefaultTransferObjectType
    transform s: JSL!DefaultModifier
    to t: JUDOPSM!TransferAttribute
    extends AbstractCreateTransferDefaultValueAttributeForDefaultTransferObjectType {
        t.setId("(jsl/" + s.getId() + ")/CloneTransferDefaultValueAttributeForDefaultTransferObjectType");
        log.debug("Clone TransferAttribute Default Value (Field) for DefaultTransferObjectType: [" + t.name + "]");
}

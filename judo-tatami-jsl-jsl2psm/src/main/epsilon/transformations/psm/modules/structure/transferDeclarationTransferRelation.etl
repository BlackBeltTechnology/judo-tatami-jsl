
///////////////////////////////////////////////////////////////
// Transfer relation
///////////////////////////////////////////////////////////////

@abstract
rule AbstractCreateTransferObjectRelationForTransferRelationDeclaration
    transform s: JSL!TransferRelationDeclaration
    to t: JUDOPSM!TransferObjectRelation {
        t.name = s.name;
        t.target = s.getReferenceType().getPSMEquivalent();

        // TODO:
        // t.embeddedCreate = not s.eContainer.isAbstract;
        // t.embeddedUpdate = not s.eContainer.isAbstract;
        // t.embeddedDelete = not s.eContainer.isAbstract;

        t.embedded = s.isAggregation();
}


@greedy
rule CreateTransientTransferObjectRelationForTransferRelationDeclaration
    transform s: JSL!TransferRelationDeclaration
    to t: JUDOPSM!TransferObjectRelation
    extends AbstractCreateTransferObjectRelationForTransferRelationDeclaration {
        guard: not s.maps and not s.reads

        t.setId("(jsl/" + s.getId() + ")/CreateTransientTransferObjectRelationForTransferRelationDeclaration");
        t.cardinality = s.equivalentWithPrefix("CreateCardinalityForTransferRelationDeclaration", t.getId());

        var def = JSL!TransferDataAssignment.all().selectOne(d | d.leftValue.declaration == s);
        if (def.isDefined()) {
           if (s.eContainer.map.isUndefined()) {
              t.defaultValue = def.equivalent("CreateDefaultStaticNavigationForUnmappedTransferObjectConstructor");
           } else {
              t.defaultValue = def.equivalent("CreateDefaultNavigationPropertyForMappedTransferObjectConstructor");
           }
        }      

        s.eContainer.getPSMEquivalent().relations.add(t);

        log.debug("Created TransferObjectRelation for TransferRelationDeclaration: [" + t.name + "] into [" + t.eContainer.name + "]");
}

@greedy
rule CreateDerivedTransferObjectEmbeddedRelationForTransferRelationDeclaration
    transform s : JSL!TransferRelationDeclaration
    to t : JUDOPSM!TransferObjectRelation
    extends AbstractCreateTransferObjectRelationForTransferRelationDeclaration {
      guard: s.reads

      t.setId("(jsl/" + s.getId() + ")/CreateDerivedTransferObjectEmbeddedRelationForTransferRelationDeclaration");
      t.cardinality = s.equivalentWithPrefix("CreateCardinalityForTransferRelationDeclaration", t.getId());

      if (s.eContainer.map.isDefined()) {
         t.binding = s.getterExpr.equivalent("CreateReadsNavigationPropertyForMappedTransferObjectTransferRelationDeclaration");
      } else {
         t.binding = s.getterExpr.equivalent("CreateReadsReferenceExpressionForUnmappedTransferObjectTransferRelationDeclaration");
      }

      s.eContainer.getPSMEquivalent().relations.add(t);
      log.debug("Created TransferObjectRelation for TransferRelationDeclaration: [" + t.name + "] into [" + t.eContainer.name + "]");
}

@greedy
rule CreateMappedTransferObjectEmbeddedRelationForTransferRelationDeclaration
    transform s : JSL!TransferRelationDeclaration
    to t : JUDOPSM!TransferObjectRelation
    extends AbstractCreateTransferObjectRelationForTransferRelationDeclaration {
      guard: s.maps

      t.setId("(jsl/" + s.getId() + ")/CreateMappedTransferObjectEmbeddedRelationForTransferRelationDeclaration");
      t.cardinality = s.equivalentWithPrefix("CreateCardinalityForTransferRelationDeclaration", t.getId());

      var entityMember = s.getterExpr.features.first.member;

      if (entityMember.isKindOf(JSL!EntityFieldDeclaration) and not entityMember.calculated) {
          t.binding = entityMember.equivalent("CreateContainmentFromField");
      } else if (entityMember.isKindOf(JSL!EntityRelationDeclaration) and not entityMember.calculated) {
          t.binding = entityMember.equivalent("CreateDeclaredAssociationEnd");
      } else if (entityMember.isKindOf(JSL!EntityRelationOppositeInjected)) {
          t.binding = entityMember.equivalent("CreateNamedOppositeAssociationEnd");
      } else {
          throw "Invalid member type - " + s.eContainer.name + "." + e.name + " " + entityMember;
      }


      var def = JSL!TransferDataAssignment.all().selectOne(d | d.leftValue.declaration == s);
      if (def.isDefined()) {
        t.defaultValue = def.equivalent("CreateDefaultNavigationPropertyForMappedTransferObjectConstructor");
      }      

      s.eContainer.getPSMEquivalent().relations.add(t);
      log.debug("Created TransferObjectRelation for TransferRelationDeclaration: [" + t.name + "] into [" + t.eContainer.name + "]");
}

////////////////////////////////////////////////////////////////////////////////////////////
// Relation default value
////////////////////////////////////////////////////////////////////////////////////////////

@greedy
rule CreateTransferEntityDefaultValueRelationForMappedTransferObjectConstructor
    transform s: JSL!TransferDataAssignment
    to t: JUDOPSM!TransferObjectRelation {
        guard: s.leftValue.declaration.getReferenceType().isKindOf(JSL!TransferDeclaration) and s.leftValue.declaration.eContainer.map.isDefined()
        t.setId("(jsl/" + s.leftValue.declaration.getId() + ")/CreateTransferEntityDefaultValueRelationForMappedTransferObjectConstructor");
        t.name = defaultDefaultNamePrefix + s.leftValue.declaration.name + defaultDefaultNameMidfix + s.leftValue.declaration.eContainer.name + defaultDefaultNamePostfix;
        t.binding = s.equivalent("CreateDefaultNavigationPropertyForMappedTransferObjectConstructor");
        t.target = s.leftValue.declaration.getReferenceType().getPSMEquivalent();        
        t.cardinality = s.leftValue.declaration.equivalentWithPrefix("CreateCardinalityForTransferRelationDeclaration", t.getId());
        s.eContainer.eContainer.getPSMEquivalent().relations.add(t);
}


@greedy
rule CreateTransferEntityDefaultValueRelationForUnmappedTransferObjectConstructor
    transform s: JSL!TransferDataAssignment
    to t: JUDOPSM!TransferObjectRelation {
        guard: s.leftValue.declaration.getReferenceType().isKindOf(JSL!TransferDeclaration) and s.leftValue.declaration.eContainer.map.isUndefined()
        t.setId("(jsl/" + s.leftValue.declaration.getId() + ")/CreateTransferEntityDefaultValueRelationForUnmappedTransferObjectConstructor");
        t.name = defaultDefaultNamePrefix + s.leftValue.declaration.name + defaultDefaultNameMidfix + s.leftValue.declaration.eContainer.name + defaultDefaultNamePostfix;
        t.binding = s.equivalent("CreateDefaultStaticNavigationForUnmappedTransferObjectConstructor");
        t.target = s.leftValue.declaration.getReferenceType().getPSMEquivalent();        
        t.cardinality = s.leftValue.declaration.equivalentWithPrefix("CreateCardinalityForTransferRelationDeclaration", t.getId());
        s.eContainer.eContainer.getPSMEquivalent().relations.add(t);
}



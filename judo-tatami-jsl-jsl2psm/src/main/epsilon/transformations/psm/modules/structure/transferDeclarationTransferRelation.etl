
///////////////////////////////////////////////////////////////
// Transfer relation
///////////////////////////////////////////////////////////////

@abstract
rule AbstractCreateTransferObjectRelationForTransferRelationDeclaration
    transform s: JSL!TransferRelationDeclaration
    to t: JUDOPSM!TransferObjectRelation {
        t.name = s.name;
        t.target = s.getReferenceType().getTransferDeclarationEquivalent();

        if (s.isCreateAllowed()) {
            t.embeddedCreate = true;
        }
        if (s.isUpdateAllowed()) {
            t.embeddedUpdate = true;
        }
        if (s.isDeleteAllowed()) {
            t.embeddedDelete = true;
        }
        t.embedded = s.isAggregation();

        if (s.isGetRangeSupported()) {
            t.range = s.getTransferActionRangeEquivalent();
        }
}


@greedy
rule CreateTransientTransferObjectRelationForTransferRelationDeclaration
    transform s: JSL!TransferRelationDeclaration
    to t: JUDOPSM!TransferObjectRelation
    extends AbstractCreateTransferObjectRelationForTransferRelationDeclaration {
        guard: not s.maps() and not s.reads() and not s.isActorRelated()

        t.setId("(jsl/" + s.getId() + ")/CreateTransientTransferObjectRelationForTransferRelationDeclaration");
        t.cardinality = s.equivalentDiscriminated("CreateCardinalityForTransferRelationDeclaration", t.getId());

        if (s.getDefault().isDefined()) {
           if (s.getTransferContainer().map.isUndefined()) {
              t.defaultValue = s.getDefault().equivalent("CreateDefaultStaticNavigationForUnmappedTransferObjectConstructor");
           } else {
              t.defaultValue = s.getDefault().equivalent("CreateDefaultNavigationPropertyForMappedTransferObjectConstructor");
           }
        }      

        s.getTransferContainer().getTransferDeclarationEquivalent().relations.add(t);

        log.debug("Created TransferObjectRelation for TransferRelationDeclaration: [" + t.name + "] into [" + t.eContainer.name + "]");
}

@greedy
rule CreateDerivedTransferObjectEmbeddedRelationForTransferRelationDeclaration
    transform s : JSL!TransferRelationDeclaration
    to t : JUDOPSM!TransferObjectRelation
    extends AbstractCreateTransferObjectRelationForTransferRelationDeclaration {
      guard: s.reads() and not s.isActorRelated()

      t.setId("(jsl/" + s.getId() + ")/CreateDerivedTransferObjectEmbeddedRelationForTransferRelationDeclaration");
      t.cardinality = s.equivalentDiscriminated("CreateCardinalityForTransferRelationDeclaration", t.getId());

      if (s.getTransferContainer().map.isDefined()) {
         t.binding = s.getterExpr.equivalent("CreateReadsNavigationPropertyForMappedTransferObjectTransferRelationDeclaration");
      } else {
         t.binding = s.getterExpr.equivalent("CreateReadsReferenceExpressionForUnmappedTransferObjectTransferRelationDeclaration");
      }

      s.getTransferContainer().getTransferDeclarationEquivalent().relations.add(t);
      log.debug("Created TransferObjectRelation for TransferRelationDeclaration: [" + t.name + "] into [" + t.eContainer.name + "]");
}

@greedy
rule CreateMappedTransferObjectEmbeddedRelationForTransferRelationDeclaration
    transform s : JSL!TransferRelationDeclaration
    to t : JUDOPSM!TransferObjectRelation
    extends AbstractCreateTransferObjectRelationForTransferRelationDeclaration {
      guard: s.maps() and not s.isActorRelated()

      t.setId("(jsl/" + s.getId() + ")/CreateMappedTransferObjectEmbeddedRelationForTransferRelationDeclaration");
      t.cardinality = s.equivalentDiscriminated("CreateCardinalityForTransferRelationDeclaration", t.getId());

      var entityMember = s.getterExpr.features.first.member;

      if (entityMember.isKindOf(JSL!EntityFieldDeclaration) and not entityMember.isCalculated()) {
          t.binding = entityMember.equivalent("CreateContainmentFromField");
      } else if (entityMember.isKindOf(JSL!EntityRelationDeclaration) and not entityMember.isCalculated()) {
          t.binding = entityMember.equivalent("CreateDeclaredAssociationEnd");
      } else if (entityMember.isKindOf(JSL!EntityRelationOppositeInjected)) {
          t.binding = entityMember.equivalent("CreateNamedOppositeAssociationEnd");
      } else {
          throw "Invalid member type - " + s.getTransferContainer().name + "." + s.name + " " + entityMember;
      }

      if (s.getDefault().isDefined()) {
        t.defaultValue = s.getDefault().equivalent("CreateDefaultNavigationPropertyForMappedTransferObjectConstructor");
      }      

      s.getTransferContainer().getTransferDeclarationEquivalent().relations.add(t);
      log.debug("Created TransferObjectRelation for TransferRelationDeclaration: [" + t.name + "] into [" + t.eContainer.name + "]");
}

////////////////////////////////////////////////////////////////////////////////////////////
// Relation default value
////////////////////////////////////////////////////////////////////////////////////////////

@greedy
rule CreateTransferEntityDefaultValueRelationForMappedTransferObjectConstructor
    transform s: JSL!DefaultModifier
    to t: JUDOPSM!TransferObjectRelation {
        guard: s.eContainer.isKindOf(JSL!TransferRelationDeclaration) and s.eContainer.getTransferContainer().map.isDefined()

        t.setId("(jsl/" + s.getId() + ")/CreateTransferEntityDefaultValueRelationForMappedTransferObjectConstructor");
        t.name = defaultDefaultNamePrefix + s.eContainer.name + defaultDefaultNameMidfix + s.eContainer.getTransferContainer().name + defaultDefaultNamePostfix;
        t.binding = s.equivalent("CreateDefaultNavigationPropertyForMappedTransferObjectConstructor");
        t.target = s.eContainer.getReferenceType().getTransferDeclarationEquivalent();        
        t.cardinality = s.eContainer.equivalentDiscriminated("CreateCardinalityForTransferRelationDeclaration", t.getId());
        s.eContainer.getTransferContainer().getTransferDeclarationEquivalent().relations.add(t);
}


@greedy
rule CreateTransferEntityDefaultValueRelationForUnmappedTransferObjectConstructor
    transform s: JSL!DefaultModifier
    to t: JUDOPSM!TransferObjectRelation {
//        guard: s.leftValue.declaration.getReferenceType().isKindOf(JSL!TransferDeclaration) and s.leftValue.declaration.eContainer.map.isUndefined()
        guard: s.eContainer.isKindOf(JSL!TransferRelationDeclaration) and s.eContainer.getTransferContainer().map.isUndefined()
        t.setId("(jsl/" + s.getId() + ")/CreateTransferEntityDefaultValueRelationForUnmappedTransferObjectConstructor");
        t.name = defaultDefaultNamePrefix + s.eContainer.name + defaultDefaultNameMidfix + s.eContainer.getTransferContainer().name + defaultDefaultNamePostfix;
        t.binding = s.equivalent("CreateDefaultStaticNavigationForUnmappedTransferObjectConstructor");
        t.target = s.eContainer.getReferenceType().getPrimitiveDeclarationEquivalent();        
        t.cardinality = s.eContainer.equivalentDiscriminated("CreateCardinalityForTransferRelationDeclaration", t.getId());
        s.eContainer.getTransferContainer().getTransferDeclarationEquivalent().relations.add(t);
}


////////////////////////////////////////////////////////////////////////////////////////////
// Relation range
////////////////////////////////////////////////////////////////////////////////////////////
@greedy
rule CreateRelationRangeReferenceExpressionTypeForMappedTransferObjectRelation
    transform s : JSL!ChoiceModifier
    to t: JUDOPSM!ReferenceExpressionType {
        guard: s.eContainer.isKindOf(JSL!TransferRelationDeclaration) and s.eContainer.getTransferContainer().map.isDefined()

        t.setId("(jsl/" + s.eContainer.getId() + ")/CreateRelationRangeReferenceExpressionTypeForMappedTransferObjectRelation");
        t.expression = expressionUtils.getJqlForExpression(s.expression, entityNamePrefix, entityNamePostfix);
        s.equivalent("CreateRelationRangeNavigationPropertyForMappedTransferObjectRelation").getterExpression = t;

        log.debug("Created ReferenceExpressionType for Transfer Object Default Value: " + t.expression);
    }

@greedy
rule CreateRelationRangeNavigationPropertyForMappedTransferObjectRelation
    transform s : JSL!ChoiceModifier
    to t: JUDOPSM!NavigationProperty {
        guard: s.eContainer.isKindOf(JSL!TransferRelationDeclaration) and s.eContainer.getTransferContainer().map.isDefined()

        t.setId("(jsl/" + s.eContainer.getId() + ")/CreateRelationRangeNavigationPropertyForMappedTransferObjectRelation");
        t.name = defaultRelationRangeNamePrefix + s.eContainer.name + defaultRelationRangeNameMidfix + s.eContainer.getTransferContainer().name + defaultRelationRangeNamePostfix;
        t.target = s.eContainer.getReferenceType().getTransferDeclarationEquivalent().entityType;
  	    t.cardinality = s.eContainer.equivalentDiscriminated("CreateCardinalityForGetRelationRangeEntityRelation", t.getId());
        s.eContainer.getTransferContainer().map.entity.getEntityDeclarationEquivalent().navigationProperties.add(t);

        log.debug("Created NavigationProperty for Transfer Object Default Value: " + s);
    }

@greedy
rule CreateRelationRangeReferenceExpressionTypeForUnmappedTransferObjectRelation
    transform s : JSL!ChoiceModifier
    to t: JUDOPSM!ReferenceExpressionType {
        guard: s.eContainer.isKindOf(JSL!TransferRelationDeclaration) and s.eContainer.getTransferContainer().map.isUndefined()
        
        t.setId("(jsl/" + s.eContainer.getId() + ")/CreateRelationRangeReferenceExpressionTypeForUnmappedTransferObjectRelation");
        t.expression = expressionUtils.getJqlForExpression(s.expression, entityNamePrefix, entityNamePostfix);
        s.equivalent("CreateRelationRangStaticNavigationForUnmappedTransferObjectRelation").getterExpression = t;

        log.debug("Created ReferenceExpressionType for Transfer Object Default Value: " + t.expression);
    }

@greedy
rule CreateRelationRangStaticNavigationForUnmappedTransferObjectRelation
    transform s : JSL!ChoiceModifier
    to t: JUDOPSM!StaticNavigation {
        guard: s.eContainer.isKindOf(JSL!TransferRelationDeclaration) and s.eContainer.getTransferContainer().map.isUndefined()

        t.setId("(jsl/" + s.eContainer.getId() + ")/CreateRelationRangStaticNavigationForUnmappedTransferObjectRelation");
        t.name = defaultRelationRangeNamePrefix + s.eContainer.name + defaultRelationRangeNameMidfix + s.eContainer.getTransferContainer().name + defaultRelationRangeNamePostfix;
        t.target = s.eContainer.getReferenceType().getTransferDeclarationEquivalent().entityType;
  	    t.cardinality = s.eContainer.equivalentDiscriminated("CreateCardinalityForGetRelationRangeEntityRelation", t.getId());

        s.eContainer.getTransferContainer().eContainer.getModelRoot().elements.add(t);
        
        log.debug("Created StaticNavigation for Transfer Object Default Value: " + s);
    }


@greedy
rule CreateRelationRangeTransferObjectRelation
    transform s : JSL!ChoiceModifier
    to t : JUDOPSM!TransferObjectRelation {
        guard: s.eContainer.isKindOf(JSL!TransferRelationDeclaration) and s.eContainer.isGetRangeSupported()

        t.setId("(esm/" + s.getId() + ")/CreateRelationRangeTransferObjectRelation");

        t.name = s.eContainer.getTransferActionRangeEquivalent().name;
        t.cardinality = s.eContainer.equivalent("CreateCardinalityForGetRelationRangeTransferObjectRelation");
        t.target = s.eContainer.getReferenceType().getTransferDeclarationEquivalent();
        t.binding = s.eContainer.getTransferActionRangeEquivalent();

        s.eContainer.eContainer.getTransferDeclarationEquivalent().relations.add(t);
}


@lazy
@greedy
rule CreateCardinalityForGetRelationRangeEntityRelation
    transform s: JSL!TransferRelationDeclaration
    to t : JUDOPSM!Cardinality {
        t.setId("(jsl/" + s.getId() + ")/CreateCardinalityForGetRelationRangeEntityRelation");
        t.lower = 0;
        t.upper = -1;
}

@lazy
@greedy
rule CreateCardinalityForGetRelationRangeTransferObjectRelation
    transform s: JSL!TransferRelationDeclaration
    to t : JUDOPSM!Cardinality {
        t.setId("(jsl/" + s.getId() + ")/CreateCardinalityForGetRelationRangeTransferObjectRelation");
        t.lower = 0;
        t.upper = -1;
}

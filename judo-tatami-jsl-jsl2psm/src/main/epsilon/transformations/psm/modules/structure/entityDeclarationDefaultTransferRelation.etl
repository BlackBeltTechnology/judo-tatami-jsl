///////////////////////////////////////////////////////////////
// Entity composite relation
///////////////////////////////////////////////////////////////

@abstract
rule AbstractCreateTransferObjectRelationFromEntityFieldForDefaultTransferObjectType
    transform s: JSL!EntityFieldDeclaration
    to t: JUDOPSM!TransferObjectRelation {
        guard: generateDefaultTransferObject and s.getReferenceType().isKindOf(JSL!EntityDeclaration) and not s.calculated

        t.name = s.name;
        t.target = s.getReferenceType().equivalent("CreateEntityDefaultTransferObjectType");

        t.embeddedCreate = not s.eContainer.isAbstract;
        t.embeddedUpdate = not s.eContainer.isAbstract;
        t.embeddedDelete = not s.eContainer.isAbstract;

        t.embedded = s.isEager();
        t.binding = s.equivalent("CreateContainmentFromField");
}

rule CreateTransferObjectRelationFromEntityFieldForDefaultTransferObjectType
    transform s: JSL!EntityFieldDeclaration
    to t: JUDOPSM!TransferObjectRelation
    extends AbstractCreateTransferObjectRelationFromEntityFieldForDefaultTransferObjectType {
        guard: generateDefaultTransferObject and s.getReferenceType().isKindOf(JSL!EntityDeclaration) and not s.calculated

        t.setId("(jsl/" + s.getId() + ")/CreateTransferObjectEmbeddedRelationForDefaultTransferObjectType");
        t.cardinality = s.equivalentWithPrefix("CreateCardinalityForFieldDeclaration", t.getId());

        s.eContainer.equivalent("CreateEntityDefaultTransferObjectType").relations.add(t);
        log.debug("Created TransferObjectRelation for DefaultTransferObjectType: [" + t.name + "] into [" + t.eContainer.name + "]");
}

@lazy
rule CloneTransferObjectRelationFromEntityFieldForDefaultTransferObjectType
    transform s: JSL!EntityFieldDeclaration
    to t: JUDOPSM!TransferObjectRelation
    extends AbstractCreateTransferObjectRelationFromEntityFieldForDefaultTransferObjectType {
		guard: not s.calculated

        t.setId("(jsl/" + s.getId() + ")/CloneTransferObjectEmbeddedRelationForDefaultTransferObjectType");
        t.cardinality = s.equivalentWithPrefix("CreateCardinalityForFieldDeclaration", t.getId());

        log.debug("Clone TransferObjectRelation for DefaultTransferObjectType: [" + t.name + "]");
}

///////////////////////////////////////////////////////////////
// Entity association relation
///////////////////////////////////////////////////////////////

@abstract
rule AbstractCreateTransferObjectRelationFromEntityRelationForDefaultTransferObjectType
    transform s: JSL!EntityRelationDeclaration
    to t: JUDOPSM!TransferObjectRelation {
        guard: generateDefaultTransferObject and s.getReferenceType().isKindOf(JSL!EntityDeclaration) and not s.calculated

        t.name = s.name;
        t.target = s.getReferenceType().equivalent("CreateEntityDefaultTransferObjectType");

        t.embeddedCreate = not s.eContainer.isAbstract;
        t.embeddedUpdate = not s.eContainer.isAbstract;
        t.embeddedDelete = not s.eContainer.isAbstract;

        t.binding = s.equivalent("CreateDeclaredAssociationEnd");
        t.embedded = s.isEager();
}


rule CreateTransferObjectRelationFromEntityRelationForDefaultTransferObjectType
    transform s: JSL!EntityRelationDeclaration
    to t: JUDOPSM!TransferObjectRelation
    extends AbstractCreateTransferObjectRelationFromEntityRelationForDefaultTransferObjectType {
        guard: generateDefaultTransferObject and s.getReferenceType().isKindOf(JSL!EntityDeclaration) and not s.calculated

        t.setId("(jsl/" + s.getId() + ")/CreateTransferObjectRelationForDefaultTransferObjectType");
        t.cardinality = s.equivalentWithPrefix("CreateCardinalityForRelationDeclaration", t.getId());

        s.eContainer.equivalent("CreateEntityDefaultTransferObjectType").relations.add(t);

        log.debug("Created TransferObjectRelation for DefaultTransferObjectType: [" + t.name + "] into [" + t.eContainer.name + "]");
}

@lazy
rule CloneTransferObjectRelationFromEntityRelationForDefaultTransferObjectType
    transform s: JSL!EntityRelationDeclaration
    to t: JUDOPSM!TransferObjectRelation
    extends AbstractCreateTransferObjectRelationFromEntityRelationForDefaultTransferObjectType {
		guard: not s.calculated

        t.setId("(jsl/" + s.getId() + ")/CloneTransferObjectRelationForDefaultTransferObjectType");
        t.cardinality = s.equivalentWithPrefix("CreateCardinalityForRelationDeclaration", t.getId());

        log.debug("Clone TransferObjectRelation for DefaultTransferObjectType: [" + t.name + "]");
}

///////////////////////////////////////////////////////////////
// Entity added opposite associatin relation
///////////////////////////////////////////////////////////////
@abstract
rule AbstractCreateTransferObjectAssociatedOppositeRelationForDefaultTransferObjectType
    transform s: JSL!EntityRelationOppositeInjected
    to t: JUDOPSM!TransferObjectRelation {
        guard: generateDefaultTransferObject

        var relationAddedFrom = s.eContainer;
        var entityToAdd = relationAddedFrom.getReferenceType();

        t.name = s.name;
        t.target = relationAddedFrom.eContainer.equivalent("CreateEntityDefaultTransferObjectType");

        t.embeddedCreate = not entityToAdd.isAbstract;
        t.embeddedUpdate = not entityToAdd.isAbstract;
        t.embeddedDelete = not entityToAdd.isAbstract;

        t.embedded = false;

        t.binding = s.equivalent("CreateNamedOppositeAssociationEnd");
}

rule CreateTransferObjectAssociatedOppositeRelationForDefaultTransferObjectType
    transform s: JSL!EntityRelationOppositeInjected
    to t: JUDOPSM!TransferObjectRelation
    extends AbstractCreateTransferObjectAssociatedOppositeRelationForDefaultTransferObjectType {
        guard: generateDefaultTransferObject

        var relationAddedFrom = s.eContainer;
        var entityToAdd = relationAddedFrom.getReferenceType();

        t.setId("(jsl/" + s.getId() + ")/CreateTransferObjectAssociatedOppositeRelationForDefaultTransferObjectType");
        t.cardinality = s.equivalentWithPrefix("CreateCardinalityForOppositeAddedRelation", t.getId());

        entityToAdd.equivalent("CreateEntityDefaultTransferObjectType").relations.add(t);
        log.debug("Created TransferObjectRelation for DefaultTransferObjectType: [" + t.name + "] into [" + t.eContainer.name + "]");
}

@lazy
rule CloneTransferObjectAssociatedOppositeRelationForDefaultTransferObjectType
    transform s: JSL!EntityRelationOppositeInjected
    to t: JUDOPSM!TransferObjectRelation
    extends AbstractCreateTransferObjectAssociatedOppositeRelationForDefaultTransferObjectType {

        var relationAddedFrom = s.eContainer;
        var entityToAdd = relationAddedFrom.getReferenceType();

        t.setId("(jsl/" + s.getId() + ")/CloneTransferObjectAssociatedOppositeRelationForDefaultTransferObjectType");
        t.cardinality = s.equivalentWithPrefix("CreateCardinalityForOppositeAddedRelation", t.getId());

        log.debug("Clone TransferObjectRelation for DefaultTransferObjectType: [" + t.name + "]");
}



///////////////////////////////////////////////////////////////////////////
// Derived relation
///////////////////////////////////////////////////////////////////////////

@abstract
rule AbstractCreateTransferObjectDerivedRelationForDefaultTransferObjectType
    transform s : JSL!EntityRelationDeclaration
    to t : JUDOPSM!TransferObjectRelation {
      guard: generateDefaultTransferObject and s.calculated
    
      t.name = s.name;
      t.target = s.getReferenceType().equivalent("CreateEntityDefaultTransferObjectType");

      t.embeddedCreate = false;
      t.embeddedUpdate = false;
      t.embeddedDelete = false;

      t.binding = s.equivalent("CreateNavigationProperty");
      t.embedded = s.isEager();

}


rule CreateTransferObjectDerivedRelationForDefaultTransferObjectType
    transform s: JSL!EntityRelationDeclaration
    to t: JUDOPSM!TransferObjectRelation
    extends AbstractCreateTransferObjectDerivedRelationForDefaultTransferObjectType {
        guard: generateDefaultTransferObject and s.calculated
    
        t.setId("(jsl/" + s.getId() + ")/CreateTransferObjectDerivedRelationForDefaultTransferObjectType");
        t.cardinality = s.equivalentWithPrefix("CreateCardinalityForDerivedDeclaration", t.getId());

        s.eContainer.equivalent("CreateEntityDefaultTransferObjectType").relations.add(t);

        log.debug("Created TransferObjectRelation for DefaultTransferObjectType: [" + t.name + "] into [" + t.eContainer.name + "]");

}

@lazy
rule CloneTransferObjectDerivedRelationForDefaultTransferObjectType
    transform s: JSL!EntityRelationDeclaration
    to t: JUDOPSM!TransferObjectRelation
    extends AbstractCreateTransferObjectDerivedRelationForDefaultTransferObjectType {
		guard: s.calculated

        t.setId("(jsl/" + s.getId() + ")/CloneTransferObjectDerivedRelationForDefaultTransferObjectType");
        t.cardinality = s.equivalentWithPrefix("CreateCardinalityForDerivedDeclaration", t.getId());


        log.debug("Clone TransferObjectRelation for DefaultTransferObjectType: [" + t.name + "]");
}

///////////////////////////////////////////////////////////////////////////
// Entity Query relation
///////////////////////////////////////////////////////////////////////////

//@abstract
//rule AbstractCreateTransferObjectEntityQueryRelationForDefaultTransferObjectType
//    transform s : JSL!EntityRelationDeclaration
//    to t : JUDOPSM!TransferObjectRelation
//    {
//      guard: generateDefaultTransferObject and s.calculated and not s.isEager()
//
//      t.name = s.name;
//      t.target = s.getReferenceType().equivalent("CreateEntityDefaultTransferObjectType");
//
//      t.embeddedCreate = false;
//      t.embeddedUpdate = false;
//      t.embeddedDelete = false;
//
//      t.binding = s.equivalent("CreateNavigationPropertyForEntityQuery");
//      t.embedded = false;
//
//}

//rule CreateTransferObjectEntityQueryRelationForDefaultTransferObjectType
//    transform s: JSL!EntityRelationDeclaration
//    to t: JUDOPSM!TransferObjectRelation
//    extends AbstractCreateTransferObjectEntityQueryRelationForDefaultTransferObjectType {
//        guard: generateDefaultTransferObject and s.isQuery() and s.calculated
//
//        t.setId("(jsl/" + s.getId() + ")/CreateTransferObjectEntityQueryRelationForDefaultTransferObjectType");
//        t.cardinality = s.equivalentWithPrefix("CreateCardinalityForEntityQueryDeclaration", t.getId());
//
//        s.eContainer.equivalent("CreateEntityDefaultTransferObjectType").relations.add(t);
//
//        log.debug("Created TransferObjectRelation for DefaultTransferObjectType: [" + t.name + "] into [" + t.eContainer.name + "]");
//
//}

//@lazy
//rule CloneTransferObjectQueryRelationForDefaultTransferObjectType
//    transform s: JSL!EntityRelationDeclaration
//    to t: JUDOPSM!TransferObjectRelation
//    extends AbstractCreateTransferObjectEntityQueryRelationForDefaultTransferObjectType {
//		guard: generateDefaultTransferObject and s.calculated and not s.isEager()
//
//        t.setId("(jsl/" + s.getId() + ")/CloneTransferObjectQueryRelationForDefaultTransferObjectType");
//        t.cardinality = s.equivalentWithPrefix("CreateCardinalityForEntityQueryDeclaration", t.getId());
//
//
//        log.debug("Clone TransferObjectRelation for DefaultTransferObjectType: [" + t.name + "]");
//}


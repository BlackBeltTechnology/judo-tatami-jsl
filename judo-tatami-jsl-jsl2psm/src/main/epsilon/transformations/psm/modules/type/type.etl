import "../namespace/namespace.etl";
import "../../../../operations/_importAll.eol";

@greedy
rule CreateNumericType
    transform s: JSL!DataTypeDeclaration
    to t: JUDOPSM!NumericType {
        guard: s.`primitive` == "numeric" and not s.eContainer.name.equivalent("CreateModelPackages").elements.collect(e | e.name).contains(s.name)

        t.setId("(jsl/" + s.getId() + ")/CreateNumericType");
        t.name = s.name;
        t.precision = s.precision.value.intValue();
        t.scale = s.scale.value.intValue();
        s.eContainer.getModelRoot().elements.add(t);
        log.debug("Created NumericType: " + t.name);
    }

@greedy
rule CreateDateType
  transform s: JSL!DataTypeDeclaration
  to t: JUDOPSM!DateType {
        guard: s.`primitive` == "date" and not s.eContainer.name.equivalent("CreateModelPackages").elements.collect(e | e.name).contains(s.name)

        t.setId("(jsl/" + s.getId() + ")/CreateDateType");
        t.name = s.name;
        s.eContainer.getModelRoot().elements.add(t);
        log.debug("Created DateType: " + t.name);
  }

@greedy
rule CreateTimeType
  transform s: JSL!DataTypeDeclaration
  to t: JUDOPSM!TimeType {
        guard: s.`primitive` == "time" and not s.eContainer.name.equivalent("CreateModelPackages").elements.collect(e | e.name).contains(s.name)

        t.setId("(jsl/" + s.getId() + ")/CreateTimeType");
        t.name = s.name;
        s.eContainer.getModelRoot().elements.add(t);
        log.debug("Created TimeType: " + t.name);
  }

@greedy
rule CreateTimestampType
    transform s: JSL!DataTypeDeclaration
    to t: JUDOPSM!TimestampType {
        guard: s.`primitive` == "timestamp" and not s.eContainer.name.equivalent("CreateModelPackages").elements.collect(e | e.name).contains(s.name)

        t.setId("(jsl/" + s.getId() + ")/CreateTimestampType");
        t.name = s.name;
        s.eContainer.getModelRoot().elements.add(t);
        log.debug("Created TimestampType: " + t.name);
    }

@greedy
rule CreateEnumerationType
    transform s: JSL!EnumDeclaration
    to t: JUDOPSM!EnumerationType {
        t.setId("(jsl/" + s.getId() + ")/CreateEnumerationType");
        t.name = s.name;
        s.eContainer.getModelRoot().elements.add(t);
        log.debug("Created EnumerationType: " + t.name);
    }

@greedy
rule CreateEnumerationMember
    transform s: JSL!EnumLiteral
    to t: JUDOPSM!EnumerationMember {
        t.setId("(jsl/" + s.getId() + ")/CreateEnumerationMember");
        t.name = s.name;
        t.ordinal = s.value.intValue();
        s.eContainer.equivalent("CreateEnumerationType").members.add(t);
        log.debug("Created EnumerationMember: " + t.name);
    }

@greedy   
rule CreateBooleanType 
	transform s : JSL!DataTypeDeclaration
	to t : JUDOPSM!BooleanType {
        guard: s.`primitive` == "boolean" and not s.eContainer.name.equivalent("CreateModelPackages").elements.collect(e | e.name).contains(s.name)

        t.setId("(jsl/" + s.getId() + ")/CreateBooleanType");
        t.name = s.name;
        s.eContainer.getModelRoot().elements.add(t);
        log.debug("Created BooleanType: " + t.name);
}


@greedy
rule CreateStringType 
	transform s : JSL!DataTypeDeclaration
	to t : JUDOPSM!StringType {
        guard: s.`primitive` == "string" and not s.eContainer.name.equivalent("CreateModelPackages").elements.collect(e | e.name).contains(s.name)

        t.setId("(jsl/" + s.getId() + ")/CreateStringType");
        t.name = s.name;
        t.maxLength = s.maxSize.value.intValue();

        if (s.regex.isDefined() and s.regex.regex.value.isDefined()) {
            t.regExp = s.regex.regex.value;
        }

        s.eContainer.getModelRoot().elements.add(t);
        log.debug("Created StringType: " + t.name);
}


@greedy
rule CreateBinaryType
    transform s : JSL!DataTypeDeclaration
    to t : JUDOPSM!BinaryType {
        guard: s.`primitive` == "binary" and not s.eContainer.name.equivalent("CreateModelPackages").elements.collect(e | e.name).contains(s.name)

        t.setId("(jsl/" + s.getId() + ")/CreateBinaryType");
        t.name = s.name;


        if (s.mimeTypes.isDefined()) {
            for (mimeType in s.mimeTypes.values) {
                t.mimeTypes.add(mimeType.value.value);
            }
        }

        if (s.maxFileSize.isDefined()) {
            t.maxFileSize = s.maxFileSize.value().longValue();
        }

        s.eContainer.getModelRoot().elements.add(t);
        log.debug("Created BinaryType: " + t.name);
}

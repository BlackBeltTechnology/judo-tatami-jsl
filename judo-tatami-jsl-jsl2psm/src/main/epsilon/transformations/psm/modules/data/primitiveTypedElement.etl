import "../../../../operations/_importAll.eol";
import "../namespace/namespace.etl";


@greedy
rule CreateDefaultValueAnnotationForPrimitiveEntityMember
    transform s : JSL!DefaultModifier
    to t : JUDOPSM!Annotation {
        guard: s.eContainer.isKindOf(JSL!EntityFieldDeclaration) and s.eContainer.getReferenceType().isKindOf(JSL!PrimitiveDeclaration)

        t.setId("(jsl/" + s.eContainer.getId() + ")/CreateDefaultValueAnnotationForPrimitiveEntityMember");
        t.name = "DefaultValue";
        s.equivalent("CreateDefaultValueForPrimitiveEntityMember").annotations.add(t);
        log.debug("Create default value Annotation for default primitive entity member: " + t.name);
}

@abstract
rule CreatePrimitiveTypedElement
    transform s: JSL!EntityMemberDeclaration
    to t: JUDOPSM!PrimitiveTypedElement {
        t.required = s.isRequired();
        t.name = s.name;
    }

rule CreateAttributeFromField
    transform s: JSL!EntityFieldDeclaration
    to t: JUDOPSM!Attribute
    extends CreatePrimitiveTypedElement {
        guard: s.getReferenceType().isKindOf(JSL!PrimitiveDeclaration) and not s.isCalculated()
        t.setId("(jsl/" + s.getId() + ")/CreateAttributeFromField");
        t.dataType = s.getReferenceType().getPrimitiveDeclarationEquivalent();
        t.identifier = s.identifier;

        s.eContainer.getEntityDeclarationEquivalent().attributes.add(t);
        log.debug("Created Attribute (Field): " + t.name);
    }

//////////////////////////////////////////////////////////////////
// Primitive Field Default Expression
//////////////////////////////////////////////////////////////////
@greedy
rule CreateDefaultDataExpressionTypeForPrimitiveEntityMember
    transform s : JSL!DefaultModifier
    to t: JUDOPSM!DataExpressionType {
        guard: s.eContainer.isKindOf(JSL!EntityFieldDeclaration) and s.eContainer.getReferenceType().isKindOf(JSL!PrimitiveDeclaration)

        t.setId("(jsl/" + s.eContainer.getId() + ")/CreateDefaultDataExpressionTypeForPrimitiveEntityMember");
        t.expression = expressionUtils.getJqlForExpression(s.expression, entityNamePrefix, entityNamePostfix);
        s.equivalent("CreateDefaultValueForPrimitiveEntityMember").getterExpression = t;

        log.debug("Created DataExpressionType for Default Value: " + t.expression);
    }

@greedy
rule CreateDefaultValueForPrimitiveEntityMember
    transform s : JSL!DefaultModifier
    to t: JUDOPSM!DataProperty {
        guard: s.eContainer.isKindOf(JSL!EntityFieldDeclaration) and s.eContainer.getReferenceType().isKindOf(JSL!PrimitiveDeclaration)

        t.setId("(jsl/" + s.eContainer.getId() + ")/CreateDefaultValueForPrimitiveEntityMember");
        t.name = defaultDefaultNamePrefix + s.eContainer.name + defaultDefaultNameMidfix + s.eContainer.eContainer.name + defaultDefaultNamePostfix;
        t.dataType = s.eContainer.getReferenceType().getPrimitiveDeclarationEquivalent();
        t.required = false;

        s.eContainer.eContainer.getEntityDeclarationEquivalent().dataProperties.add(t);

        log.debug("Created DataProperty for Default Value: " + s);
    }

//////////////////////////////////////////////////////////////////
// Primitive TransferField Reads
//////////////////////////////////////////////////////////////////
@greedy
rule CreateReadsDataExpressionTypeForTransferFieldDeclaration
    transform s : JSL!Expression
    to t: JUDOPSM!DataExpressionType {
        guard: s.isExpressionForTransferFieldReads() and s.eContainer.getReferenceType().isKindOf(JSL!PrimitiveDeclaration)

        t.setId("(jsl/" + s.getId() + ")/CreateReadsDataExpressionTypeForTransferFieldDeclaration");
        t.expression = expressionUtils.getJqlForExpression(s, entityNamePrefix, entityNamePostfix);

        if (s.eContainer.eContainer.map.isDefined()) {
            s.equivalent("CreateReadsDataPropertyForMappedTransferObjectTransferFieldDeclaration").getterExpression = t;
        } else {
            s.equivalent("CreateReadsStaticDataForUnmappedTransferObjectTransferFieldDeclaration").getterExpression = t;
        }

        log.debug("Created DataExpressionType for TransferField Reads: " + t.expression);
    }

@greedy
rule CreateReadsStaticDataForUnmappedTransferObjectTransferFieldDeclaration
    transform s : JSL!Expression
    to t: JUDOPSM!StaticData {
        guard: s.isExpressionForTransferFieldReads() and s.eContainer.getReferenceType().isKindOf(JSL!PrimitiveDeclaration)
           and s.eContainer.eContainer.map.isUndefined()

        t.setId("(jsl/" + s.getId() + ")/CreateReadsStaticDataForUnmappedTransferObjectTransferFieldDeclaration");
        t.name = defaultReadsNamePrefix + s.eContainer.name + defaultReadsNameMidfix + s.eContainer.eContainer.name + defaultReadsNamePostfix;
        t.dataType = s.eContainer.getReferenceType().getPrimitiveDeclarationEquivalent();
        t.required = false;

        s.eContainer.eContainer.eContainer.getModelRoot().elements.add(t);

        log.debug("Created StaticData for TransferField Reads: " + s);
    }

@greedy
rule CreateReadsDataPropertyForMappedTransferObjectTransferFieldDeclaration
    transform s : JSL!Expression
    to t: JUDOPSM!DataProperty {
        guard: s.isExpressionForTransferFieldReads() and s.eContainer.getReferenceType().isKindOf(JSL!PrimitiveDeclaration)
           and s.eContainer.eContainer.map.isDefined()

        t.setId("(jsl/" + s.getId() + ")/CreateReadsDataPropertyForMappedTransferObjectTransferFieldDeclaration");
        t.name = defaultReadsNamePrefix + s.eContainer.name + defaultReadsNameMidfix + s.eContainer.eContainer.name + defaultReadsNamePostfix;
        t.dataType = s.eContainer.getReferenceType().getPrimitiveDeclarationEquivalent();
        t.required = false;

        s.eContainer.eContainer.map.entity.getEntityDeclarationEquivalent().dataProperties.add(t);

        log.debug("Created DataProperty for TransferField Reads: " + s);
    }

//////////////////////////////////////////////////////////////////
// Transfer Object Constructors Field Default Expression
//////////////////////////////////////////////////////////////////   

@greedy
rule CreateDefaultDataExpressionTypeForMappedTransferObjectConstructor
    transform s : JSL!DefaultModifier
    to t: JUDOPSM!DataExpressionType {
        guard: s.eContainer.isKindOf(JSL!TransferFieldDeclaration) and s.eContainer.eContainer.map.isDefined()

        t.setId("(jsl/" + s.eContainer.getId() + ")/CreateDefaultDataExpressionTypeForMappedTransferObjectConstructor");
        t.expression = expressionUtils.getJqlForExpression(s.expression, entityNamePrefix, entityNamePostfix);
        s.equivalent("CreateDefaultDataPropertyForMappedTransferObjectConstructor").getterExpression = t;

        log.debug("Created DataExpressionType for Transfer Object Default Value: " + t.expression);
    }

@greedy
rule CreateDefaultDataPropertyForMappedTransferObjectConstructor
    transform s : JSL!DefaultModifier
    to t: JUDOPSM!DataProperty {
        guard: s.eContainer.isKindOf(JSL!TransferFieldDeclaration) and s.eContainer.eContainer.map.isDefined()

        t.setId("(jsl/" + s.eContainer.getId() + ")/CreateDefaultDataPropertyForMappedTransferObjectConstructor");
        t.name = defaultDefaultNamePrefix + s.eContainer.name + defaultDefaultNameMidfix + s.eContainer.eContainer.name + defaultDefaultNamePostfix;
        t.dataType = s.eContainer.getReferenceType().getPrimitiveDeclarationEquivalent();
        t.required = false;


        s.eContainer.eContainer.map.entity.getEntityDeclarationEquivalent().dataProperties.add(t);

        log.debug("Created DataProperty for Transfer Object Default Value: " + s);
    }

@greedy
rule CreateDefaultDataExpressionTypeForUnmappedTransferObjectConstructor
    transform s : JSL!DefaultModifier
    to t: JUDOPSM!DataExpressionType {
        guard: s.eContainer.isKindOf(JSL!TransferFieldDeclaration) and s.eContainer.eContainer.map.isUndefined()

        t.setId("(jsl/" + s.eContainer.getId() + ")/CreateDefaultDataExpressionTypeForUnmappedTransferObjectConstructor");
        t.expression = expressionUtils.getJqlForExpression(s.expression, entityNamePrefix, entityNamePostfix);
        s.equivalent("CreateDefaultStaticDataForUnmappedTransferObjectConstructor").getterExpression = t;

        log.debug("Created DataExpressionType for Transfer Object Default Value: " + t.expression);
    }

@greedy
rule CreateDefaultStaticDataForUnmappedTransferObjectConstructor
    transform s : JSL!DefaultModifier
    to t: JUDOPSM!StaticData {
        guard: s.eContainer.isKindOf(JSL!TransferFieldDeclaration) and s.eContainer.eContainer.map.isUndefined()

        t.setId("(jsl/" + s.eContainer.getId() + ")/CreateDefaultStaticDataForUnmappedTransferObjectConstructor");
        t.name = defaultDefaultNamePrefix + s.eContainer.name + defaultDefaultNameMidfix + s.eContainer.eContainer.name + defaultDefaultNamePostfix;
        t.dataType = s.eContainer.getReferenceType().getPrimitiveDeclarationEquivalent();
        t.required = false;

        s.eContainer.eContainer.eContainer.getModelRoot().elements.add(t);
        log.debug("Created StaticData for Transfer Object Default Value: " + s);
    }

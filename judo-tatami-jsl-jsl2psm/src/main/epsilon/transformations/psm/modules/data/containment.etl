import "../../../../operations/_importAll.eol";

rule CreateContainmentFromField
    transform s: JSL!EntityFieldDeclaration
    to t: JUDOPSM!Containment
    {
        guard: s.referenceType.isKindOf(JSL!EntityDeclaration)

        t.setId("(jsl/" + s.getId() + ")/CreateContainmentFromField");
        t.name = s.name;
        t.target = s.referenceType.getPSMEquivalent();
        t.cardinality = s.equivalentWithPrefix("CreateCardinalityForFieldDeclaration", t.getId());

        s.eContainer.getPSMEquivalent().relations.add(t);
        log.debug("Created Containment: " + t.name);
    }

//////////////////////////////////////////////////////////////////
// Entity TransferField Reads
//////////////////////////////////////////////////////////////////   
@greedy
rule CreateReadsReferenceExpressionTypeForTransferRelationDeclaration
    transform s : JSL!Expression
    to t: JUDOPSM!ReferenceExpressionType {
        guard: s.isExpressionForTransferFieldReads() and s.eContainer.referenceType.isKindOf(JSL!TransferDeclaration)

        t.setId("(jsl/" + s.getId() + ")/CreateReadsReferenceExpressionTypeForTranferRelationDeclaration");
        t.expression = expressionUtils.getJqlForExpression(s, entityNamePrefix, entityNamePostfix);
        
        if (s.eContainer.eContainer.map.isDefined()) {    
	        s.equivalent("CreateReadsNavigationPropertyForMappedTransferObjectTransferRelationDeclaration").getterExpression = t;
        } else {
	        s.equivalent("CreateReadsStaticNavigationForUnmappedTransferObjectTransferRelationDeclaration").getterExpression = t;
        }

        log.debug("Created ReferenceExpressionType for TransferRelation Reads: " + t.expression);
    }

@greedy
rule CreateReadsStaticNavigationForUnmappedTransferObjectTransferRelationDeclaration
    transform s : JSL!Expression
    to t: JUDOPSM!StaticNavigation {
        guard: s.isExpressionForTransferFieldReads() and s.eContainer.referenceType.isKindOf(JSL!TransferDeclaration)
           and s.eContainer.eContainer.map.isUndefined()

        t.setId("(jsl/" + s.getId() + ")/CreateReadsReferenceExpressionForUnmappedTransferObjectTransferRelationDeclaration");
        t.name = defaultReadsNamePrefix + s.eContainer.name + defaultReadsNameMidfix + s.eContainer.eContainer.name + defaultReadsNamePostfix;
        t.target = s.eContainer.referenceType.getPSMEquivalent().entityType;
  	    t.cardinality = s.eContainer.equivalentWithPrefix("CreateCardinalityForTransferFieldDeclaration", t.getId());

        s.eContainer.eContainer.eContainer.getModelRoot().elements.add(t);

        log.debug("Created StaticNavigation for TransferRelation Reads: " + s);
    }

@greedy
rule CreateReadsNavigationPropertyForMappedTransferObjectTransferRelationDeclaration
    transform s : JSL!Expression
    to t: JUDOPSM!NavigationProperty {
        guard: s.isExpressionForTransferFieldReads() and s.eContainer.referenceType.isKindOf(JSL!TransferDeclaration)
           and s.eContainer.eContainer.map.isDefined()

        t.setId("(jsl/" + s.getId() + ")/CreateReadsNavigationPropertyForMappedTransferObjectTransferRelationDeclaration");
        t.name = defaultReadsNamePrefix + s.eContainer.name + defaultReadsNameMidfix + s.eContainer.eContainer.name + defaultReadsNamePostfix;
        t.target = s.eContainer.referenceType.getPSMEquivalent().entityType;
  	    t.cardinality = s.eContainer.equivalentWithPrefix("CreateCardinalityForTransferFieldDeclaration", t.getId());

		s.eContainer.eContainer.map.entity.getPSMEquivalent().navigationProperties.add(t);

        log.debug("Created NavigationProperty for TransferRelation Reads: " + s);
    }

    
//////////////////////////////////////////////////////////////////
// Transfer Object Constructors Field Default Expression
//////////////////////////////////////////////////////////////////   
@greedy
rule CreateDefaultReferenceExpressionTypeForMappedTransferObjectConstructor
    transform s : JSL!TransferDefault
    to t: JUDOPSM!ReferenceExpressionType {
        guard: s.field.reference.referenceType.isKindOf(JSL!TransferDeclaration) and s.field.reference.eContainer.map.isDefined()

        t.setId("(jsl/" + s.field.reference.getId() + ")/CreateDefaultReferenceExpressionTypeForMappedTransferObjectConstructor");
        t.expression = expressionUtils.getJqlForExpression(s.rightValue, entityNamePrefix, entityNamePostfix);
        s.equivalent("CreateDefaultNavigationPropertyForMappedTransferObjectConstructor").getterExpression = t;

        log.debug("Created ReferenceExpressionType for Transfer Object Default Value: " + t.expression);
    }

@greedy
rule CreateDefaultNavigationPropertyForMappedTransferObjectConstructor
    transform s : JSL!TransferDefault
    to t: JUDOPSM!NavigationProperty {
        guard: s.field.reference.referenceType.isKindOf(JSL!TransferDeclaration) and s.field.reference.eContainer.map.isDefined()

        t.setId("(jsl/" + s.field.reference.getId() + ")/CreateDefaultNavigationPropertyForMappedTransferObjectConstructor");
        t.name = defaultDefaultNamePrefix + s.field.reference.name + defaultDefaultNameMidfix + s.field.reference.eContainer.name + defaultDefaultNamePostfix;
        t.target = s.field.reference.referenceType.getPSMEquivalent().entityType;
  	    t.cardinality = s.field.reference.equivalentWithPrefix("CreateCardinalityForTransferFieldDeclaration", t.getId());
        s.field.reference.eContainer.map.entity.getPSMEquivalent().navigationProperties.add(t);

        log.debug("Created NavigationProperty for Transfer Object Default Value: " + s);
    }

@greedy
rule CreateDefaultReferenceExpressionTypeForUnmappedTransferObjectConstructor
    transform s : JSL!TransferDefault
    to t: JUDOPSM!ReferenceExpressionType {
        guard: s.field.reference.referenceType.isKindOf(JSL!TransferDeclaration) and s.field.reference.eContainer.map.isUndefined()
        
        t.setId("(jsl/" + s.field.reference.getId() + ")/CreateDefaultReferenceExpressionTypeForUnmappedTransferObjectConstructor");
        t.expression = expressionUtils.getJqlForExpression(s.rightValue, entityNamePrefix, entityNamePostfix);
        s.equivalent("CreateDefaultStaticNavigationForUnmappedTransferObjectConstructor").getterExpression = t;

        log.debug("Created ReferenceExpressionType for Transfer Object Default Value: " + t.expression);
    }

@greedy
rule CreateDefaultStaticNavigationForUnmappedTransferObjectConstructor
    transform s : JSL!TransferDefault
    to t: JUDOPSM!StaticNavigation {
        guard: s.field.reference.referenceType.isKindOf(JSL!TransferDeclaration) and s.field.reference.eContainer.map.isUndefined()

        t.setId("(jsl/" + s.field.reference.getId() + ")/CreateDefaultStaticNavigationForUnmappedTransferObjectConstructor");
        t.name = defaultDefaultNamePrefix + s.field.reference.name + defaultDefaultNameMidfix + s.field.reference.eContainer.name + defaultDefaultNamePostfix;
        t.target = s.field.reference.referenceType.getPSMEquivalent().entityType;
  	    t.cardinality = s.field.reference.equivalentWithPrefix("CreateCardinalityForTransferFieldDeclaration", t.getId());

        s.eContainer.eContainer.eContainer.getModelRoot().elements.add(t);
        
        log.debug("Created StaticNavigation for Transfer Object Default Value: " + s);
    }
    

@lazy
rule CreateCardinalityForRelationDeclaration
    transform s: JSL!EntityRelationDeclaration
    to t: JUDOPSM!Cardinality {
      guard: not s.isCalculated()
      
      t.setId("(jsl/" + s.getId() + ")/CreateCardinalityForRelationDeclaration");

      t.lower = s.isRequired and not s.isMany ? 1 : 0;
      t.upper = s.isMany ? -1 : 1;
}

@lazy
rule CreateCardinalityForFieldDeclaration
    transform s: JSL!EntityFieldDeclaration
    to t: JUDOPSM!Cardinality {
      guard: not s.isCalculated()
    
      t.setId("(jsl/" + s.getId() + ")/CreateCardinalityForFieldDeclaration");

      t.lower = s.isRequired and not s.isMany ? 1 : 0;
      t.upper = s.isMany ? -1 : 1;
}


@lazy
rule CreateCardinalityForOppositeAddedRelation
    transform s: JSL!EntityRelationOppositeInjected
    to t: JUDOPSM!Cardinality {
      t.setId("(jsl/" + s.getId() + ")/CreateCardinalityForOppositeAddedRelation");

      t.lower = 0;
      t.upper = s.isMany ? -1 : 1;
}

@lazy
rule CreateCardinalityForDerivedDeclaration
    transform s : JSL!EntityRelationDeclaration
    to t : JUDOPSM!Cardinality {
      guard: s.getReferenceType().isKindOf(JSL!EntityDeclaration) and s.isCalculated()

      t.setId("(jsl/" + s.getId() + ")/CreateCardinalityForDerivedDeclaration");

      t.lower = 0;
      t.upper = s.isMany ? -1 : 1;
}

@lazy
rule CreateCardinalityForStaticQueryDeclaration
    transform s : JSL!QueryDeclaration
    to t : JUDOPSM!Cardinality {
      guard: s.referenceType.isKindOf(JSL!EntityDeclaration)

      t.setId("(jsl/" + s.getId() + ")/CreateCardinalityForStaticQueryDeclaration");

      t.lower = 0;
      t.upper = s.isMany ? -1 : 1;
}


@lazy
rule CreateCardinalityForTransferRelationDeclaration
    transform s : JSL!TransferRelationDeclaration
    to t : JUDOPSM!Cardinality {
      t.setId("(jsl/" + s.getId() + ")/CreateCardinalityForTransferRelationDeclaration");

      t.lower = s.isRequired and not s.isMany ? 1 : 0;
      t.upper = s.isMany ? -1 : 1;
}


@lazy
@greedy
rule CreateCardinalityForTransferActionDeclarationInput
    transform s : JSL!TransferActionDeclaration
    to t : JUDOPSM!Cardinality {
      t.setId("(jsl/" + s.getId() + ")/CreateCardinalityForTransferActionDeclarationInput");

      t.lower = 1; //s.isRequired and not s.isMany ? 1 : 0;
      t.upper = 1;
}

@lazy
@greedy
rule CreateCardinalityForTransferActionDeclarationOutput
    transform s : JSL!TransferActionDeclaration
    to t : JUDOPSM!Cardinality {
      t.setId("(jsl/" + s.getId() + ")/CreateCardinalityForTransferActionDeclarationOutput");

      t.lower = 1; // s.isRequired and not s.isMany ? 1 : 0;
      t.upper = 1;
}

@lazy
@greedy
rule CreateCardinalityForTransferActionDeclarationEntityInput
    transform s : JSL!TransferActionDeclaration
    to t : JUDOPSM!Cardinality {
      t.setId("(jsl/" + s.getId() + ")/CreateCardinalityForTransferActionDeclarationEntityInput");

      t.lower = 1; //s.isRequired and not s.isMany ? 1 : 0;
      t.upper = 1;
}

@lazy
@greedy
rule CreateCardinalityForTransferActionDeclarationEntityOutput
    transform s : JSL!TransferActionDeclaration
    to t : JUDOPSM!Cardinality {
      t.setId("(jsl/" + s.getId() + ")/CreateCardinalityForTransferActionDeclarationEntityOutput");

      t.lower = 1; // s.isRequired and not s.isMany ? 1 : 0;
      t.upper = 1;
}

@lazy
@greedy
rule CreateCardinalityForFaultParameter
    transform s : JSL!ErrorDeclaration
    to t : JUDOPSM!Cardinality {
      t.setId("(jsl/" + s.getId() + ")/CreateCardinalityForFaultParameter");

      t.lower = 1;
      t.upper = 1;
}


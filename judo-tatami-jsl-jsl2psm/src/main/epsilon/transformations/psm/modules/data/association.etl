rule CreateNamedOppositeAssociationEnd
    transform s: JSL!EntityRelationOppositeInjected
    to t: JUDOPSM!AssociationEnd
    {
        var relationAddedFrom = s.eContainer;
        var entityToAdd = relationAddedFrom.getReferenceType();

        t.setId("(jsl/" + s.getId() + ")/CreateNamedOppositeAssociationEnd");
        t.name = s.name;
        t.target = relationAddedFrom.eContainer.getEntityDeclarationEquivalent();
        t.cardinality = s.equivalentDiscriminated("CreateCardinalityForOppositeAddedRelation", t.getId());

        // Reverse cascade delete not supported yet
        t.reverseCascadeDelete = false;

        t.partner = relationAddedFrom.equivalent("CreateDeclaredAssociationEnd");

        entityToAdd.getEntityDeclarationEquivalent().relations.add(t);
        log.debug("Created Association End (named opposite): " + t.name);
    }

rule CreateDeclaredAssociationEnd
    transform s: JSL!EntityRelationDeclaration
    to t: JUDOPSM!AssociationEnd
    {
        guard: s.getReferenceType().isKindOf(JSL!EntityDeclaration) and not s.isCalculated()

        t.setId("(jsl/" + s.getId() + ")/CreateDeclaredAssociationEnd");
        t.name = s.name;
        t.target = s.getReferenceType().getEntityDeclarationEquivalent();
        t.cardinality = s.equivalentDiscriminated("CreateCardinalityForRelationDeclaration", t.getId());

        // Reverse cascade delete not supported yet
        t.reverseCascadeDelete = false;

        var opposite = s.getOpposite();
        
        if (opposite.isDefined()) {
	        if (opposite.oppositeType.isDefined()) {
	            t.partner = opposite.oppositeType.equivalent("CreateDeclaredAssociationEnd");
	        }
	        if (opposite.name.isDefined()) {
	            t.partner = opposite.equivalent("CreateNamedOppositeAssociationEnd");
	        }
	    }

        s.eContainer.getEntityDeclarationEquivalent().relations.add(t);
        log.debug("Created Association End: (declared)" + t.name);
    }

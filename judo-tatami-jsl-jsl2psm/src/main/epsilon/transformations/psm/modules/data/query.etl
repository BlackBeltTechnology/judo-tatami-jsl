@abstract
rule AbstractCreateEntityQueryTransferAttributeForStaticQuery
    transform s : JSL!QueryDeclaration
    to t : JUDOPSM!TransferAttribute {
        guard: generateDefaultTransferObject and s.getReferenceType().isKindOf(JSL!PrimitiveDeclaration) and s.entity != null

        t.name = s.name;
        t.binding = s.equivalent("CreateDataPropertyForStaticQuery");
        t.dataType = s.getReferenceType().getPrimitiveDeclarationEquivalent();
}

rule CreateEntityQueryTransferAttributeForStaticQuery
    transform s : JSL!QueryDeclaration
    to t : JUDOPSM!TransferAttribute
    extends AbstractCreateEntityQueryTransferAttributeForStaticQuery {
        guard: generateDefaultTransferObject and s.getReferenceType().isKindOf(JSL!PrimitiveDeclaration) and s.entity != null

        t.setId("(jsl/" + s.getId() + ")/CreateEntityQueryTransferAttributeForStaticQuery");

        s.entity.equivalent("CreateEntityDefaultTransferObjectType").attributes.add(t);
        log.debug("Created TransferAttribute (Entity Query) for DefaultTransferObjectType: [" + t.name + "] into [" + t.eContainer.name + "]");
}

@lazy
rule CloneEntityQueryTransferAttributeForStaticQuery
    transform s : JSL!QueryDeclaration
    to t : JUDOPSM!TransferAttribute
    extends AbstractCreateEntityQueryTransferAttributeForStaticQuery {
        guard: generateDefaultTransferObject and s.getReferenceType().isKindOf(JSL!PrimitiveDeclaration) and s.entity != null

        t.setId("(jsl/" + s.getId() + ")/CloneEntityQueryTransferAttributeForStaticQuery");
        log.debug("Clone TransferAttribute (Entity Query) for DefaultTransferObjectType: [" + t.name + "]");
}

@abstract
rule AbstractCreateTransferObjectEntityQueryRelationForStaticQuery
    transform s : JSL!QueryDeclaration
    to t : JUDOPSM!TransferObjectRelation
    {
      guard: generateDefaultTransferObject and s.getReferenceType().isKindOf(JSL!EntityDeclaration) and s.entity != null

      t.name = s.name;
      t.target = s.getReferenceType().equivalent("CreateEntityDefaultTransferObjectType");

      t.embeddedCreate = false;
      t.embeddedUpdate = false;
      t.embeddedDelete = false;

      t.binding = s.equivalent("CreateNavigationPropertyForStaticQuery");
      t.embedded = false;

}

rule CreateTransferObjectEntityQueryRelationForStaticQuery
    transform s: JSL!QueryDeclaration
    to t: JUDOPSM!TransferObjectRelation
    extends AbstractCreateTransferObjectEntityQueryRelationForStaticQuery {
        guard: generateDefaultTransferObject and s.getReferenceType().isKindOf(JSL!EntityDeclaration) and s.entity != null

        t.setId("(jsl/" + s.getId() + ")/CreateTransferObjectEntityQueryRelationForStaticQuery");
        t.cardinality = s.equivalentDiscriminated("CreateCardinalityForStaticQueryDeclaration", t.getId());

        s.entity.equivalent("CreateEntityDefaultTransferObjectType").relations.add(t);

        log.debug("Created TransferObjectRelation for DefaultTransferObjectType: [" + t.name + "] into [" + t.eContainer.name + "]");

}

@lazy
rule CloneTransferObjectQueryRelationForStaticQuery
    transform s: JSL!QueryDeclaration
    to t: JUDOPSM!TransferObjectRelation
    extends AbstractCreateTransferObjectEntityQueryRelationForStaticQuery {
		guard: s.getReferenceType().isKindOf(JSL!EntityDeclaration) and s.entity != null

        t.setId("(jsl/" + s.getId() + ")/CloneTransferObjectQueryRelationForStaticQuery");
        t.cardinality = s.equivalentDiscriminated("CreateCardinalityForStaticQueryDeclaration", t.getId());


        log.debug("Clone TransferObjectRelation for DefaultTransferObjectType: [" + t.name + "]");
}

rule CreateUnmappedTransferObjectForStaticQuery
    transform s : JSL!QueryDeclaration
    to t : JUDOPSM!UnmappedTransferObjectType {
        guard: s.parameters.size() > 0

        t.setId("(jsl/" + s.getId() + ")/CreateUnmappedTransferObjectForStaticQuery");

		if (s.entity == null) {
			t.name = defaultParameterNamePrefix + s.eContainer.name + defaultParameterNameMidfix + s.name + defaultParameterNamePostfix;
        	s.eContainer.getModelRoot().elements.add(t);
        } else {
        	t.name = defaultParameterNamePrefix + s.entity.name + defaultParameterNameMidfix + s.name + defaultParameterNamePostfix;
        	s.entity.eContainer.getModelRoot().elements.add(t);
        }

        log.debug("Created UnmappedTransferObjectType: " + t.name);
}

rule CreateOriginalNameAnnotationForStaticQuery
    transform s : JSL!QueryDeclaration
    to t : JUDOPSM!Annotation {
        guard: s.parameters.size() > 0

        t.setId("(jsl/" + s.getId() + ")/CreateOriginalNameAnnotationForStaticQuery");
        t.name = "OriginalSource";
        s.equivalent("CreateUnmappedTransferObjectForStaticQuery").annotations.add(t);
        log.debug("Create OriginalName Annotation for static query: " + t.name);
}

rule CreateParameterObjectAnnotationForStaticQuery
    transform s : JSL!QueryDeclaration
    to t : JUDOPSM!Annotation {
        guard: s.parameters.size() > 0

        t.setId("(jsl/" + s.getId() + ")/CreateParameterObjectAnnotationForStaticQuery");
        t.name = "ParameterObject";
        s.equivalent("CreateUnmappedTransferObjectForStaticQuery").annotations.add(t);
        log.debug("Create ParameterObject Annotation for static query: " + t.name);
}


rule CreateOriginalNameAnnotationDetailForStaticQuery
    transform s : JSL!QueryDeclaration
    to t : JUDOPSM!AnnotationDetail {
        guard: s.parameters.size() > 0

        t.setId("(jsl/" + s.getId() + ")/CreateOriginalNameAnnotationDetailForStaticQuery");
        t.name = "Name";
        
        if (s.entity == null) {
        	t.`value` = s.name;
        } else {
        	t.`value` = s.entity.name + "::" + s.name;
        }
        s.equivalent("CreateOriginalNameAnnotationForStaticQuery").details.add(t);
        log.debug("Create OriginalName Annotation for static query: " + t.name);
}

rule CreateTransferObjectForStaticQueryParameterDeclaration
    transform s : JSL!QueryParameterDeclaration
    to t: JUDOPSM!TransferAttribute {
        guard: s.eContainer.isKindOf(JSL!QueryDeclaration)

        t.setId("(jsl/" + s.getId() + ")/CreateTransferObjectForStaticQueryParameterDeclaration");

        t.name = s.name;
        if (s.referenceType.isKindOf(JSL!PrimitiveDeclaration)) {
	        t.dataType = s.referenceType.getPrimitiveDeclarationEquivalent();
        } else {
	        t.dataType = s.referenceType.getEntityDeclarationEquivalent();
        }

        s.eContainer.equivalent("CreateUnmappedTransferObjectForStaticQuery").attributes.add(t);
        log.debug("Created Transfer Attribute for Query Declaration: " + s.name);
}

rule CreateStaticDataForStaticQuery
    transform s : JSL!QueryDeclaration
    to t : JUDOPSM!StaticData
    {
      guard: s.referenceType.isKindOf(JSL!PrimitiveDeclaration) and s.entity == null
      t.name = s.name;
      t.setId("(jsl/" + s.getId() + ")/CreateStaticDataForStaticQuery");
      t.getterExpression = s.equivalent("CreateGetterExpressionForStaticQueryParametrizedDataType");
      t.dataType = s.referenceType.getPrimitiveDeclarationEquivalent();

      s.eContainer.getModelRoot().elements.add(t);
      log.debug("Created Query Static Data: " + t.name);
}

@greedy
rule CreateDataPropertyForStaticQuery
    transform s : JSL!QueryDeclaration
    to t : JUDOPSM!DataProperty {
      guard: s.referenceType.isKindOf(JSL!PrimitiveDeclaration) and s.entity != null
      t.name = s.name;
      t.setId("(jsl/" + s.getId() + ")/CreateDataPropertyForStaticQuery");
      t.getterExpression = s.equivalent("CreateGetterExpressionForStaticQueryParametrizedDataType");
      t.dataType = s.getReferenceType().getPrimitiveDeclarationEquivalent();

      s.entity.getEntityDeclarationEquivalent().dataProperties.add(t);
      log.debug("Created Query Data Property: " + t.name);
}

rule CreateStaticNavigationForStaticQuery
    transform s : JSL!QueryDeclaration
    to t : JUDOPSM!StaticNavigation
    {
      guard: s.referenceType.isKindOf(JSL!EntityDeclaration) and s.entity == null
      t.name = s.name;
      t.setId("(jsl/" + s.getId() + ")/CreateStaticNavigationForStaticQuery");
      t.getterExpression = s.equivalent("CreateGetterExpressionForStaticQueryParametrizedReferenceType");
      t.cardinality = s.equivalentDiscriminated("CreateCardinalityForStaticQueryDeclaration", t.getId());
      t.target = s.referenceType.getEntityDeclarationEquivalent();

      s.eContainer.getModelRoot().elements.add(t);
      log.debug("Created Query Static Navigation: " + t.name);
}

@greedy
rule CreateNavigationPropertyForStaticQuery
    transform s : JSL!QueryDeclaration
    to t : JUDOPSM!NavigationProperty
    {
      guard: s.getReferenceType().isKindOf(JSL!EntityDeclaration) and s.entity != null
      t.name = s.name;
      t.setId("(jsl/" + s.getId() + ")/CreateNavigationPropertyForStaticQuery");
      t.getterExpression = s.equivalent("CreateGetterExpressionForStaticQueryParametrizedReferenceType");
      t.cardinality = s.equivalentDiscriminated("CreateCardinalityForStaticQueryDeclaration", t.getId());
      t.target = s.getReferenceType().getEntityDeclarationEquivalent();

      s.entity.getEntityDeclarationEquivalent().navigationProperties.add(t);
      log.debug("Created Query Navigation Property: " + t.name);
}

@lazy
rule CreateGetterExpressionForStaticQueryParametrizedDataType
    transform s : JSL!QueryDeclaration
    to t: JUDOPSM!DataExpressionType {
        t.setId("(jsl/" + s.getId() + ")/CreateGetterExpressionForStaticQueryParametrizedDataType");
        t.expression = expressionUtils.getJqlForStaticQuery(s, entityNamePrefix, entityNamePostfix);

        if (s.parameters.size() > 0) {
            t.parameterType = s.equivalent("CreateUnmappedTransferObjectForStaticQuery");
        }

        log.debug("Created Data Expression Type for Parametrized Data Property: " + s.name);
}

@lazy
rule CreateGetterExpressionForStaticQueryParametrizedReferenceType
    transform s : JSL!QueryDeclaration
    to t: JUDOPSM!ReferenceExpressionType {
        t.setId("(jsl/" + s.getId() + ")/CreateGetterExpressionForStaticQueryParametrizedReferenceType");
        t.expression = expressionUtils.getJqlForStaticQuery(s, entityNamePrefix, entityNamePostfix);

        if (s.parameters.size() > 0) {
            t.parameterType = s.equivalent("CreateUnmappedTransferObjectForStaticQuery");
        }

        log.debug("Created Reference Expression Type for Parametrized Reference Type: " + s.name);
}
import "modules/namespace/namespace.etl";

import "modules/structure/entityDeclarationDefaultTransferObjectType.etl";
import "modules/structure/entityDeclarationDefaultTransferAttribute.etl";
import "modules/structure/entityDeclarationDefaultTransferRelation.etl";

import "modules/structure/transferDeclarationTransferAttribute.etl";
import "modules/structure/transferDeclarationTransferObjectType.etl";
import "modules/structure/transferDeclarationTransferRelation.etl";


import "modules/data/cardinality.etl";
import "modules/data/containment.etl";
import "modules/data/association.etl";
import "modules/data/entityType.etl";
import "modules/data/query.etl";
import "modules/data/primitiveTypedElement.etl";

import "modules/derived/expressionType.etl";
import "modules/derived/dataProperty.etl";
import "modules/derived/navigationProperty.etl";
import "modules/derived/entityQuery.etl";
import "modules/action/action.etl";

import "modules/type/type.etl";

import "modules/action/actorBehaviour.etl";
import "modules/action/deleteBehaviour.etl";
import "modules/action/getActionInputRangeBehaviour.etl";
import "modules/action/getTemplateBehaviour.etl";
import "modules/action/getUploadTokenBehaviour.etl";
import "modules/action/relationAddReferenceBehaviour.etl";
import "modules/action/relationCreateBehaviour.etl";
import "modules/action/relationGetRangeReferenceBehaviour.etl";
import "modules/action/relationListBehaviour.etl";
import "modules/action/refreshBehaviour.etl";
import "modules/action/relationRemoveReferenceBehaviour.etl";
import "modules/action/relationSetReferenceBehaviour.etl";
import "modules/action/relationUnsetReferenceBehaviour.etl";
import "modules/action/relationValidateCreateBehaviour.etl";
import "modules/action/updateBehaviour.etl";
import "modules/action/validateUpdateBehaviour.etl";

import "modules/structure/transferDeclarationQueryCustomizer.etl";
import "modules/actor/actorType.etl";

pre {
	//var ecoreUtil = new Native("org.eclipse.emf.ecore.util.EcoreUtil");	
	var __cacheMap = new ConcurrentMap();
	var __originalMap = new ConcurrentMap();

    JUDOPSM.target.resource.contents.add(defaultModelName.equivalent("CreateRootModel"));
}

post {
    for (c in JUDOPSM!Cardinality.all()) {
        c.setId(c.eContainer.getId()+"/cardinality");
    }

    // Collect primitive types which are not directly referenced as field types
    for (c in JSL!NavigationBaseDeclarationReference.all().select(n | n.reference.isKindOf(JSL!PrimitiveDeclaration))) {
         var dummy = c.reference.getPrimitiveDeclarationEquivalent();
    }
    for (c in JSL!QueryParameterDeclaration.all()) {
         var dummy = c.referenceType.getPrimitiveDeclarationEquivalent();
    }

    var enumsWithoutOrdinal = JUDOPSM!EnumerationMember.all.select(m | m.ordinal == -1).collect(m | m.eContainer).flatten().asSet();
    for (e in enumsWithoutOrdinal) {
        log.debug("Set/overwrite ordinals of enumeration: " + e.name);
        var index = 0;
        for (m in e.members) {
            m.ordinal = index;
            index = index + 1;
        }
    }

}

@cached
operation JSL!ActorAccessDeclaration getId(): String {
    return (self.eContainer.getId() + "/" + self.name);
}

@cached
operation JSL!ActorAccessDeclaration getActorDeclaration(): JSL!ActorDeclaration {
    if (self.eContainer.isTypeOf(JSL!ActorGroupDeclaration)) {
        return self.eContainer.getActorDeclaration();
    } else if (self.eContainer.isTypeOf(JSL!ActorDeclaration)) {
        return self.eContainer;
    }
    return null;
}

@cached
operation JSL!ActorAccessDeclaration getTransferContainer(): JSL!TransferDeclaration {
	return self.eContainer;
}

/*

@cached
operation JSL!ActorAccessDeclaration isAggregation() : Boolean {
    return jslUtils.isAggregation(self);
}

@cached
operation JSL!ActorAccessDeclaration maps(): Boolean {
    return jslUtils.isMaps(self);
}

@cached
operation JSL!ActorAccessDeclaration reads(): Boolean {
    return jslUtils.isReads(self);
}


@cached
operation JSL!ActorAccessDeclaration getFqName(): String {
    return self.eContainer.getFqName() + "#" + self.name;
}



@cached
operation JSL!ActorAccessDeclaration isCreateAllowed() : Boolean {
	return self.modifiers.exists(m | m.isTypeOf(JSL!CreateModifier) and m.`true`);
}

@cached
operation JSL!ActorAccessDeclaration isUpdateAllowed() : Boolean {
	return self.modifiers.exists(m | m.isTypeOf(JSL!UpdateModifier) and m.`true`);
}

@cached
operation JSL!ActorAccessDeclaration isDeleteAllowed() : Boolean {
	return self.modifiers.exists(m | m.isTypeOf(JSL!DeleteModifier) and m.`true`);
}

@cached
operation JSL!ActorAccessDeclaration isChoiceDefined() : Boolean {
	return self.modifiers.exists(m | m.isTypeOf(JSL!ChoiceModifier));
}

@cached
operation JSL!ActorAccessDeclaration isAddReferenceAllowed() : Boolean {
    var lower = self.isRequired() and not self.isMany ? 1 : 0;
    var upper = self.isMany ? -1 : 1;
	return self.maps() and self.eContainer.isUpdateSupported() 
		and upper != 1 and (lower < upper or upper == -1); 
}

@cached
operation JSL!ActorAccessDeclaration isRemoveReferenceAllowed() : Boolean {
    var lower = self.isRequired() and not self.isMany ? 1 : 0;
    var upper = self.isMany ? -1 : 1;
	return self.maps() and self.eContainer.isUpdateSupported() 
		and upper != 1 and (lower < upper or upper == -1); 
}

@cached
operation JSL!ActorAccessDeclaration isSetReferenceAllowed() : Boolean {
	return self.maps() and self.eContainer.isUpdateSupported() and not self.isRequired();
}

@cached
operation JSL!ActorAccessDeclaration isUnsetReferenceAllowed() : Boolean {
	return self.maps() and self.eContainer.isUpdateSupported() and not self.isRequired();
}

@cached
operation JSL!ActorAccessDeclaration isGetRangeSupported() : Boolean {
	return self.modifiers.exists(m | m.isTypeOf(JSL!ChoiceModifier));	
}

@cached
operation JSL!ActorAccessDeclaration getTransferActionRangeEquivalent(): JUDOPSM!ReferenceAccessor {
	  var choice = self.modifiers.selectOne(m | m.isTypeOf(JSL!ChoiceModifier));

      if (choice.isDefined() and self.eContainer.map.isDefined()) {
          return choice.equivalent("CreateRelationRangeNavigationPropertyForMappedTransferObjectRelation");
      } else if (choice.isDefined()) {
          return choice.equivalent("CreateRelationRangStaticNavigationForUnmappedTransferObjectRelation");
      } else {
      	throw "No choice defined";
      }
}
*/

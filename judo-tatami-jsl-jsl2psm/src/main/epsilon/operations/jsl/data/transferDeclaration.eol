@cached
operation JSL!TransferDeclaration getTransferDeclarationEquivalent(): JUDOPSM!TransferObjectType {
    if (self.map.isUndefined()) {
        return self.equivalent("CreateUnmappedTransferObjectType");
    } else {
        return self.equivalent("CreateMappedTransferObjectType");
    }
}

@cached
operation JSL!TransferDeclaration getId(): String {
    return (self.eContainer.getId() + "/" + self.name);
}

@cached
operation JSL!TransferDeclaration getModelRoot(): JUDOPSM!Package {
    return self.eContainer().getModelRoot();
}



@cached
operation JSL!TransferDeclaration isDeleteSupported(): Boolean {
	if (self.map.isDefined()) {
		return self.members.exists(m | m.isKindOf(JSL!TransferDeleteDeclaration));
	}
	return false;
}

@cached
operation JSL!TransferDeclaration isCreateSupported(): Boolean {
	if (self.map.isDefined()) {
		return self.members.exists(m | m.isKindOf(JSL!TransferCreateDeclaration));
	}
	return false;
}

@cached
operation JSL!TransferDeclaration isUpdateSupported(): Boolean {
	if (self.map.isDefined()) {
		return self.members.exists(m | m.isKindOf(JSL!TransferUpdateDeclaration));
	}
	return false;
}

@cached
operation JSL!TransferDeclaration isDefinedAsInputParameter(): Boolean {
	return JSL!TransferActionDeclaration.all().collect(a | a.getParameterType()).contains(self);
}

@cached
operation JSL!TransferDeclaration isGetTemplateSupported(): Boolean {
	if (self.isCreateSupported()) {
		return true;
	}
	if (self.map.isUndefined()) {
		return self.isDefinedAsInputParameter();	
	}
	return false;
}

@cached
operation JSL!TransferDeclaration isRefreshSupported(): Boolean {
    return self.map.isDefined();    
}

@cached
operation JSL!TransferDeclaration getDeleteEvent(): JSL!TransferDeleteDeclaration {
	return self.members.selectOne(m | m.isKindOf(JSL!TransferDeleteDeclaration));
}

//@cached
//operation JSL!TransferDeclaration getDeleteEventBefore(): JSL!TransferDeleteDeclaration {
//	return self.members.selectOne(m | m.isKindOf(JSL!TransferDeleteDeclaration));
//}
//
//@cached
//operation JSL!TransferDeclaration getDeleteEventAfter(): JSL!TransferDeleteDeclaration {
//	return self.members.selectOne(m | m.isKindOf(JSL!TransferDeleteDeclaration));
//}
//

@cached
operation JSL!TransferDeclaration getUpdateEvent(): JSL!TransferUpdateDeclaration {
	return self.members.selectOne(m | m.isKindOf(JSL!TransferUpdateDeclaration));
}

//@cached
//operation JSL!TransferDeclaration getUpdateEventBefore(): JSL!TransferUpdateDeclaration {
//	return self.members.selectOne(m | m.isKindOf(JSL!TransferUpdateDeclaration));
//}
//
//@cached
//operation JSL!TransferDeclaration getUpdateEventAfter(): JSL!TransferUpdateDeclaration {
//	return self.members.selectOne(m | m.isKindOf(JSL!TransferUpdateDeclaration));
//}

@cached
operation JSL!TransferDeclaration getCreateEvent(): JSL!TransferCreateDeclaration {
	return self.members.selectOne(m | m.isKindOf(JSL!TransferCreateDeclaration));
}

//@cached
//operation JSL!TransferDeclaration getCreateEventBefore(): JSL!TransferCreateDeclaration {
//	return self.members.selectOne(m | m.isKindOf(JSL!TransferCreateDeclaration));
//}
//
//@cached
//operation JSL!TransferDeclaration getCreateEventAfter(): JSL!TransferCreateDeclaration {
//	return self.members.selectOne(m | m.isKindOf(JSL!TransferCreateDeclaration));
//}

@cached
operation JSL!TransferDeclaration hasSortableField(): Boolean {
    return self.members.exists(m | m.isKindOf(JSL!TransferFieldDeclaration));
}

@cached
operation JSL!TransferDeclaration isActorRelated(): Boolean {
    return self.isKindOf(JSL!ActorDeclaration);
}

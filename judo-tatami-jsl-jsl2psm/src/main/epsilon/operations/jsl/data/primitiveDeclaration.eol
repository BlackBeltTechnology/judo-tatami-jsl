@cached
operation JSL!PrimitiveDeclaration getPSMEquivalent(): JUDOPSM!Primitive {
    if (self.primitive.isDefined()) {
        switch (self.primitive) {
            case "numeric":
                return self.equivalent("CreateNumericType");
            case "date":
                return self.equivalent("CreateDateType");
            case "time":
                return self.equivalent("CreateTimeType");
            case "timestamp":
                return self.equivalent("CreateTimestampType");
			case "boolean":
				return self.equivalent("CreateBooleanType");
			case "string":
				return self.equivalent("CreateStringType");
			case "binary":
				return self.equivalent("CreateBinaryType");
            default:
                throw "Unsupported primitive type: " + self.primitive;
        }
    }
    if (self.instanceOf(JSL!EnumDeclaration)) {
        return self.equivalent("CreateEnumerationType");
    }
}

operation JSL!PrimitiveDeclaration isNumeric() : Boolean {
    return self.primitive == "numeric";
}

operation JSL!PrimitiveDeclaration isDate() : Boolean {
    return self.primitive == "date";
}

operation JSL!PrimitiveDeclaration isTimestamp() : Boolean {
    return self.primitive == "timestamp";
}

operation JSL!PrimitiveDeclaration isBoolean() : Boolean {
    return self.primitive == "boolean";
}

operation JSL!PrimitiveDeclaration isTime() : Boolean {
    return self.primitive == "time";
}

operation JSL!PrimitiveDeclaration isString() : Boolean {
    return self.primitive == "string";
}

operation JSL!PrimitiveDeclaration isBinary() : Boolean {
    return self.primitive == "binary";
}

operation JSL!PrimitiveDeclaration isEnumeration() : Boolean {
    return self.instanceOf(JSL!EnumDeclaration);
}

operation JSL!PrimitiveDeclaration isSortable() : Boolean {
    return not self.isEnumeration() and not self.isBinary();
}

model ActorTestModel;

type binary Binary max-file-size: 1MB  mime-type: ["image/*"];
type boolean Boolean;
type date Date;
type numeric Numeric scale: 0 precision: 9;
type string String min-size: 0 max-size: 255;
type time Time;
type timestamp Timestamp;


entity User {
    identifier String email;
    field Boolean isActive;
}

transfer UserTransfer maps User as u {
    field String email <= u.email set: true;
    event delete deleteInstance;
	event update updateInstance;
	event create createInstance;
}

actor Actor
    realm: "COMPANY"
    claim: "email"
    identity: UserTransfer::email
    guard: User.all().filter(u | u.email == String.getVariable(category = "PRINCIPAL", key = "preferred_username")).any().isActive
{	
    access UserTransfer[] manager <= User.all() create: true update: true delete: true;
};

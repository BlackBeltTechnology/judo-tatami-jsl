model MappedTransferObjectTypeModel;

type string String(min-size = 0, max-size = 250);
type numeric Integer(precision = 3, scale = 0);


entity Entity {
	field Integer attribute;
	field EntityRelated containment;
	field EntityRelated[] containmentCollection;
	relation EntityRelated association;
}

entity EntityRelated {
	field Integer attribute;
	relation Entity entity opposite-add entityRelatedOpposite;

}

transfer UnmappedRelated {
	field String transient;
}

transfer Mapped maps Entity as e {
    field Integer unmappedAttribute;
    
    // It have to be invalid - but it's not'
	// field UnmappedRelated unmappedContainment maps e.containment;
	// field UnmappedRelated[] unmappedContainmentCollection maps e.containmentCollection;
	// field UnmappedRelated unmappedContainment reads e.containment;
	// field UnmappedRelated[] unmappedContainmentCollection reads e.containmentCollection;

	field UnmappedRelated unmappedContainment;
	field UnmappedRelated[] unmappedContainmentCollection;

	field Integer mappedAttribute maps e.attribute;
	field MappedRelated mappedContainment maps e.containment;
	field MappedRelated[] mappedContainmentCollection maps e.containmentCollection;
    // field MappedRelated mappedAssociation maps e.association;
    // field MappedRelated mappedAssociation maps e.entityRelatedOpposite;

	field Integer derivedAttribute reads e.attribute;
	field MappedRelated derivedContainment reads e.containment;
	field MappedRelated[] derivedContainmentCollection reads e.containmentCollection;    
    field MappedRelated derivedAssociation reads e.association;
    // field MappedRelated derivedAssociationOpposite maps e.entityRelatedOpposite;
    
}

transfer MappedRelated maps EntityRelated as e {
	field Integer mappedAttribute maps e.attribute;
}
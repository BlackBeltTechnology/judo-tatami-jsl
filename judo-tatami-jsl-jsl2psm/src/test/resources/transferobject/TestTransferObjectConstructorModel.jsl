model TransferObjectConstructorModel;

type string String(min-size = 0, max-size = 250);
type numeric Integer(precision = 3, scale = 0);


entity Entity {
	field Integer attribute = 1;
	field EntityRelated containment;
	field EntityRelated[] containmentCollection;
	relation EntityRelated association;

	identifier Integer identifier;	
}

entity EntityRelated {
	field Integer attribute;
	relation Entity entity opposite-add entityRelatedOpposite;

}

transfer Unmapped {
	field String transient;
	constructor {
		self.transient = "Test";
	}
}

transfer Mapped maps Entity as e {
    field Integer unmappedAttribute;
    
	field Integer mappedAttribute maps e.attribute;
	field MappedRelated mappedAssociation maps e.association;
    field MappedRelated mappedAssociationOpposite maps e.entityRelatedOpposite;
	
	field Integer mappedIdentifier maps e.identifier;

	
	constructor {
		self.unmappedAttribute = 1;
		self.mappedAttribute = 2;
		self.mappedIdentifier = 3;
		self.mappedAssociation = EntityRelated!any();
		self.mappedAssociationOpposite = EntityRelated!any();
	}
}

transfer MappedRelated maps EntityRelated as e {
	field Integer mappedAttribute maps e.attribute;
}
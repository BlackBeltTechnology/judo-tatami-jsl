model TestDerivedExpressionModel

import TestDerivedExpressionModelImport as inherited

type numeric Integer(precision = 9, scale = 0)
type date Date
type timestamp Timestamp
type time Time
type string String(max-length = 32)
type numeric Decimal(precision = 9, scale = 2)
type boolean Boolean


query Lead[] staticLeadsBetween(Integer minLeadsBetween = 1, Integer maxLeadsBetween = 50) => Lead!filter(lead | lead.value > minLeadsBetween and lead.value < maxLeadsBetween)
// Lead!filter(lead | lead.value > input.minLeadsBetween!isDefined() ? input.minLeadsBetween : 1 and lead.value < input.maxLeadsBetween!isDefined() ? input.maxLeadsBetween : 50)

query Lead[] staticLeadsOverWithMin(Integer minLeadsOverMin = 5) => staticLeadsBetween(minLeadsBetween = minLeadsOverMin , maxLeadsBetween = 100)
// Lead!filter(lead | lead.value > input.minLeadsOverMin!isDefined() ? input.minLeadsOverMin : 5 and lead.value < 100)

query Lead[] staticLeadsBetweenAndSalesPersonLeads(Integer minLeadsBetween = 1, Integer maxLeadsBetween = 50) => (
	Lead!filter(lead | lead.value > minLeadsBetween and lead.value < maxLeadsBetween)
		.salesPerson.leadsBetween(minLeadsBetween = minLeadsBetween, maxLeadsBetween = maxLeadsBetween)	
)

query inherited::LeadInherited staticInheritedLeadsBetween(Integer minLeadsBetween = 1, Integer maxLeadsBetween = 50) => (
		inherited::LeadInherited!filter(lead | lead.value > minLeadsBetween and lead.value < maxLeadsBetween)
)


// Lead!filter(lead | lead.value > input.minLeadsBetween!isDefined() ? input.minLeadsBetween : 1 and lead.value < input.maxLeadsBetween!isDefined() ? input.maxLeadsBetween : 50)


entity Lead {
    field Integer value = 100000
    field Boolean closed
    relation SalesPerson salesPerson opposite leads
}

entity SalesPerson {
    relation Lead lead
    relation Lead[] leads opposite salesPerson
    
    query Lead[] leadsBetween(Integer minLeadsBetween = 1, Integer maxLeadsBetween = 50) => self.leads!filter(lead | lead.value > minLeadsBetween and lead.value < maxLeadsBetween)
    // self.leads!filter(lead | lead.value > input.minLeadsBetween!isDefined() ? input.minLeadsBetween : 1 and lead.value < input.maxLeadsBetween!isDefined() ? input.maxLeadsBetween : 50)

    query Lead[] leadsOverWithMin(Integer minLeadsOverMin = 5) => self.leadsBetween(minLeadsBetween = minLeadsOverMin , maxLeadsBetween = 100)
    // self.leads!filter(lead | lead.value > input.minLeadsOverMin!isDefined() ? input.minLeadsOverMin : 5 and lead.value < 100)

    query Lead[] leadsOverWithMinStatic(Integer minLeadsOverMin = 5) => staticLeadsBetween(minLeadsBetween = minLeadsOverMin, maxLeadsBetween = 100)
    // Lead!filter(lead | lead.value > input.minLeadsOverMin!isDefined() ? input.minLeadsOverMin : 5 and lead.value < 100)

    
    derived Lead[] leadsOver10 => self.leadsOverWithMin(minLeadsOverMin = 10)
    // self.leads!filter(lead | lead.value > 10 and lead.value < 100)

    derived Lead[] leadsOver20 => self.leadsBetween(minLeadsBetween = 20)
    // self.leads!filter(lead | lead.value > 20 and lead.value < 50)

    derived Lead[] leadsOver10Static => staticLeadsOverWithMin(minLeadsOverMin = 10)
    // Lead!filter(lead | lead.value > 10 and lead.value < 100)

    derived Lead[] leadsOver20Static => staticLeadsBetween(minLeadsBetween = 20)
    // Lead!filter(lead | lead.value > 20 and lead.value < 50)
    
    
    derived Integer value => self.leads!count()
    derived Integer t1 => self.leads!count() > 1
    query Customer[] leadsOverQuery(Integer limit = 100) => self.leads!filter(lead | lead.value > limit)
    derived Customer[] leadsOver => self.leads!filter(lead | lead.value > 100)
    derived Customer selfDerived => self
    derived Customer anyCustomer => Customer!any()
    derived Customer stringConcat => "" + self.value + "test"
    derived Customer complex => self.leads!count() > 0 ? self.leads!filter(lead | lead.closed)!count() / self.leads!count() : 0
    derived Customer arithmetic => ((1 + 2) * 3) / 4
    derived Time timeLiteral => `12:12:11.11`
    derived Timestamp timestampLiteral => `2020-12-01T12:12:11.11Z`
    derived Date dateLiteral => `2020-12-01`
    derived String stringLiteral => "String\nString2"
    derived String stringRawLiteral => r"Raw\n"
    derived Decimal decimalLiteral => 100.12
}

entity Customer {
//    identifier required String name
    relation Lead[] lead opposite-add customer
}

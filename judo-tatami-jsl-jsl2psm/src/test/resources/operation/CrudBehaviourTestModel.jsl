model CrudBehaviourTestModel;

type binary Binary max-file-size: 1MB  mime-type: ["image/*"];
type boolean Boolean;
type date Date;
type numeric Numeric scale: 0 precision: 9;
type string String min-size: 0 max-size: 255;
type time Time;
type timestamp Timestamp;


transfer MappedTransfer maps Entity as e {
	relation CreateTransfer[] createEntities <= e.createEntities 
			create: true 
			update: false 
			delete: false 
			choices: CreateEntity.all();
			
	field Binary binaryDerived <= e.binary;
	field String stringDerived <= e.string;
	field Boolean booleanDerived <= e.boolean;
	field Date dateDerived <= e.date;
	field Numeric numericDerived <= e.numeric;
	field Time timeDerived <= e.time;
	field Timestamp timestampDerived <= e.timestamp;	

	field Binary binaryTransient;
	field String stringTransient;
	field Boolean booleanTransient;
	field Date dateTransient;
	field Numeric numericTransient;
	field Time timeTransient;
	field Timestamp timestampTransient;	

	field Binary binaryMapped <=> e.binary;
	field String stringMapped <=> e.string;
	field Boolean booleanMapped <=> e.boolean;
	field Date dateMapped <=> e.date;
	field Numeric numericMapped <=> e.numeric;
	field Time timeMapped <=> e.time;
	field Timestamp timestampMapped <=> e.timestamp;

	action void mappedChoice(MappedTransfer input choices: Entity.all());
	action void mappedChoiceStatic(MappedTransfer input choices: Entity.all()) static;

}

entity Entity {	
	relation CreateEntity[] createEntities;
	field Binary binary;
	field String string;
	field Boolean boolean;
	field Date date;
	field Numeric numeric;
	field Time time;
	field Timestamp timestamp;	
}


transfer CreateTransfer maps CreateEntity as e {
}

entity CreateEntity {
}


transfer UnmappedTransfer {
	action void unmappedChoiceStatic(MappedTransfer input choices: Entity.all()) static;
}

entity User {
    identifier String email;
}

transfer UserTransfer maps User as u {
    field String email <=> u.email;
}

actor Actor
    realm: "COMPANY"
    claim: "email"
    identity: UserTransfer::email
{	
    access UserTransfer[] manager <= User.all();
};

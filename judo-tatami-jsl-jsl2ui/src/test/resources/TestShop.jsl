model shop;

import judo::types;

type string Email min-size:0 max-size:64 regex:r"^\w+@\w+(\.\w+)+$";

enum OrderStatus {
	OPEN = 1;
	ORDERED = 2;
	DELIVERED = 3;
}

entity Address {
    field String street required;
    field String city required;
    field String country;
}

entity User {
	identifier Email email required;
}

entity Customer abstract {
    field Address address required;
	relation Order[] orders opposite:customer;
	relation Order cart <= self.orders.filter(o | o.status == OrderStatus#OPEN).any();
}

query Integer NumOfCustomers(String country) <=
		Customer.all().
		filter(c | c.address.country == country).
		size();

entity Person extends Customer, User {
	field String firstName required;
	field String lastName required;
	field String fullName <= self.firstName + " " + self.lastName;
}

entity Enterprise extends Customer {
	field String name required;
}

entity Order {
	field OrderStatus status required default:OrderStatus#OPEN;
	field OrderItem[] orderItems;
	relation Customer customer required opposite:orders;
	field Integer price <= self.orderItems.sum(item | item.price);
}

entity OrderItem {
	relation Product product required opposite-add:orderItems[];
	field Integer amount required;
	field String productName <= self.product.name;
	field Integer price <= self.amount * self.product.price;
}

entity Product {
	identifier String name required;
	field Integer price required;
}

view ProductListView {
	table ProductRow[] products <= Product.all() enabled eager;
}

row ProductRow(Product product) {
	field String name <= product.name;
	field String price <= product.price.asString() + " HUF";
}

view ProductView(Product product) {
	group head orientation:vertical {
		field String price <= product.price.asString() + " HUF";
		field String name <= product.name default:"";
	}
}

view CartView maps Customer as customer {
	table OrderItemRow[] items <= customer.cart.orderItems;
	field Integer price <= customer.cart.price;

	link ProductListView productList text:"Back to shopping";

	// set the status of the order to OrderStatus#ORDERED
	action ThankYouView order();
}

view ThankYouView {
	text message <= "Thank you for your order. Please check other products at";
	link ProductListView productList text:"Our products page";
}

row OrderItemRow(OrderItem item) {
	field String name <= item.productName;
	field Integer amount <= item.amount;
	field Integer price <= item.price;
}

transfer UserTransfer(User user) {
	field String email <= user.email bind;
}

actor CustomerActor human identity:UserTransfer::email {
//	link CartView myCart <=  label:"My cart";
	link ProductListView products label:"Products";
}

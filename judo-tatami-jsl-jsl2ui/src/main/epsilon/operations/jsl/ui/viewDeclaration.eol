@cached
operation JSL!UIViewDeclaration getId(): String {
    return (self.eContainer.getId() + "/" + self.name);
}

@cached
operation JSL!UIViewDeclaration getFqName(): String {
    return self.eContainer.getFqName() + "::" + self.name;
}

operation JSL!UIViewDeclaration uiContainer() : UI!ui::VisualElement {
    if (self.form.isDefined() and self.form) {
        return self.equivalent("FormPageContainerVisualElement");
    }
    return self.equivalent("ViewPageContainerVisualElement");
}

@cached
operation JSL!UIViewDeclaration getExposedVisualElements(): Set {
    var ves = new Set();

    ves.add(self);

    for (link in self.members.select(m | m.isTypeOf(JSL!UIViewLinkDeclaration)).asSet()) {
        ves.addAll(link.getExposedVisualElements());
    }

    for (table in self.members.select(m | m.isTypeOf(JSL!UIViewTableDeclaration)).asSet()) {
        ves.addAll(table.getExposedVisualElements());
    }

    for (group in self.members.select(m | m.isKindOf(JSL!UIViewGroupDeclaration)).asSet()) {
        ves.addAll(group.getExposedVisualElements());
    }

    for (tab in self.members.select(m | m.isKindOf(JSL!UIViewTabsDeclaration)).asSet()) {
        ves.addAll(tab.getExposedVisualElements());
    }

    ves.addAll(self.members.select(m | m.isTypeOf(JSL!UIViewWidgetDeclaration)).asSet());

    return ves;
}

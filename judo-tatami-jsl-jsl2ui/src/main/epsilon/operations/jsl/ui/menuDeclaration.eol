@cached
operation JSL!UIMenuDeclaration getId(): String {
    return (self.eContainer.getId() + "/" + self.name);
}

@cached
operation JSL!UIMenuDeclaration getFqName(): String {
    if (self.eContainer.isDefined()) {
        return self.eContainer.getFqName() + "::" + self.name;
    }
    return self.name;
}

@cached
operation JSL!UIMenuDeclaration getRootMenu(): JSL!UIMenuDeclaration {
    return self;
}

@cached
operation JSL!UIMenuDeclaration getActorDeclaration(): JSL!ActorDeclaration {
    return self.map.actor;
}

@cached
operation JSL!UIMenuDeclaration getExposedVisualElements(): Set {
    var ves = new Set();

    ves.add(self);

    for (link in self.members.select(m | m.isTypeOf(JSL!UIMenuLinkDeclaration)).asSet()) {
        ves.add(link);
        ves.addAll(link.getExposedVisualElements());
    }

    for (table in self.members.select(m | m.isTypeOf(JSL!UIMenuTableDeclaration)).asSet()) {
        ves.add(table);
        ves.addAll(table.getExposedVisualElements());
    }

    for (group in self.members.select(m | m.isTypeOf(JSL!UIMenuGroupDeclaration)).asSet()) {
        ves.add(group);
        ves.addAll(group.getExposedVisualElements());
    }

    return ves;
}

@cached
operation JSL!UIMenuDeclaration containsVisualElement(element: Any): Boolean {
    return self.getRootMenu().getExposedVisualElements().contains(element);
}

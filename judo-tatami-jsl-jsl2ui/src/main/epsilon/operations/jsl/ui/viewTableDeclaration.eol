@cached
operation JSL!UIViewTableDeclaration getId(): String {
    return (self.eContainer.getId() + "/" + self.name);
}

@cached
operation JSL!UIViewTableDeclaration getFqName(): String {
    if (self.eContainer.isDefined()) {
        return self.eContainer.getFqName() + "::" + self.name;
    }
    return self.name;
}

/*
@cached
operation JSL!UIViewTableDeclaration getAllLinks(): Set {
    return self.referenceType.members.select(m | m.isTypeOf(JSL!RowLinkDeclaration));
}

@cached
operation JSL!UIViewTableDeclaration getDetailLink(): JSL!RowLinkDeclaration {
    return self.getAllLinks().selectOne(l | l.getDetail().isDefined());
}
*/

@cached
operation JSL!UIViewTableDeclaration getRelation(): TransferRelationDeclaration {
    return self.transferRelation.target;
}

@cached
operation JSL!UIViewTableDeclaration getExposedVisualElements(): Set {
    var ves = new Set();
    var rowDeclaration = self.referenceType;

    ves.add(self);
    ves.add(rowDeclaration);
    ves.addAll(rowDeclaration.members.select(m | m.isTypeOf(JSL!UIRowColumnDeclaration)).asSet());

    if (self.getCreateFormModifier().isDefined()) {
        ves.add(self.getCreateFormModifier().form);
        ves.addAll(self.getCreateFormModifier().form.getExposedVisualElements());
    }

    if (self.getUpdateViewModifier().isDefined()) {
        ves.add(self.getUpdateViewModifier().view);
        ves.addAll(self.getUpdateViewModifier().view.getExposedVisualElements());
    }

    if (self.getSelectorTableModifier().isDefined()) {
        ves.add(self.getSelectorTableModifier().row);
        ves.addAll(self.getSelectorTableModifier().row.getExposedVisualElements());
    }

    return ves;
}

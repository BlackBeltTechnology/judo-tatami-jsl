@cached
operation JSL!ActorDeclaration getId(): String {
    return (self.eContainer.getId() + "/" + self.name);
}

@cached
operation JSL!ActorDeclaration getFqName(): String {
    return self.eContainer.getFqName() + "::" + self.name;
}

@cached
operation JSL!ActorDeclaration getIdentity(): JSL!IdentityModifier {
    return self.modifiers.selectOne(m | m.isTypeOf(JSL!IdentityModifier));
}

@cached
operation JSL!ActorDeclaration getRealm(): JSL!RealmModifier {
    return self.modifiers.selectOne(m | m.isTypeOf(JSL!RealmModifier));
}

@cached
operation JSL!ActorDeclaration getClaim(): JSL!ClaimModifier {
    return self.modifiers.selectOne(m | m.isTypeOf(JSL!ClaimModifier));
}

@cached
operation JSL!ActorDeclaration getGuard(): JSL!GuardModifier {
    return self.modifiers.selectOne(m | m.isTypeOf(JSL!GuardModifier));
}

@cached
operation JSL!ActorDeclaration getPrincipal(): JSL!TransferDeclaration {
    return self.getIdentity()?.field?.eContainer;
}

@cached
operation JSL!ActorDeclaration getAllMenuDeclarations(): Set {
    var menuDeclarations = new Set();
    for (declaration : Any in self.members) {
        if (declaration.isTypeOf(JSL!ActorLinkDeclaration)) {
            menuDeclarations.add(declaration);
        } else if (declaration.isTypeOf(JSL!ActorGroupDeclaration)) {
            menuDeclarations.addAll(declaration.getAllMenuDeclarations());
        }
    }
    return menuDeclarations;
}

operation JSL!ActorGroupDeclaration getAllMenuDeclarations(): Set {
    var menuDeclarations = new Set();
    for (declaration : Any in self.members) {
        if (declaration.isTypeOf(JSL!ActorLinkDeclaration)) {
            menuDeclarations.add(declaration);
        } else if (declaration.isTypeOf(JSL!ActorGroupDeclaration)) {
            menuDeclarations.addAll(declaration.getAllMenuDeclarations());
        }
    }
    return menuDeclarations;
}

@cached
operation JSL!ActorDeclaration getIdentityTransferDeclaration() : JSL!TransferDeclaration {
    if (self.getIdentity().isDefined()) {
        var identityFiled = self.getIdentity().field;
        if (identityFiled.isDefined() and identityFiled.isKindOf(JSL!TransferFieldDeclaration) and identityFiled.eContainer.isKindOf(JSL!TransferDeclaration)) {
            return identityFiled.eContainer;
        }
    }
    return null;
}

@cached
operation JSL!ActorDeclaration getExposedTransferObjects() : Set {
    var declarations = self.getAllMenuDeclarations().select(m | m.referenceType.isKindOf(JSL!VisibleDeclaration)).collect(m | m.referenceType).asSet();

    var collected = new Set();
    collected.addAll(declarations);

    for (vd in declarations) {
        collected.addAll(vd.getExposedTransferObjects());
    }

    var identity = self.getIdentityTransferDeclaration();

    if (identity.isDefined()) {
        // Principal Transfers are not required to be present in the view graph
        collected.add(identity);
    }

    return collected;
}

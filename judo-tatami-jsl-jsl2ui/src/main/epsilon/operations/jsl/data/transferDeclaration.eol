@cached
operation JSL!TransferDeclaration getId(): String {
    return (self.eContainer.getId() + "/" + self.name);
}

@cached
operation JSL!TransferDeclaration getFqName(): String {
    return self.eContainer.getFqName() + "::" + self.name;
}

@cached
operation JSL!TransferDeclaration getExposedTransferObjects(): Set {
    var transfers = new Set();
    var relations = self.getExposedRelations();

    transfers.addAll(relations.collect(r | r.referenceType));

    for (relation in relations) {
        transfers.addAll(relation.referenceType.getExposedTransferObjects());
        var targetCreateEvent = relation.referenceType.getCreateEventDeclaration();
        if (targetCreateEvent.isDefined() and targetCreateEvent.parameterType.isKindOf(JSL!TransferDeclaration)) {
            transfers.add(targetCreateEvent.parameterType);
        }
    }

    return transfers;
}

@cached
operation JSL!TransferDeclaration getReferencingCreateEvent(): JSL!TransferCreateDeclaration {
    return JSL!TransferCreateDeclaration.all.selectOne(s | s.parameterType == self);
}

@cached
operation JSL!TransferDeclaration isCreateEventParameter(): Boolean {
    return self.getReferencingCreateEvent().isDefined();
}

@cached
operation JSL!TransferDeclaration getExposedRelations(): Set {
    return self.collectExposedRelations(new Set());
}

operation JSL!TransferDeclaration collectExposedRelations(collected: Set): Set {
    var relations = self.getAllRelations();
    // var operations = self.getAllOperations().select(op | not op.hasQueryParameters());
    /*relations.addAll(operations
        .select(o | o.input.isDefined())
        .collect(o | o.input.target)
        .collect(i | i.getAllRelations().select(r | not r.isQuery)).flatten());
    relations.addAll(operations
        .select(o | o.output.isDefined())
        .collect(o | o.output.target)
        .collect(o | o.getAllRelations().select(r | not r.isQuery)).flatten());
    */
    for (relation in relations) {
        if ((not collected.includes(relation)) and relation.referenceType.isKindOf(JSL!TransferDeclaration)) {
            collected.add(relation);
            relation.referenceType.collectExposedRelations(collected);
        }
    }

    return collected;
}

@cached
operation JSL!TransferDeclaration getAllRelations(): Set {
    var relations = new Set();
    var ownRelations = self.members.select(m | m.isKindOf(JSL!TransferRelationDeclaration));
    relations.addAll(ownRelations);

    if (self.isKindOf(JSL!ActorDeclaration)) {
        var linkRelations = self.getAllMenuDeclarations();
        relations.addAll(linkRelations);

        for (ref in linkRelations) {
            if (ref.referenceType.isKindOf(JSL!TransferDeclaration)) {
                relations.addAll(ref.referenceType.getAllRelations());
            }
        }
    }

    for (member in self.members.select(m | m.isKindOf(JSL!ViewPanelDeclaration))) {
        relations.addAll(member.getAllRelations());
    }

    // also add relations of relations to complete the trees
    for (member in ownRelations) {
        relations.addAll(member.referenceType.getAllRelations());
    }

    return relations;
}

@cached
operation JSL!TransferDeclaration getDirectRelations(): Set {
    var relations = new Set();
    relations.addAll(self.members.select(m | m.isKindOf(JSL!TransferRelationDeclaration)));

    if (self.isKindOf(JSL!ActorDeclaration)) {
        var linkRelations = self.getAllMenuDeclarations();
        relations.addAll(linkRelations);
    }

    for (member in self.members.select(m | m.isKindOf(JSL!ViewPanelDeclaration))) {
        relations.addAll(member.getDirectRelations());
    }

    return relations;
}

@cached
operation JSL!TransferDeclaration getAllPrimitiveFields(): Set {
    var fields = new Set();
    fields.addAll(self.members.select(m | m.isKindOf(JSL!TransferFieldDeclaration) and m.referenceType.isDefined() and m.referenceType.`primitive`.isDefined()));

    for (member in self.members.select(m | m.isKindOf(JSL!ViewPanelDeclaration))) {
        fields.addAll(member.getAllPrimitiveFields());
    }

    return fields;
}

@cached
operation JSL!TransferDeclaration isDeleteSupported(): Boolean {
    if (self.map.isDefined()) {
        var event = self.getDeleteEventDeclaration();
        return event.isDefined() and event.isEventInstead();
    }
    return false;
}

@cached
operation JSL!TransferDeclaration isCreateSupported(): Boolean {
    if (self.map.isDefined()) {
        var event = self.getCreateEventDeclaration();
        return event.isDefined() and event.isEventInstead();
    }
    return false;
}

@cached
operation JSL!TransferDeclaration isUpdateSupported(): Boolean {
    if (self.map.isDefined()) {
        var event = self.getUpdateEventDeclaration();
        return event.isDefined() and event.isEventInstead();
    }
    return false;
}

@cached
operation JSL!TransferDeclaration isDefinedAsInputParameter(): Boolean {
    return JSL!TransferActionDeclaration.all().collect(a | a.getParameterType()).contains(self);
}

@cached
operation JSL!TransferDeclaration isGetTemplateSupported(): Boolean {
    if (self.isCreateSupported()) {
        return true;
    }
    if (self.map.isUndefined()) {
        return self.isDefinedAsInputParameter();
    }
    return false;
}

@cached
operation JSL!TransferDeclaration isRefreshSupported(): Boolean {
    return self.map.isDefined();
}

@cached
operation JSL!TransferDeclaration isGenerated() : Boolean {
	return actorDeclaration.getExposedTransferObjects().includes(self);
}

operation JSL!TransferDeclaration uiContainer() : UI!ui::VisualElement {
    return self.equivalent("TransferDeclarationVisualElement");
}

@cached
operation JSL!TransferDeclaration getCreateEventDeclaration() : JSL!TransferCreateDeclaration {
	return self.members.selectOne(m | m.isTypeOf(JSL!TransferCreateDeclaration));
}

@cached
operation JSL!TransferDeclaration getFetchEventDeclaration() : JSL!TransferFetchDeclaration {
	return self.members.selectOne(m | m.isTypeOf(JSL!TransferFetchDeclaration));
}

@cached
operation JSL!TransferDeclaration getUpdateEventDeclaration() : JSL!TransferUpdateDeclaration {
	return self.members.selectOne(m | m.isTypeOf(JSL!TransferUpdateDeclaration));
}

@cached
operation JSL!TransferDeclaration getDeleteEventDeclaration() : JSL!TransferDeleteDeclaration {
	return self.members.selectOne(m | m.isTypeOf(JSL!TransferDeleteDeclaration));
}

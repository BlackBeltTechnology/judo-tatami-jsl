rule ActorNavigationItem
    transform s: JSL!ActorLinkDeclaration
    to t : UI!ui::NavigationItem {
        guard: s.getActorDeclaration().isDefined() and s.getActorDeclaration() == actorDeclaration

        t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/ActorNavigationItem");
        t.name = s.getFqName();

        var label = s.getLabelModifier();
        if (label.isDefined()) {
            t.label = label.value.value;
        }

        var icon = s.getIconModifier();
        if (icon.isDefined()) {
            t.icon = icon.equivalent("IconModifierIcon");
        }

        t.target = s.equivalent("AccessPageDefinition");

        if (s.eContainer.isTypeOf(JSL!ActorGroupDeclaration)) {
            s.eContainer.equivalent("MenuItemGroup").items.add(t);
            t.~pos = s.eContainer.members.indexOf(s);
        } else {
            var navigationController = actorDeclaration.equivalent("Application").navigationController;
            navigationController.items.add(t);
            t.~pos = s.eContainer.members.indexOf(s);
        }

        log.debug("ActorNavigationItem: " + s.name);
    }

rule AccessPageDefinition
    transform s: JSL!ActorLinkDeclaration
    to t: UI!ui::PageDefinition {
        guard: s.getActorDeclaration().isDefined() and s.getActorDeclaration() == actorDeclaration

        t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/AccessPageDefinition");

        t.name = s.getFqName() + "::PageDefinition";
        t.container = s.referenceType.equivalent("TransferDeclarationPageContainer");

        actorDeclaration.equivalent("Application").pages.add(t);

        t.dataElement = s.equivalent("RelationType");

        var relations = s.referenceType.getDirectRelations();

        /*
        log.info("===================");
        log.info(t.name + ":");
        log.info(relations.collect(r | r.name).concat(", "));
        log.info("===================");
        */

        for (link in relations.select(r | r.isKindOf(JSL!ViewLinkDeclaration))) {
            t.actions.add(link.equivalent("ViewLinkDeclarationOpenPageAction"));
        }

        for (table in relations.select(r | r.isKindOf(JSL!ViewTableDeclaration))) {
            var detailLink = table.getDetailLink();

            if (detailLink.isDefined()) {
                log.info(" - detail: true");
                t.actions.add(table.equivalent("ViewTableDeclarationOpenPageAction"));
            }
        }

        log.debug("Create AccessPageDefinition: " + t.name);
}

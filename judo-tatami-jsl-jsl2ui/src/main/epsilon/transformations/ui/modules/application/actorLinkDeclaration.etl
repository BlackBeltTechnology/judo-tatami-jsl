rule ActorNavigationItem
    transform s: JSL!ActorLinkDeclaration
    to t : UI!ui::NavigationItem {
        guard: s.getActorDeclaration().isDefined() and s.getActorDeclaration() == actorDeclaration

        t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/ActorNavigationItem");
        t.name = s.getFqName();

        var label = s.getLabelModifier();
        if (label.isDefined()) {
            t.label = label.value.value;
        }

        var icon = s.getIconModifier();
        if (icon.isDefined()) {
            t.icon = icon.equivalent("IconModifierIcon");
        }

        t.target = s.equivalent("AccessPageDefinition");

        if (s.eContainer.isTypeOf(JSL!ActorGroupDeclaration)) {
            s.eContainer.equivalent("MenuItemGroup").items.add(t);
            t.~pos = s.eContainer.members.indexOf(s);
        } else {
            var navigationController = actorDeclaration.equivalent("Application").navigationController;
            navigationController.items.add(t);
            t.~pos = s.eContainer.members.indexOf(s);
        }

        log.debug("ActorNavigationItem: " + s.name);
    }

rule AccessPageDefinition
    transform s: JSL!ActorLinkDeclaration
    to t: UI!ui::PageDefinition {
        guard: s.getActorDeclaration().isDefined() and s.getActorDeclaration() == actorDeclaration

        t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/AccessPageDefinition");

        t.name = s.getFqName() + "::PageDefinition";
        t.container = s.equivalent("AccessPageContainer");

        actorDeclaration.equivalent("Application").pages.add(t);

        t.dataElement = s.equivalent("RelationType");

        log.debug("Create AccessPageDefinition: " + t.name);
}

@lazy
rule AccessPageContainer
    transform s: JSL!ActorLinkDeclaration
    to t: UI!ui::PageContainer {
        guard: s.getActorDeclaration().isDefined() and s.getActorDeclaration() == actorDeclaration

        t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/AccessPageContainer");
        t.name = s.getFqName() + "::PageContainer";
        var label = s.getLabelModifier();
        if (label.isDefined()) {
            t.label = label.value.value;
        }
        t.titleFrom = UI!ui::TitleFrom#LABEL;
        t.type = UI!ui::PageContainerType#VIEW;
        // t.onInit = s.equivalent("TransferObjectTableAddSelectorTableRangeActionDefinition");
        actorDeclaration.equivalent("Application").pageContainers.add(t);
        t.children.add(s.referenceType.equivalent("ViewDeclarationVisualElement"));
        // t.actionButtonGroup = s.equivalent("TransferObjectTableAddSelectorButtonGroup");
        t.dataElement = s.eContainer.equivalent("RelationType");

        log.debug("AccessPageContainer: " + t.name);
}

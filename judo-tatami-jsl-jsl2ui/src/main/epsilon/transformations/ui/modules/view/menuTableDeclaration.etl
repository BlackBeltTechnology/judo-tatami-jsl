rule MenuTableNavigationItem
    transform s: JSL!UIMenuTableDeclaration
    to t : UI!ui::NavigationItem {
        guard: rootMenu.containsVisualElement(s)

        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/MenuTableNavigationItem");
        t.name = s.getFqName();
        t.label = s.getLabelWithNameFallback();

        var icon = s.getIconModifier();
        if (icon.isDefined()) {
            t.icon = icon.equivalent("IconModifierIcon");
        }

        t.target = s.equivalent("AccessTablePageDefinition");

        if (s.eContainer.isKindOf(JSL!UIMenuGroupDeclaration)) {
            s.eContainer.equivalent("MenuItemGroup").items.add(t);
            t.~pos = s.eContainer.members.indexOf(s);
        } else {
            var navigationController = rootMenu.equivalent("Application").navigationController;
            navigationController.items.add(t);
            t.~pos = s.eContainer.members.indexOf(s);
        }

        log.debug("MenuTableNavigationItem: " + s.name);
}

rule AccessTablePageDefinition
    transform s: JSL!UIMenuTableDeclaration
    to t: UI!ui::PageDefinition {
        guard: rootMenu.containsVisualElement(s)

        var relation = s.actorAccess.target;

        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/AccessTablePageDefinition");
        t.name = s.getFqName() + "::AccessTablePage";
        t.container = s.referenceType.equivalent("TablePageContainer");
        t.dataElement = relation.equivalent("RelationType");
        t.dataElement.memberType = UI!ui::data::MemberType#ACCESS;

        if (s.getUpdateViewModifier().isDefined()) {
            t.actions.add(s.equivalent("AccessTableRowOpenPageAction"));
        }
        if (relation.isRefreshAllowed()) {
            t.actions.add(s.equivalent("AccessTableTableRefreshAction"));
        }
        if (relation.isDeleteAllowed()) {
            t.actions.add(s.equivalent("AccessTableRowDeleteAction"));
        }
        if (relation.isFilterSupported()) {
            t.actions.add(s.equivalent("AccessTableTableFilterAction"));
        }
        if (relation.isCreateAllowed()) {
            t.actions.add(s.equivalent("AccessTableTableOpenCreateAction"));
        }
        if (relation.isAddReferenceAllowed()) {
            t.actions.add(table.equivalent("ViewTableDeclarationOpenAddSelectorAction"));
        }
        if (relation.isRemoveReferenceAllowed()) {
            t.actions.add(table.equivalent("AccessTableTableClearAction"));
            t.actions.add(table.equivalent("AccessTableTableBulkRemoveAction"));
        }

        rootMenu.equivalent("Application").pages.add(t);

        log.debug("Create AccessTablePageDefinition: " + t.name);
}

@lazy
rule AccessTableBackAction
    transform s: JSL!UIMenuTableDeclaration
    to t: UI!ui::Action {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/AccessTableBackAction");
        t.name = s.name + "::Back";
        t.actionDefinition = s.referenceType.equivalent("AccessTablePageContainerBackActionDefinition");

        log.debug("AccessTableBackAction: " + t.name);
}

@lazy
rule AccessTableTableOpenCreateAction
    transform s: JSL!UIMenuTableDeclaration
    to t: UI!ui::Action {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/AccessTableTableOpenCreateAction");
        t.name = s.name + "::OpenCreate";
        t.actionDefinition = s.referenceType.equivalent("TableTableOpenCreateActionDefinition");

        t.targetPageDefinition = s.getCreateFormModifier().form.equivalent("AccessTableCreateFormPageDefinition");

        log.debug("AccessTableTableOpenCreateAction: " + t.name);
}

@lazy
rule AccessTableTableRefreshAction
    transform s: JSL!UIMenuTableDeclaration
    to t: UI!ui::Action {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/AccessTableTableRefreshAction");
        t.name = s.name + "::Refresh";
        t.actionDefinition = s.referenceType.equivalent("TableTableRefreshActionDefinition");

        log.debug("AccessTableTableRefreshAction: " + t.name);
}

@lazy
rule AccessTableTableFilterAction
    transform s: JSL!UIMenuTableDeclaration
    to t: UI!ui::Action {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/AccessTableTableFilterAction");
        t.name = s.name + "::Filter";
        t.actionDefinition = s.referenceType.equivalent("TableTableFilterActionDefinition");

        log.debug("AccessTableTableFilterAction: " + t.name);
}

@lazy
rule AccessTableRowOpenPageAction
    transform s: JSL!UIMenuTableDeclaration
    to t: UI!ui::Action {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/AccessTableRowOpenPageAction");

        t.name = s.name + "::OpenPage";
        t.actionDefinition = s.referenceType.equivalent("TableRowOpenPageActionDefinition");

        t.targetPageDefinition = s.equivalent("AccessTableViewPageDefinition");

        log.debug("AccessTableRowOpenPageAction: " + t.name);
}

@lazy
rule AccessTableRowDeleteAction
    transform s: JSL!UIMenuTableDeclaration
    to t: UI!ui::Action {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/AccessTableRowDeleteAction");
        t.name = s.name + "::RowDelete";
        t.actionDefinition = s.referenceType.equivalent("TableRowDeleteActionDefinition");

        log.debug("AccessTableRowDeleteAction: " + t.name);
}

@lazy
rule AccessTableTableBulkRemoveAction
    transform s: JSL!UIMenuTableDeclaration
    to t: UI!ui::Action {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/AccessTableTableBulkRemoveAction");
        t.name = s.name + "::BulkRemove";
        t.actionDefinition = s.equivalent("AccessTableTableBulkRemoveActionDefinition");

        t.ownerDataElement = s.actorAccess.target.equivalent("RelationType");
        t.targetDataElement = s.actorAccess.target.equivalent("RelationType");

        log.debug("AccessTableTableBulkRemoveAction: " + t.name);
}

@lazy
rule AccessTableTableClearAction
    transform s: JSL!UIMenuTableDeclaration
    to t: UI!ui::Action {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/AccessTableTableClearAction");
        t.name = s.name + "::Clear";
        t.actionDefinition = s.equivalent("AccessTableTableClearActionDefinition");

        t.ownerDataElement = s.actorAccess.target.equivalent("RelationType");
        t.targetDataElement = s.actorAccess.target.equivalent("RelationType");

        log.debug("AccessTableTableClearAction: " + t.name);
}

@lazy
rule AccessTableTableAddSelectorPageDefinition
    transform s: JSL!UIMenuTableDeclaration
    to t: UI!ui::PageDefinition {

    t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/AccessTableTableAddSelectorPageDefinition");

    t.name = s.getFqName() + "::AddSelectorPage";

    t.container = s.referenceType.equivalent("TableAddSelectorPageContainer");
    t.dataElement = s.actorAccess.target.equivalent("RelationType");
    t.dataElement.memberType = UI!ui::data::MemberType#ACCESS;
    t.openInDialog = true;
    t.dialogSize = UI!ui::DialogSize#MD;

    t.actions.add(s.equivalent("AccessTableTableAddSelectorAddAction"));
    t.actions.add(s.equivalent("AccessTableTableAddSelectorBackAction"));
    t.actions.add(s.equivalent("AccessTableTableAddSelectorTableFilterAction"));
    t.actions.add(s.equivalent("AccessTableTableAddSelectorTableRangeAction"));

    rootMenu.equivalent("Application").pages.add(t);

    log.debug("AccessTableTableAddSelectorPageDefinition: " + t.name);
}

@lazy
rule AccessTableTableAddSelectorAddAction
	transform s: JSL!UIMenuTableDeclaration
    to t: UI!ui::Action {
	    t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/AccessTableTableAddSelectorAddAction");
 		t.name = s.getFqName() + "::AddSelector::Add";
        t.ownerDataElement = s.actorAccess.target.equivalent("RelationType");
        t.actionDefinition = s.referenceType.equivalent("TableAddSelectorAddActionDefinition");

        log.debug("AccessTableTableAddSelectorAddAction: " + t.name);
}

@lazy
rule AccessTableTableAddSelectorBackAction
	transform s: JSL!UIMenuTableDeclaration
    to t: UI!ui::Action {
	    t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/AccessTableTableAddSelectorBackAction");
 		t.name = s.getFqName() + "::AddSelector::Back";
        t.ownerDataElement = s.actorAccess.target.equivalent("RelationType");
        t.actionDefinition = s.referenceType.equivalent("TableAddSelectorTableBackActionDefinition");

        log.debug("AccessTableTableAddSelectorBackAction: " + t.name);
}

@lazy
rule AccessTableTableAddSelectorTableFilterAction
	transform s: JSL!UIMenuTableDeclaration
    to t: UI!ui::Action {
	    t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/AccessTableTableAddSelectorTableFilterAction");
 		t.name = s.getFqName() + "::AddSelector::Table::Filter";
        t.ownerDataElement = s.actorAccess.target.equivalent("RelationType");
        t.targetDataElement = s.actorAccess.target.equivalent("RelationType");
        t.actionDefinition = s.referenceType.equivalent("TableAddSelectorTableTableFilterActionDefinition");

        log.debug("AccessTableTableAddSelectorTableFilterAction: " + t.name);
}

@lazy
rule AccessTableTableAddSelectorTableRangeAction
	transform s: JSL!UIMenuTableDeclaration
    to t: UI!ui::Action {
	    t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/AccessTableTableAddSelectorTableRangeAction");
 		t.name = s.getFqName() + "::AddSelector::Table::Range";
        t.ownerDataElement = s.actorAccess.target.equivalent("RelationType");
        t.targetDataElement = s.actorAccess.target.equivalent("RelationType");
        t.actionDefinition = s.referenceType.equivalent("TableAddSelectorTableRangeActionDefinition");

        log.debug("AccessTableTableAddSelectorTableRangeAction: " + t.name);
}

rule AccessTableViewPageDefinition
    transform s: JSL!UIMenuTableDeclaration
    to t: UI!ui::PageDefinition {
        guard: rootMenu.containsVisualElement(s) and s.getCreateFormModifier().isDefined()

        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/AccessTableViewPageDefinition");

        t.name = s.getFqName() + "::AccessTableViewPage";
        t.container = s.getUpdateViewModifier().view.equivalent("ViewPageContainer");

        rootMenu.equivalent("Application").pages.add(t);

        t.dataElement = s.actorAccess.target.equivalent("RelationType");
        t.dataElement.memberType = UI!ui::data::MemberType#ACCESS;

        // var relations = s.referenceType.getDirectRelations();

        /*
        log.info("===================");
        log.info(t.name + ":");
        log.info(relations.collect(r | r.name).concat(", "));
        log.info("===================");
        */
        /*
        for (link in relations.select(r | r.isKindOf(JSL!UIViewLinkDeclaration))) {
            t.actions.add(link.equivalent("ViewLinkDeclarationOpenPageAction"));
        }

        for (table in relations.select(r | r.isKindOf(JSL!UIViewTableDeclaration))) {
            var detailLink = table.getDetailLink();

            if (detailLink.isDefined()) {
                t.actions.add(table.equivalent("ViewTableDeclarationOpenPageAction"));
            }
        }
        */

        t.actions.add(s.equivalent("AccessTableViewBackAction"));
        if (s.actorAccess.target.isRefreshAllowed()) {
            t.actions.add(s.equivalent("AccessTableViewRefreshAction"));
        }
        if (s.actorAccess.target.isUpdateAllowed()) {
            t.actions.add(s.equivalent("AccessTableViewCancelAction"));
            t.actions.add(s.equivalent("AccessTableViewUpdateAction"));
        }
        if (s.actorAccess.target.isDeleteAllowed()) {
            t.actions.add(s.equivalent("AccessTableViewDeleteAction"));
        }

        log.debug("Create AccessTableViewPageDefinition: " + t.name);
}

@lazy
rule AccessTableViewBackAction
    transform s: JSL!UIMenuTableDeclaration
    to t: UI!ui::Action {
	    t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/AccessTableViewBackAction");
 		t.name = s.getFqName() + "::Back";
        t.ownerDataElement = s.actorAccess.target.equivalent("RelationType");
        t.actionDefinition = s.getUpdateViewModifier().view.equivalent("ViewPageContainerBackActionDefinition");

        log.debug("AccessTableViewBackAction: " + t.name);
}

@lazy
rule AccessTableViewRefreshAction
    transform s: JSL!UIMenuTableDeclaration
    to t: UI!ui::Action {
	    t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/AccessTableViewRefreshAction");
 		t.name = s.getFqName() + "::Refresh";
        t.ownerDataElement = s.actorAccess.target.equivalent("RelationType");
        t.actionDefinition = s.getUpdateViewModifier().view.equivalent("ViewPageContainerRefreshActionDefinition");

        log.debug("AccessTableViewRefreshAction: " + t.name);
}

@lazy
rule AccessTableViewCancelAction
    transform s: JSL!UIMenuTableDeclaration
    to t: UI!ui::Action {
	    t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/AccessTableViewCancelAction");
 		t.name = s.getFqName() + "::Cancel";
        t.ownerDataElement = s.actorAccess.target.equivalent("RelationType");
        t.actionDefinition = s.getUpdateViewModifier().view.equivalent("ViewPageContainerCancelActionDefinition");

        log.debug("AccessTableViewCancelAction: " + t.name);
}

@lazy
rule AccessTableViewUpdateAction
    transform s: JSL!UIMenuTableDeclaration
    to t: UI!ui::Action {
	    t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/AccessTableViewUpdateAction");
 		t.name = s.getFqName() + "::Update";
        t.ownerDataElement = s.actorAccess.target.equivalent("RelationType");
        t.actionDefinition = s.getUpdateViewModifier().view.equivalent("ViewPageContainerUpdateActionDefinition");

        log.debug("AccessTableViewUpdateAction: " + t.name);
}

@lazy
rule AccessTableViewDeleteAction
    transform s: JSL!UIMenuTableDeclaration
    to t: UI!ui::Action {
	    t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/AccessTableViewDeleteAction");
 		t.name = s.getFqName() + "::Delete";
        t.ownerDataElement = s.actorAccess.target.equivalent("RelationType");
        t.actionDefinition = s.getUpdateViewModifier().view.equivalent("ViewPageContainerDeleteActionDefinition");

        log.debug("AccessTableViewDeleteAction: " + t.name);
}

rule AccessTableCreateFormPageDefinition
    transform s: JSL!UIMenuTableDeclaration
    to t: UI!ui::PageDefinition {
        guard: rootMenu.containsVisualElement(s) and s.getCreateFormModifier().isDefined()

        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/AccessTableCreateFormPageDefinition");
        t.openInDialog = true;
        t.name = s.getFqName() + "::AccessFormPage";
        t.container = s.getCreateFormModifier().form.equivalent("FormPageContainer");
        t.dataElement = s.actorAccess.target.equivalent("RelationType");
        t.dataElement.memberType = UI!ui::data::MemberType#ACCESS;

        t.actions.add(s.equivalent("AccessTableCreateFormBackAction"));
        t.actions.add(s.equivalent("AccessTableCreateFormCreateAction"));
        if (s.actorAccess.target.isTemplateAllowed()) {
            t.actions.add(s.equivalent("AccessTableCreateFormGetTemplateAction"));
        }

        rootMenu.equivalent("Application").pages.add(t);

        log.debug("Create AccessTableCreateFormPageDefinition: " + t.name);
}

@lazy
rule AccessTableCreateFormBackAction
    transform s: JSL!UIMenuTableDeclaration
    to t: UI!ui::Action {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/AccessTableCreateFormBackAction");
        t.name = s.name + "::Back";
        t.actionDefinition = s.getCreateFormModifier().form.equivalent("FormPageContainerBackActionDefinition");

        log.debug("AccessTableCreateFormBackAction: " + t.name);
}

@lazy
rule AccessTableCreateFormGetTemplateAction
    transform s: JSL!UIMenuTableDeclaration
    to t: UI!ui::Action {
	    t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/AccessTableCreateFormGetTemplateAction");
 		t.name = s.name + "::GetTemplate";
        t.actionDefinition = s.getCreateFormModifier().form.equivalent("FormPageContainerGetTemplateActionDefinition");
        log.debug("AccessTableCreateFormGetTemplateAction: " + t.name);
}

@lazy
rule AccessTableCreateFormCreateAction
    transform s: JSL!UIMenuTableDeclaration
    to t: UI!ui::Action {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/AccessTableCreateFormCreateAction");
        t.name = s.name + "::Create";
        t.ownerDataElement = s.actorAccess.target.equivalent("RelationType");
        t.actionDefinition = s.getCreateFormModifier().form.equivalent("FormPageContainerCreateActionDefinition");
        t.targetPageDefinition = s.getCreateFormModifier().form.equivalent("AccessTableViewPageDefinition");

        log.debug("AccessTableCreateFormCreateAction: " + t.name);
}

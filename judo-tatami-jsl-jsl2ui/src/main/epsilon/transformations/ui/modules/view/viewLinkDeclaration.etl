@abstract
rule AbstractViewLinkDeclaration
    transform s: JSL!UIViewLinkDeclaration
    to t: UI!ui::Link {
        guard: rootMenu.containsVisualElement(s)

        t.name = s.name;
        t.relationName = s.name;
        t.label = s.getLabelWithNameFallback();
        if (s.getIconModifier().isDefined()) {
            t.icon = s.equivalent("LinkIcon");
        }
        t.row = 1d;
        t.col = s.width.isDefined() ? s.width.asReal() : 12d;
        t.~pos = s.~pos;
        t.isEager = s.transferRelation.target.isEager();
        if (t.~pos.isUndefined()) {
            t.~pos = 0;
        }

        if (t.isEager) {
            // TODO finish additional mask attributes
            /*
            for (dataFeature in s.additionalMaskFeatures) {
                var attributeType = dataFeature.getMember().mapAttributeType(s.getRoot().getTransferObjectType().equivalent("ClassType"));
                t.additionalMaskAttributes.add(attributeType);
            }
            */
        }
}

@lazy
@greedy
rule LinkIcon
    transform s: JSL!UIViewLinkDeclaration
    to t: UI!ui::Icon {
        t.iconName = s.getIconModifier().value.value;
        t.name = s.name + "ViewLinkIcon";
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/LinkIcon");
}

rule InlineViewLink
    transform s: JSL!UIViewLinkDeclaration
    to t: UI!ui::Link
    extends AbstractViewLinkDeclaration {
        var id = rootMenu.name + "/(jsl/" + s.getId() + ")/InlineViewLink";
        t.setId(id);
        t.dataElement = s.transferRelation.target.equivalent("RelationType");

        s.eContainer.uiContainer().children.add(t);

        var col = s.equivalentDiscriminated("ViewLinkDeclarationRepresentationColumn", id);
        t.parts.add(col);

        // TODO transform selector row per page
        t.selectorRowsPerPage = 10;
        t.autoCompleteRows = 10;

        t.actionButtonGroup = s.equivalent("InlineViewLinkButtonGroup");

        /*
        t.autocompleteRangeActionDefinition = s.equivalent("TabularReferenceFieldLinkAutocompleteRangeActionDefinition");
        t.autocompleteSetActionDefinition = s.equivalent("TabularReferenceFieldLinkAutocompleteSetActionDefinition");
        */

        if (s.transferRelation.target.isRefreshAllowed() and not s.transferRelation.target.isEager()) {
            t.refreshActionDefinition = s.equivalent("ViewLinkDeclarationRefreshActionDefinition");
        }

        log.debug("InlineViewLink: " + t.name);
}

@lazy
rule ViewLinkDeclarationRefreshActionDefinition
    transform s: JSL!UIViewLinkDeclaration
    to t: UI!ui::RefreshActionDefinition {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewLinkDeclarationRefreshActionDefinition");
        t.name = s.name + "::Refresh";
        t.isContainedRelationAction = true;

        log.debug("ViewLinkDeclarationOpenPageActionDefinitionViewLinkDeclarationRefreshActionDefinition: " + t.name);
}

@lazy
rule InlineViewLinkButtonGroup
    transform s: JSL!UIViewLinkDeclaration
    to t: UI!ui::ButtonGroup {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/InlineViewLinkButtonGroup");
        t.name = s.name + "::Actions";
        t.label = "Actions";

        t.buttons.add(s.equivalent("ViewLinkDeclarationOpenPageButton"));
        if (s.getCreateFormModifier().isDefined()) {
            t.buttons.add(s.equivalent("ViewLinkDeclarationOpenFormButton"));
        }
        if (s.transferRelation.target.isDeleteAllowed()) {
            t.buttons.add(s.equivalent("ViewLinkDeclarationDeleteButton"));
        }
        if (s.getSelectorTableModifier().isDefined()) {
            t.buttons.add(s.equivalent("ViewLinkDeclarationOpenSetSelectorButton"));
        }
        if (s.getSelectorTableModifier().isDefined()) {
            t.buttons.add(s.equivalent("ViewLinkDeclarationUnsetButton"));
        }

        log.debug("InlineViewLinkButtonGroup: " + t.name);
}

@lazy
rule ViewLinkDeclarationRepresentationColumn
    transform s: JSL!UIViewLinkDeclaration
    to t: UI!ui::Column {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewLinkDeclarationRepresentationColumn");

        var firstStringFromTarget = s.referenceType.map.transfer.getAllPrimitiveFields().selectOne(f | f.referenceType.isDefined() and f.referenceType.`primitive` == "string");

        if (firstStringFromTarget.isUndefined()) {
            throw "Could not get string type field from relation target to use for representation: " + s.referenceType.name;
        }

        t.attributeType = firstStringFromTarget.getTransferFieldDeclarationEquivalent();
        t.name = t.attributeType.name;
        t.label = "";
        t.col = 12d;
        t.row = 1d;
        t.format = "%s";
        t.sort = UI!ui::Sort#ASC;

        log.debug("ViewLinkDeclarationRepresentationColumn: " + t.name);
}

@lazy
rule ViewLinkDeclarationOpenPageButton
    transform s: JSL!UIViewLinkDeclaration
    to t: UI!ui::Button {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewLinkDeclarationOpenPageButton");
        t.name = s.name + "::View";
        t.buttonStyle = "contained";
        t.label = "View";
        t.icon = s.equivalent("ViewLinkDeclarationOpenPageButtonIcon");
        t.actionDefinition = s.equivalent("ViewLinkDeclarationOpenPageActionDefinition");

        log.debug("ViewLinkDeclarationOpenPageButton: " + t.name);
}

@lazy
rule ViewLinkDeclarationOpenPageButtonIcon
    transform s: JSL!UIViewLinkDeclaration
    to t: UI!ui::Icon {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewLinkDeclarationOpenPageButtonIcon");
        t.iconName = "eye";
        t.name = s.name + "OpenPageIcon";

        log.debug("ViewLinkDeclarationOpenPageButtonIcon: " + t.name);
}

@lazy
rule ViewLinkDeclarationOpenPageActionDefinition
    transform s: JSL!UIViewLinkDeclaration
    to t: UI!ui::OpenPageActionDefinition {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewLinkDeclarationOpenPageActionDefinition");
        t.name = s.name + "::View";
        t.isContainedRelationAction = true;
        t.targetType = s.transferRelation.target.referenceType.equivalent("ClassType");

        log.debug("ViewLinkDeclarationOpenPageActionDefinition: " + t.name);
}

@lazy
rule ViewLinkDeclarationOpenFormButton
    transform s: JSL!UIViewLinkDeclaration
    to t: UI!ui::Button {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewLinkDeclarationOpenFormButton");
        t.name = s.name + "::Create::Open";
        t.buttonStyle = "contained";
        t.label = "Create";
        t.icon = s.equivalent("ViewLinkDeclarationOpenFormButtonIcon");
        t.actionDefinition = s.equivalent("ViewLinkDeclarationOpenCreateFormActionDefinition");

        log.debug("ViewLinkDeclarationOpenFormButton: " + t.name);
}

@lazy
rule ViewLinkDeclarationOpenFormButtonIcon
    transform s: JSL!UIViewLinkDeclaration
    to t: UI!ui::Icon {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewLinkDeclarationOpenFormButtonIcon");
        t.iconName = "note-add";
        t.name = s.name + "OpenFormIcon";

        log.debug("ViewLinkDeclarationOpenFormButtonIcon: " + t.name);
}

@lazy
rule ViewLinkDeclarationOpenCreateFormActionDefinition
    transform s: JSL!UIViewLinkDeclaration
    to t: UI!ui::OpenCreateFormActionDefinition {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewLinkDeclarationOpenCreateFormActionDefinition");
        t.name = s.name + "::OpenCreate";
        t.isContainedRelationAction = true;
        t.targetType = s.transferRelation.target.referenceType.equivalent("ClassType");

        log.debug("ViewLinkDeclarationOpenCreateFormActionDefinition: " + t.name);
}

@lazy
rule ViewLinkDeclarationDeleteButton
    transform s: JSL!UIViewLinkDeclaration
    to t: UI!ui::Button {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewLinkDeclarationDeleteButton");
        t.name = s.name + "::Delete";
        t.buttonStyle = "contained";
        t.label = "Delete";
        t.icon = s.equivalent("ViewLinkDeclarationDeleteButtonIcon");
        t.actionDefinition = s.equivalent("ViewLinkDeclarationRowDeleteActionDefinition");

        log.debug("ViewLinkDeclarationDeleteButton: " + t.name);
}

@lazy
rule ViewLinkDeclarationDeleteButtonIcon
    transform s: JSL!UIViewLinkDeclaration
    to t: UI!ui::Icon {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewLinkDeclarationDeleteButtonIcon");
        t.iconName = "delete_forever";
        t.name = s.name + "DeleteIcon";

        log.debug("ViewLinkDeclarationDeleteButtonIcon: " + t.name);
}

@lazy
rule ViewLinkDeclarationRowDeleteActionDefinition
    transform s: JSL!UIViewLinkDeclaration
    to t: UI!ui::RowDeleteActionDefinition {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewLinkDeclarationRowDeleteActionDefinition");
        t.name = s.name + "::Delete";
        t.isContainedRelationAction = true;
        t.targetType = s.referenceType.equivalent("ClassType");

        log.debug("ViewLinkDeclarationRowDeleteActionDefinition: " + t.name);
}

@lazy
rule ViewLinkDeclarationUnsetButton
    transform s: JSL!UIViewLinkDeclaration
    to t: UI!ui::Button {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewLinkDeclarationUnsetButton");
        t.name = s.name + "::Unset";
        t.label = "Unset";
        t.buttonStyle = "contained";
        t.icon = "link-off".createSyntheticIcon(s.getId(), s.getFqName());
        t.actionDefinition = s.equivalent("ViewLinkDeclarationUnsetActionDefinition");

        log.debug("ViewLinkDeclarationUnsetButton: " + t.name);
}

@lazy
rule ViewLinkDeclarationUnsetActionDefinition
    transform s: JSL!UIViewLinkDeclaration
    to t: UI!ui::UnsetActionDefinition {
	    t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewLinkDeclarationUnsetActionDefinition");
 		t.name = s.name + "::Unset";
 		t.isContainedRelationAction = true;
 		t.targetType = s.referenceType.equivalent("ClassType");

        log.debug("ViewLinkDeclarationUnsetActionDefinition: " + t.name);
}

@lazy
rule ViewLinkDeclarationOpenSetSelectorButton
    transform s: JSL!UIViewLinkDeclaration
    to t: UI!ui::Button {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewLinkDeclarationOpenSetSelectorButton");
        t.name = s.name + "::OpenSetSelector";
        t.label = "Set";
        t.buttonStyle = "contained";
        t.icon = "link".createSyntheticIcon(s.getId(), s.getFqName());
        t.actionDefinition = s.equivalent("ViewLinkDeclarationOpenSetSelectorActionDefinition");

        log.debug("ViewLinkDeclarationOpenSetSelectorButton: " + t.name);
}

@lazy
rule ViewLinkDeclarationOpenSetSelectorActionDefinition
    transform s: JSL!UIViewLinkDeclaration
    to t: UI!ui::OpenSetSelectorActionDefinition {
	    t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewLinkDeclarationOpenSetSelectorActionDefinition");
 		t.name = s.name + "::OpenSetSelector";
 		t.isContainedRelationAction = true;
 		t.selectorFor = s.equivalent("ViewLinkDeclarationSetSelectorSetSelectorSetActionDefinition");

        log.debug("ViewLinkDeclarationOpenSetSelectorActionDefinition: " + t.name);
}

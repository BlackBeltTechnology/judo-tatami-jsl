@abstract
rule AbstractViewTableDeclaration
    transform s: JSL!ViewTableDeclaration
    to t: UI!ui::Table {
        guard: actorDeclaration.getAllRelations().contains(s)

        t.name = s.name;
    	t.relationName = s.name;
    	if (s.getLabelModifier().isDefined()) {
            t.label = s.getLabelModifier().value.value;
        }
        if (s.getIconModifier().isDefined()) {
            t.icon = s.equivalent("TableIcon");
        }
        t.row = 1d;
        t.col = s.width.isDefined() ? s.width.asReal() : 12d;
        t.~pos = s.~pos;
        if (t.~pos.isUndefined()) {
            t.~pos = 0;
        }
}

@lazy
@greedy
rule TableIcon
    transform s: JSL!ViewTableDeclaration
    to t: UI!ui::Icon {
        t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/TableIcon");
    	t.name = s.name + "TableIcon";
    	t.iconName = s.getIconModifier().value.value;
}

rule InlineViewTable
    transform s: JSL!ViewTableDeclaration
    to t: UI!ui::Table
    extends AbstractViewTableDeclaration {
        guard: s.getTransferObjectType().isGenerated()

        var id = actorDeclaration.name + "/(jsl/" + s.getId() + ")/InlineViewTable";
        t.setId(id);
        t.dataElement = s.equivalent("RelationType");

        s.eContainer.uiContainer().children.add(t);

        var primitiveFields = s.referenceType.members.select(m | m.isTypeOf(JSL!RowFieldDeclaration) and m.referenceType.`primitive`.isDefined());
        var links = s.referenceType.members.select(m | m.isTypeOf(JSL!RowLinkDeclaration));

        for (field in primitiveFields) {
            var col = field.equivalentDiscriminated("TablePrimitiveColumn", id);
            t.columns.add(col);
            if (col.attributeType.isFilterable) {
               t.filters.add(field.equivalentDiscriminated("TablePrimitiveColumnFilter", id));
            }
        }

        for (link in links) {
            if (link.getDetail().isUndefined()) {
                var col = link.equivalentDiscriminated("RowLinkDerivedColumn", id);
                t.columns.add(col);
                if (col.attributeType.isFilterable) {
                   t.filters.add(link.equivalentDiscriminated("RowLinkDerivedColumnFilter", id));
                }
            } else {
                // TODO generate open action from link with detail modifier
            }

        }

        t.tableActionButtonGroup = s.equivalent("InlineViewTableButtonGroup");
        t.rowActionButtonGroup = s.equivalent("InlineViewTableRowButtonGroup");

        // TODO transform selector row per page
        t.selectorRowsPerPage = 10;

        log.debug("InlineViewTable: " + t.name);
}

@lazy
@greedy
rule TablePrimitiveColumn
    transform s: JSL!TransferFieldDeclaration
    to t: UI!ui::Column {
        t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/TablePrimitiveColumn");
        t.name = s.name;
        t.format = "%s";
        if (s.getLabelModifier().isDefined()) {
            t.label = s.getLabelModifier().value.value;
        }
        if (s.getIconModifier().isDefined()) {
            t.icon = s.equivalent("ColumnIcon");
        }
        t.width = s.getWidth().isDefined() ? s.getWidth().value : "120";

        /*
        if (s.customImplementation.isDefined()) {
            t.customImplementation = s.customImplementation;
        }
        if (s.sort.isDefined()) {
            t.sort = s.getUiSort();
        }
        if (s.sortPrecedence.isDefined()) {
            t.sortPrecedence = s.sortPrecedence;
        }
        if (s.formatValue.isDefined()) {
            t.formatValue = s.formatValue;
        }
        */
        t.attributeType = s.getTransferFieldDeclarationEquivalent();

        log.debug("TablePrimitiveColumn: " + t.name);
}

@lazy
@greedy
rule ColumnIcon
    transform s: JSL!TransferFieldDeclaration
    to t: UI!ui::Icon {
        t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/ColumnIcon");
    	t.iconName = s.getIconModifier().value.value;
    	t.name = s.name + "FieldIcon";
    	t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/ColumnIcon");

    	log.debug("ColumnIcon: " + t.name);
}

@lazy
@greedy
rule TablePrimitiveColumnFilter
    transform s: JSL!TransferFieldDeclaration
    to t: UI!ui::Filter {
        t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/TablePrimitiveColumnFilter");
        t.name = s.name + "Filter";
        t.attributeType = s.getTransferFieldDeclarationEquivalent();
        if (s.getLabelModifier().isDefined()) {
            t.label = s.getLabelModifier().value.value;
        }
        log.debug("TablePrimitiveColumnFilter: " + t.name);
}

@lazy
@greedy
rule RowLinkDerivedColumn
    transform s: JSL!RowLinkDeclaration
    to t: UI!ui::Column {
        t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/RowLinkDerivedColumn");
        // we keep the name of the link it self because the relation won't be present in the visual elements only in the data model
        t.name = s.name;
        t.format = "%s";
        if (s.getLabelModifier().isDefined()) {
            t.label = s.getLabelModifier().value.value;
        }
        if (s.getIconModifier().isDefined()) {
            t.icon = s.equivalent("RowLinkDerivedColumnIcon");
        }
        t.width = s.getWidth().isDefined() ? s.getWidth().value : "120";

        /*
        if (s.customImplementation.isDefined()) {
            t.customImplementation = s.customImplementation;
        }
        if (s.sort.isDefined()) {
            t.sort = s.getUiSort();
        }
        if (s.sortPrecedence.isDefined()) {
            t.sortPrecedence = s.sortPrecedence;
        }
        if (s.formatValue.isDefined()) {
            t.formatValue = s.formatValue;
        }
        */
        t.attributeType = s.equivalent("RowLinkDerivedAttributeType");
        t.representsRelation = s.equivalent("RelationType");

        log.debug("RowLinkDerivedColumn: " + t.name);
}

@lazy
@greedy
rule RowLinkDerivedColumnIcon
    transform s: JSL!RowLinkDeclaration
    to t: UI!ui::Icon {
        t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/RowLinkDerivedColumnIcon");
    	t.iconName = s.getIconModifier().value.value;
    	t.name = s.name + "DerivedColumnIcon";

    	log.debug("RowLinkDerivedColumnIcon: " + t.name);
}

@lazy
@greedy
rule RowLinkDerivedColumnFilter
    transform s: JSL!RowLinkDeclaration
    to t: UI!ui::Filter {
        t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/RowLinkDerivedColumnFilter");
        t.name = s.name + "Filter";
        t.attributeType = s.equivalent("RowLinkDerivedAttributeType");
        if (s.getLabelModifier().isDefined()) {
            t.label = s.getLabelModifier().value.value;
        }
        log.debug("RowLinkDerivedColumnFilter: " + t.name);
}

@lazy
@greedy
rule RowLinkDerivedAttributeType
    transform s: JSL!RowLinkDeclaration
    to t: UI!ui::data::AttributeType {
        t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/RowLinkDerivedAttributeType");
        t.memberType = UI!ui::data::MemberType#DERIVED;
        t.isReadOnly = true;
        t.name = "_text_" + s.name;
        t.isRequired = false;
        t.isFilterable = true;

        // TODO investigate if it really does not matter which string type we pick
        t.dataType = actorDeclaration.equivalent("Application").dataTypes.selectOne(d | d.isTypeOf(UI!ui::data::StringType));

        s.getContainerEquivalentClassType().attributes.add(t);
        log.debug("Created RowLinkDerivedAttributeType for ViewLinkDeclaration: [" + t.name + "] for [" + s.name + "]");
}

@lazy
rule InlineViewTableButtonGroup
    transform s: JSL!ViewTableDeclaration
    to t: UI!ui::ButtonGroup {
		t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/InlineViewTableButtonGroup");
 		t.name = s.name + "InlineViewTableButtonGroup";
 		t.label = "Actions";

        // TODO add buttons

        if (s.isFilterSupported()) {
            t.buttons.add(s.equivalent("ViewTableDeclarationFilterButton"));
        }
        if (s.isRefreshAllowed()) {
            t.buttons.add(s.equivalent("ViewTableDeclarationRefreshButton"));
        }

        log.debug("InlineViewTableButtonGroup: " + t.name);
}

@lazy
rule InlineViewTableRowButtonGroup
    transform s: JSL!ViewTableDeclaration
    to t: UI!ui::ButtonGroup {
   		t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/InlineViewTableRowButtonGroup");
 		t.name = s.name + "InlineViewTableRowButtonGroup";
 		t.label = "Actions";

    	// TODO add buttons
    	var rowLinks = s.referenceType.members.select(m | m.isTypeOf(JSL!RowLinkDeclaration));

    	if (rowLinks.selectOne(l | l.getDetail().isDefined()).isDefined()) {
    	    t.buttons.add(s.equivalent("ViewTableDeclarationRowOpenPageButton"));
    	}
        if (s.isDeleteAllowed()) {
            t.buttons.add(s.equivalent("ViewTableDeclarationRowDeleteButton"));
        }

        log.debug("TabularReferenceTableRowButtonGroup: " + t.name);
}

@lazy
rule ViewTableDeclarationFilterButton
    transform s: JSL!ViewTableDeclaration
    to t: UI!ui::Button {
	    t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationFilterButton");
 		t.name = s.name + "::Filter";
 		t.icon = s.equivalent("ViewTableDeclarationFilterButtonIcon");
    	t.label = "Filter";
    	t.buttonStyle = "text";
    	t.actionDefinition = s.equivalent("ViewTableDeclarationFilterActionDefinition");

        log.debug("ViewTableDeclarationFilterButton: " + t.name);
}

@lazy
rule ViewTableDeclarationFilterButtonIcon
    transform s: JSL!ViewTableDeclaration
    to t: UI!ui::Icon {
        t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationFilterButtonIcon");
    	t.name = s.name + "FilterIcon";
    	t.iconName = "filter";

    	log.debug("ViewTableDeclarationFilterButtonIcon: " + t.name);
}

@lazy
rule ViewTableDeclarationFilterActionDefinition
    transform s: JSL!ViewTableDeclaration
    to t: UI!ui::FilterActionDefinition {
	    t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationFilterActionDefinition");
 		t.name = s.name + "::Filter";
 		t.targetType = s.referenceType.equivalent("ClassType");

        log.debug("ViewTableDeclarationFilterActionDefinition: " + t.name);
}

@lazy
rule ViewTableDeclarationFilterAction
    transform s: JSL!ViewTableDeclaration
    to t: UI!ui::Action {
	    t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationFilterAction");
 		t.name = s.name + "::Filter";
        t.actionDefinition = s.equivalent("ViewTableDeclarationFilterActionDefinition");

        log.debug("ViewTableDeclarationFilterAction: " + t.name);
}

@lazy
rule ViewTableDeclarationRefreshButton
    transform s: JSL!ViewTableDeclaration
    to t: UI!ui::Button {
	    t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationRefreshButton");
 		t.name = s.name + "::Refresh";
 		t.icon = s.equivalent("ViewTableDeclarationRefreshButtonIcon");
    	t.label = "Refresh";
    	t.buttonStyle = "text";
    	t.actionDefinition = s.equivalent("ViewTableDeclarationRefreshActionDefinition");

        log.debug("ViewTableDeclarationRefreshButton: " + t.name);
}

@lazy
rule ViewTableDeclarationRefreshButtonIcon
    transform s: JSL!ViewTableDeclaration
    to t: UI!ui::Icon {
        t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationRefreshButtonIcon");
    	t.name = s.name + "RefreshIcon";
    	t.iconName = "refresh";

    	log.debug("ViewTableDeclarationRefreshButtonIcon: " + t.name);
}

@lazy
rule ViewTableDeclarationRefreshActionDefinition
    transform s: JSL!ViewTableDeclaration
    to t: UI!ui::RefreshActionDefinition {
	    t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationRefreshActionDefinition");
 		t.name = s.name + "::Refresh";
 		t.targetType = s.referenceType.equivalent("ClassType");

        log.debug("ViewTableDeclarationRefreshActionDefinition: " + t.name);
}

@lazy
rule ViewTableDeclarationRefreshAction
    transform s: JSL!ViewTableDeclaration
    to t: UI!ui::Action {
	    t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationRefreshAction");
 		t.name = s.name + "::Refresh";
        t.actionDefinition = s.equivalent("ViewTableDeclarationRefreshActionDefinition");

        log.debug("ViewTableDeclarationRefreshAction: " + t.name);
}

@lazy
rule ViewTableDeclarationRowOpenPageButton
    transform s: JSL!ViewTableDeclaration
    to t: UI!ui::Button {
	    t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationRowOpenPageButton");
 		t.name = s.name + "::View";
 		t.icon = s.equivalent("ViewTableDeclarationRowOpenPageButtonIcon");
    	t.label = "View";
    	t.buttonStyle = "contained";
    	t.actionDefinition = s.equivalent("ViewTableDeclarationRowOpenPageActionDefinition");

        log.debug("ViewTableDeclarationRowOpenPageButton: " + t.name);
}

@lazy
rule ViewTableDeclarationRowOpenPageButtonIcon
    transform s: JSL!ViewTableDeclaration
    to t: UI!ui::Icon {
        t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationRowOpenPageButtonIcon");
    	t.name = s.name + "RowOpenIcon";
    	t.iconName = "visibility";

    	log.debug("ViewTableDeclarationRowOpenPageButtonIcon: " + t.name);
}

@lazy
rule ViewTableDeclarationRowOpenPageActionDefinition
    transform s: JSL!ViewTableDeclaration
    to t: UI!ui::RowOpenPageActionDefinition {
	    t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationRowOpenPageActionDefinition");
 		t.name = s.name + "::View";
 		t.targetType = s.referenceType.equivalent("ClassType");

 		var rowLinks = s.referenceType.members.select(m | m.isTypeOf(JSL!RowLinkDeclaration));

 		t.linkRelation = rowLinks.selectOne(l | l.getDetail().isDefined()).equivalent("RelationType");

        log.debug("ViewTableDeclarationRowOpenPageActionDefinition: " + t.name);
}

@lazy
rule ViewTableDeclarationOpenPageAction
    transform s: JSL!ViewTableDeclaration
    to t: UI!ui::Action {
        var row = s.referenceType;

        t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationOpenPageAction");

 		t.name = s.name + "::OpenPage";
        t.actionDefinition = s.equivalent("ViewTableDeclarationRowOpenPageActionDefinition");

        t.targetPageDefinition = s.getDetailLink().equivalent("RowLinkPageDefinition");

        log.debug("ViewTableDeclarationOpenPageAction: " + t.name);
}

@lazy
rule ViewTableDeclarationRowDeleteButton
    transform s: JSL!ViewTableDeclaration
    to t: UI!ui::Button {
	    t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationRowDeleteButton");
 		t.name = s.name + "::RowDelete";
 		t.icon = s.equivalent("ViewTableDeclarationRowDeleteButtonIcon");
    	t.label = "Delete";
    	t.buttonStyle = "contained";
    	t.actionDefinition = s.equivalent("ViewTableDeclarationRowDeleteActionDefinition");

        log.debug("ViewTableDeclarationRowDeleteButton: " + t.name);
}

@lazy
rule ViewTableDeclarationRowDeleteButtonIcon
    transform s: JSL!ViewTableDeclaration
    to t: UI!ui::Icon {
        t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationRowDeleteButtonIcon");
    	t.name = s.name + "RowDeleteIcon";
    	t.iconName = "delete_forever";

    	log.debug("ViewTableDeclarationRowDeleteButtonIcon: " + t.name);
}

@lazy
rule ViewTableDeclarationRowDeleteActionDefinition
    transform s: JSL!ViewTableDeclaration
    to t: UI!ui::RowDeleteActionDefinition {
	    t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationRowDeleteActionDefinition");
 		t.name = s.name + "::RowDelete";
 		t.targetType = s.referenceType.equivalent("ClassType");

        log.debug("ViewTableDeclarationRowDeleteActionDefinition: " + t.name);
}

@lazy
rule ViewTableDeclarationRowDeleteAction
    transform s: JSL!ViewTableDeclaration
    to t: UI!ui::Action {
        t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationRowDeleteAction");
 		t.name = s.name + "::RowDelete";
        t.actionDefinition = s.equivalent("ViewTableDeclarationRowDeleteActionDefinition");

        log.debug("ViewTableDeclarationRowDeleteAction: " + t.name);
}

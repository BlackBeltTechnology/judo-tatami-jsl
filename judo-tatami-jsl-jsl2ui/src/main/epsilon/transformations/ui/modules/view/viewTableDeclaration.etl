@abstract
rule AbstractViewTableDeclaration
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::Table {
        guard: rootMenu.containsVisualElement(s)

        t.name = s.name;
        t.relationName = s.name;
        t.label = s.getLabelWithNameFallback();
        if (s.getIconModifier().isDefined()) {
            t.icon = s.equivalent("TableIcon");
        }
        t.row = 1d;
        t.col = s.width.isDefined() ? s.width.asReal() : 12d;
        t.~pos = s.~pos;
        if (t.~pos.isUndefined()) {
            t.~pos = 0;
        }
}

@lazy
@greedy
rule TableIcon
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::Icon {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/TableIcon");
        t.name = s.name + "TableIcon";
        t.iconName = s.getIconModifier().value.value;
}

rule InlineViewTable
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::Table
    extends AbstractViewTableDeclaration {
        guard: rootMenu.containsVisualElement(s)

        var id = rootMenu.name + "/(jsl/" + s.getId() + ")/InlineViewTable";
        t.setId(id);
        t.dataElement = s.transferRelation.target.equivalent("RelationType");

        s.eContainer.uiContainer().children.add(t);

        var columns = s.referenceType.members.select(m | m.isTypeOf(JSL!UIRowColumnDeclaration) and m.referenceType.`primitive`.isDefined());
        // var links = s.referenceType.members.select(m | m.isTypeOf(JSL!RowLinkDeclaration));

        for (column in columns) {
            var col = column.equivalentDiscriminated("TablePrimitiveColumn", id);
            t.columns.add(col);
            if (col.attributeType.isFilterable) {
               t.filters.add(column.equivalentDiscriminated("TablePrimitiveColumnFilter", id));
            }
        }

/*
        for (link in links) {
            if (link.getDetail().isUndefined()) {
                var col = link.equivalentDiscriminated("RowLinkDerivedColumn", id);
                t.columns.add(col);
                if (col.attributeType.isFilterable) {
                   t.filters.add(link.equivalentDiscriminated("RowLinkDerivedColumnFilter", id));
                }
            } else {
                // TODO generate open action from link with detail modifier
            }

        }
*/
        t.tableActionButtonGroup = s.equivalent("InlineViewTableButtonGroup");
        t.rowActionButtonGroup = s.equivalent("InlineViewTableRowButtonGroup");

        // TODO transform selector row per page
        t.selectorRowsPerPage = 10;

        log.debug("InlineViewTable: " + t.name);
}

@lazy
@greedy
rule TablePrimitiveColumn
    transform s: JSL!UIRowColumnDeclaration
    to t: UI!ui::Column {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/TablePrimitiveColumn");
        t.name = s.name;
        t.format = "%s";
        t.label = s.getLabelWithNameFallback();
        if (s.getIconModifier().isDefined()) {
            t.icon = s.equivalent("ColumnIcon");
        }
        t.width = s.getWidth().isDefined() ? s.getWidth().value : "120";
        t.attributeType = s.getTransferFieldDeclarationEquivalent();

        log.debug("TablePrimitiveColumn: " + t.name);
}

@lazy
@greedy
rule ColumnIcon
    transform s: JSL!UIRowColumnDeclaration
    to t: UI!ui::Icon {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ColumnIcon");
        t.iconName = s.getIconModifier().value.value;
        t.name = s.name + "FieldIcon";
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ColumnIcon");

        log.debug("ColumnIcon: " + t.name);
}

@lazy
@greedy
rule TablePrimitiveColumnFilter
    transform s: JSL!UIRowColumnDeclaration
    to t: UI!ui::Filter {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/TablePrimitiveColumnFilter");
        t.name = s.name + "Filter";
        t.attributeType = s.getTransferFieldDeclarationEquivalent();
        t.label = s.getLabelWithNameFallback();
        log.debug("TablePrimitiveColumnFilter: " + t.name);
}
/*
@lazy
@greedy
rule RowLinkDerivedColumn
    transform s: JSL!RowLinkDeclaration
    to t: UI!ui::Column {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/RowLinkDerivedColumn");
        // we keep the name of the link it self because the relation won't be present in the visual elements only in the data model
        t.name = s.name;
        t.format = "%s";
        t.label = s.getLabelWithNameFallback();
        if (s.getIconModifier().isDefined()) {
            t.icon = s.equivalent("RowLinkDerivedColumnIcon");
        }
        t.width = s.getWidth().isDefined() ? s.getWidth().value : "120";
        t.attributeType = s.equivalent("RowLinkDerivedAttributeType");
        t.representsRelation = s.equivalent("RelationType");

        log.debug("RowLinkDerivedColumn: " + t.name);
}

@lazy
@greedy
rule RowLinkDerivedColumnIcon
    transform s: JSL!RowLinkDeclaration
    to t: UI!ui::Icon {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/RowLinkDerivedColumnIcon");
        t.iconName = s.getIconModifier().value.value;
        t.name = s.name + "DerivedColumnIcon";

        log.debug("RowLinkDerivedColumnIcon: " + t.name);
}

@lazy
@greedy
rule RowLinkDerivedColumnFilter
    transform s: JSL!RowLinkDeclaration
    to t: UI!ui::Filter {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/RowLinkDerivedColumnFilter");
        t.name = s.name + "Filter";
        t.attributeType = s.equivalent("RowLinkDerivedAttributeType");
        t.label = s.getLabelWithNameFallback();
        log.debug("RowLinkDerivedColumnFilter: " + t.name);
}

@lazy
@greedy
rule RowLinkDerivedAttributeType
    transform s: JSL!RowLinkDeclaration
    to t: UI!ui::data::AttributeType {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/RowLinkDerivedAttributeType");
        t.memberType = UI!ui::data::MemberType#DERIVED;
        t.isReadOnly = true;
        t.name = "_text_" + s.name;
        t.isRequired = false;
        t.isFilterable = true;

        // TODO investigate if it really does not matter which string type we pick
        t.dataType = rootMenu.equivalent("Application").dataTypes.selectOne(d | d.isTypeOf(UI!ui::data::StringType));

        s.getContainerEquivalentClassType().attributes.add(t);
        log.debug("Created RowLinkDerivedAttributeType for ViewLinkDeclaration: [" + t.name + "] for [" + s.name + "]");
}
*/
@lazy
rule InlineViewTableButtonGroup
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::ButtonGroup {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/InlineViewTableButtonGroup");
        t.name = s.name + "::InlineViewTableButtonGroup";
        t.label = "Actions";

        // TODO add buttons

        var relation = s.transferRelation.target;

        if (relation.isFilterSupported()) {
            t.buttons.add(s.equivalent("ViewTableDeclarationFilterButton"));
        }
        if (relation.isRefreshAllowed()) {
            t.buttons.add(s.equivalent("ViewTableDeclarationRefreshButton"));
        }
        if (relation.isCreateAllowed()) {
            t.buttons.add(s.equivalent("ViewTableDeclarationOpenCreateButton"));
        }
        if (relation.isAddReferenceAllowed()) {
            t.buttons.add(s.equivalent("ViewTableDeclarationOpenAddSelectorButton"));
        }
        if (relation.isRemoveReferenceAllowed()) {
            t.buttons.add(s.equivalent("ViewTableDeclarationClearButton"));
            t.buttons.add(s.equivalent("ViewTableDeclarationBulkRemoveButton"));
        }

        log.debug("InlineViewTableButtonGroup: " + t.name);
}

@lazy
rule InlineViewTableRowButtonGroup
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::ButtonGroup {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/InlineViewTableRowButtonGroup");
        t.name = s.name + "InlineViewTableRowButtonGroup";
        t.label = "Actions";

        // TODO add buttons

        if (s.getUpdateViewModifier().isDefined()) {
            t.buttons.add(s.equivalent("ViewTableDeclarationOpenPageButton"));
        }
        if (s.transferRelation.target.isDeleteAllowed()) {
            t.buttons.add(s.equivalent("ViewTableDeclarationRowDeleteButton"));
        }

        log.debug("TabularReferenceTableRowButtonGroup: " + t.name);
}

@lazy
rule ViewTableDeclarationFilterButton
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::Button {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationFilterButton");
        t.name = s.name + "::Filter";
        t.icon = s.equivalent("ViewTableDeclarationFilterButtonIcon");
        t.label = "Filter";
        t.buttonStyle = "text";
        t.actionDefinition = s.equivalent("ViewTableDeclarationFilterActionDefinition");

        log.debug("ViewTableDeclarationFilterButton: " + t.name);
}

@lazy
rule ViewTableDeclarationFilterButtonIcon
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::Icon {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationFilterButtonIcon");
        t.name = s.name + "FilterIcon";
        t.iconName = "filter";

        log.debug("ViewTableDeclarationFilterButtonIcon: " + t.name);
}

@lazy
rule ViewTableDeclarationFilterActionDefinition
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::FilterActionDefinition {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationFilterActionDefinition");
        t.name = s.name + "::Filter";
        t.targetType = s.referenceType.equivalent("ClassType");

        log.debug("ViewTableDeclarationFilterActionDefinition: " + t.name);
}

@lazy
rule ViewTableDeclarationRefreshButton
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::Button {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationRefreshButton");
        t.name = s.name + "::Refresh";
        t.icon = s.equivalent("ViewTableDeclarationRefreshButtonIcon");
        t.label = "Refresh";
        t.buttonStyle = "text";
        t.actionDefinition = s.equivalent("ViewTableDeclarationRefreshActionDefinition");

        log.debug("ViewTableDeclarationRefreshButton: " + t.name);
}

@lazy
rule ViewTableDeclarationRefreshButtonIcon
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::Icon {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationRefreshButtonIcon");
        t.name = s.name + "RefreshIcon";
        t.iconName = "refresh";

        log.debug("ViewTableDeclarationRefreshButtonIcon: " + t.name);
}

@lazy
rule ViewTableDeclarationRefreshActionDefinition
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::RefreshActionDefinition {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationRefreshActionDefinition");
        t.name = s.name + "::Refresh";
        t.targetType = s.referenceType.equivalent("ClassType");

        log.debug("ViewTableDeclarationRefreshActionDefinition: " + t.name);
}

@lazy
rule ViewTableDeclarationOpenCreateButton
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::Button {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationOpenCreateButton");
        t.name = s.name + "::OpenCreate";
        t.icon = s.equivalent("ViewTableDeclarationOpenCreateButtonIcon");
        t.label = "Create";
        t.buttonStyle = "text";
        t.actionDefinition = s.equivalent("ViewTableDeclarationOpenCreateActionDefinition");

        log.debug("ViewTableDeclarationOpenCreateButton: " + t.name);
}

@lazy
rule ViewTableDeclarationOpenCreateButtonIcon
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::Icon {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationOpenCreateButtonIcon");
        t.name = s.name + "OpenCreateIcon";
        t.iconName = "file-document-plus";

        log.debug("ViewTableDeclarationFilterButtonIcon: " + t.name);
}

@lazy
rule ViewTableDeclarationOpenCreateActionDefinition
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::OpenCreateFormActionDefinition {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationOpenCreateActionDefinition");
        t.name = s.name + "::OpenCreate";
        t.targetType = s.referenceType.equivalent("ClassType");

        log.debug("ViewTableDeclarationOpenCreateActionDefinition: " + t.name);
}

@lazy
rule ViewTableDeclarationOpenPageButton
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::Button {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationOpenPageButton");
        t.name = s.name + "::View";
        t.icon = s.equivalent("ViewTableDeclarationOpenPageButtonIcon");
        t.label = "View";
        t.buttonStyle = "contained";
        t.actionDefinition = s.equivalent("ViewTableDeclarationOpenPageActionDefinition");

        log.debug("ViewTableDeclarationOpenPageButton: " + t.name);
}

@lazy
rule ViewTableDeclarationOpenPageButtonIcon
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::Icon {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationOpenPageButtonIcon");
        t.name = s.name + "OpenPageIcon";
        t.iconName = "visibility";

        log.debug("ViewTableDeclarationOpenPageButtonIcon: " + t.name);
}

@lazy
rule ViewTableDeclarationOpenPageActionDefinition
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::OpenPageActionDefinition {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationOpenPageActionDefinition");
        t.name = s.name + "::View";
        t.targetType = s.transferRelation.target.referenceType.equivalent("ClassType");

        log.debug("ViewTableDeclarationOpenPageActionDefinition: " + t.name);
}

@lazy
rule ViewTableDeclarationRowDeleteButton
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::Button {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationRowDeleteButton");
         t.name = s.name + "::RowDelete";
         t.icon = s.equivalent("ViewTableDeclarationRowDeleteButtonIcon");
        t.label = "Delete";
        t.buttonStyle = "contained";
        t.actionDefinition = s.equivalent("ViewTableDeclarationRowDeleteActionDefinition");

        log.debug("ViewTableDeclarationRowDeleteButton: " + t.name);
}

@lazy
rule ViewTableDeclarationRowDeleteButtonIcon
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::Icon {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationRowDeleteButtonIcon");
        t.name = s.name + "RowDeleteIcon";
        t.iconName = "delete_forever";

        log.debug("ViewTableDeclarationRowDeleteButtonIcon: " + t.name);
}

@lazy
rule ViewTableDeclarationRowDeleteActionDefinition
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::RowDeleteActionDefinition {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationRowDeleteActionDefinition");
         t.name = s.name + "::RowDelete";
         t.targetType = s.referenceType.equivalent("ClassType");

        log.debug("ViewTableDeclarationRowDeleteActionDefinition: " + t.name);
}

@lazy
rule ViewTableDeclarationOpenAddSelectorButton
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::Button {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationOpenAddSelectorButton");
        t.name = s.name + "::OpenAddSelector";
        t.icon = s.equivalent("ViewTableDeclarationOpenAddSelectorButtonIcon");
        t.label = "Add";
        t.buttonStyle = "text";
        t.actionDefinition = s.equivalent("ViewTableDeclarationOpenAddSelectorActionDefinition");

        log.debug("ViewTableDeclarationOpenAddSelectorButton: " + t.name);
}

@lazy
rule ViewTableDeclarationOpenAddSelectorButtonIcon
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::Icon {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationOpenAddSelectorButtonIcon");
        t.name = s.name + "OpenAddSelectorIcon";
        t.iconName = "attachment-plus";

        log.debug("ViewTableDeclarationOpenAddSelectorButtonIcon: " + t.name);
}

@lazy
rule ViewTableDeclarationOpenAddSelectorActionDefinition
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::OpenAddSelectorActionDefinition {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationOpenAddSelectorActionDefinition");
        t.name = s.name + "::OpenAddSelector";
        t.isContainedRelationAction = true;
        t.selectorFor = s.equivalent("ViewTableDeclarationAddSelectorActionDefinition");

        log.debug("ViewTableDeclarationOpenAddSelectorActionDefinition: " + t.name);
}

@lazy
rule ViewTableDeclarationBulkRemoveButton
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::Button {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationBulkRemoveButton");
        t.name = s.name + "::BulkRemove";
        t.icon = s.equivalent("ViewTableDeclarationBulkRemoveButtonIcon");
        t.label = "Remove";
        t.buttonStyle = "text";
        t.actionDefinition = s.equivalent("ViewTableDeclarationBulkRemoveActionDefinition");

        log.debug("ViewTableDeclarationBulkRemoveButton: " + t.name);
}

@lazy
rule ViewTableDeclarationBulkRemoveButtonIcon
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::Icon {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationBulkRemoveButtonIcon");
        t.name = s.name + "RemoveIcon";
        t.iconName = "link-off";

        log.debug("ViewTableDeclarationBulkRemoveButtonIcon: " + t.name);
}

@lazy
rule ViewTableDeclarationBulkRemoveActionDefinition
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::BulkRemoveActionDefinition {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationBulkRemoveActionDefinition");
        t.name = s.name + "::BulkRemove";
        t.targetType = s.referenceType.equivalent("ClassType");
        t.isContainedRelationAction = true;
        t.isBulk = true;

        log.debug("ViewTableDeclarationBulkRemoveActionDefinition: " + t.name);
}

@lazy
rule ViewTableDeclarationClearButton
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::Button {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationClearButton");
        t.name = s.name + "::Clear";
        t.icon = s.equivalent("ViewTableDeclarationClearButtonIcon");
        t.label = "Clear";
        t.buttonStyle = "text";
        t.actionDefinition = s.equivalent("ViewTableDeclarationClearActionDefinition");

        log.debug("ViewTableDeclarationClearButton: " + t.name);
}

@lazy
rule ViewTableDeclarationClearButtonIcon
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::Icon {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationClearButtonIcon");
        t.name = s.name + "ClearIcon";
        t.iconName = "link-off";

        log.debug("ViewTableDeclarationClearButtonIcon: " + t.name);
}

@lazy
rule ViewTableDeclarationClearActionDefinition
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::ClearActionDefinition {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationClearActionDefinition");
        t.name = s.name + "::Clear";
        t.isContainedRelationAction = true;

        log.debug("ViewTableDeclarationClearActionDefinition: " + t.name);
}

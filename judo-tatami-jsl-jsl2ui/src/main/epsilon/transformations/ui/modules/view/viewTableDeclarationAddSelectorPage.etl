@lazy
rule ViewTableDeclarationAddSelectorPageDefinition
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::PageDefinition {

    t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationAddSelectorPageDefinition");

    t.name = s.getFqName() + "::AddSelectorPage";

    t.container = s.equivalent("ViewTableDeclarationAddSelectorPageContainer");
    t.dataElement = s.transferRelation.target.equivalent("RelationType");
    t.openInDialog = true;
    t.dialogSize = UI!ui::DialogSize#MD;

    t.actions.add(s.equivalent("ViewTableDeclarationAddSelectorAddAction"));
    t.actions.add(s.equivalent("ViewTableDeclarationAddSelectorBackAction"));
    t.actions.add(s.equivalent("ViewTableDeclarationAddSelectorTableFilterAction"));
    t.actions.add(s.equivalent("ViewTableDeclarationAddSelectorTableRangeAction"));

    rootMenu.equivalent("Application").pages.add(t);

    log.debug("ViewTableDeclarationAddSelectorPageDefinition: " + t.name);
}

@lazy
rule ViewTableDeclarationAddSelectorPageContainer
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::PageContainer {

        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationAddSelectorPageContainer");

        t.name = s.getFqName() + "::AddSelector::PageContainer";
        t.label = s.getLabelWithNameFallback();
        t.titleFrom = UI!ui::TitleFrom#LABEL;
        t.type = UI!ui::PageContainerType#TABLE;
        t.onInit = s.equivalent("ViewTableDeclarationAddSelectorTableRangeActionDefinition");

        t.children.add(s.equivalent("ViewTableDeclarationAddSelectorTableAddSelectorVisualElement"));
        t.actionButtonGroup = s.equivalent("ViewTableDeclarationAddSelectorTableAddSelectorButtonGroup");
        t.dataElement = s.referenceType.map.transfer.equivalent("ClassType");
        t.isSelector = true;
        t.isRelationSelector = true;

        rootMenu.equivalent("Application").pageContainers.add(t);

        log.debug("ViewTableDeclarationAddSelectorPageContainer: " + t.name);
}

@lazy
rule ViewTableDeclarationAddSelectorTableRangeActionDefinition
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::SelectorRangeActionDefinition {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationAddSelectorTableRangeActionDefinition");

        t.name = s.getFqName() + "::AddSelector::Table::Range";
        t.targetType = s.referenceType.equivalent("ClassType");

        log.debug("ViewTableDeclarationAddSelectorTableRangeActionDefinition: " + t.name);
}

@lazy
rule ViewTableDeclarationAddSelectorTableAddSelectorButtonGroup
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::ButtonGroup {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationAddSelectorTableAddSelectorButtonGroup");
        t.name = s.getFqName() + "::AddSelectorTableAddSelectorButtonGroup";
        t.label = "Actions";

        t.buttons.add(s.equivalent("ViewTableDeclarationAddSelectorTableAddSelectorBackButton"));
        t.buttons.add(s.equivalent("ViewTableDeclarationAddSelectorTableAddSelectorAddButton"));

        log.debug("ViewTableDeclarationAddSelectorTableAddSelectorButtonGroup: " + t.name);
}

@lazy
rule ViewTableDeclarationAddSelectorTableAddSelectorBackButton
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::Button {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationAddSelectorTableAddSelectorBackButton");
        t.name = s.getFqName() + "::Back";
        t.label = "Back";
        t.buttonStyle = "text";
        t.icon = "arrow-left".createSyntheticIcon(s.getId(), s.getFqName());
        t.actionDefinition = s.equivalent("ViewTableDeclarationAddSelectorTableBackActionDefinition");

        log.debug("ViewTableDeclarationAddSelectorTableAddSelectorBackButton: " + t.name);
}

@lazy
rule ViewTableDeclarationAddSelectorTableBackActionDefinition
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::BackActionDefinition {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationAddSelectorTableBackActionDefinition");
        t.name = s.getFqName() + "::Back";
        log.debug("ViewTableDeclarationAddSelectorTableBackActionDefinition: " + t.name);
}

@lazy
rule ViewTableDeclarationAddSelectorTableAddSelectorAddButton
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::Button {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationAddSelectorTableAddSelectorAddButton");
        t.name = s.getFqName() + "::Add";
        t.label = "Add";
        t.buttonStyle = "contained";
        t.icon = "attachment-plus".createSyntheticIcon(s.getId(), s.getFqName());
        t.actionDefinition = s.equivalent("ViewTableDeclarationAddSelectorTableAddSelectorAddActionDefinition");

        log.debug("ViewTableDeclarationAddSelectorTableAddSelectorAddButton: " + t.name);
}

@lazy
rule ViewTableDeclarationAddSelectorTableAddSelectorAddActionDefinition
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::AddActionDefinition {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationAddSelectorTableAddSelectorAddActionDefinition");
        t.name = s.getFqName() + "::Add";
        t.targetType = s.referenceType.equivalent("ClassType");
        log.debug("ViewTableDeclarationAddSelectorTableAddSelectorAddActionDefinition: " + t.name);
}

@lazy
rule ViewTableDeclarationAddSelectorTableAddSelectorVisualElement
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::Flex {
        t.~pos = 0;
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationAddSelectorTableAddSelectorVisualElement");
        t.name = s.name;
        t.direction = UI!Axis#VERTICAL;
        t.mainAxisAlignment = UI!ui::MainAxisAlignment#START;
        t.crossAxisAlignment = UI!ui::CrossAxisAlignment#STRETCH;
        t.col = 12d;
        t.children.add(s.equivalent("ViewTableDeclarationAddSelectorTableTable"));
        t.frame = s.equivalent("ViewTableDeclarationAddSelectorTableAddSelectorFrame");

        log.debug("ViewTableDeclarationAddSelectorTableAddSelectorVisualElement: " + t.name);
}

@lazy
rule ViewTableDeclarationAddSelectorTableAddSelectorFrame
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::Frame {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationAddSelectorTableAddSelectorFrame");
}

@lazy
rule ViewTableDeclarationAddSelectorTableTable
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::Table {
        var id = rootMenu.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationAddSelectorTableTable";
        t.setId(id);
        t.col = 12d;
        t.label = s.getLabelWithNameFallback();
        t.isSelectorTable = true;
        t.isRelationSelectorTable = true;
        t.allowSelectMultiple = true;
        t.name = s.name + "::Add::Selector";
        t.relationName = s.name;
        t.dataElement = s.referenceType.map.transfer.equivalent("ClassType");
        t.tableActionButtonGroup = s.equivalent("ViewTableDeclarationAddSelectorTableTableButtonGroup");
        t.~pos = s.~pos;
        t.showTotalCount = false;
        t.selectorRowsPerPage = 10;

        if (s.getRows().isDefined()) {
            t.rowsPerPage = s.getRows().value.asInteger();
        } else {
            t.rowsPerPage = 10;
        }
        if (t.~pos.isUndefined()) {
            t.~pos = 0;
        }

        // TODO eventually selector should work?
        var rowDeclaration = s.getSelectorTableModifier().row;

        var columns = rowDeclaration.members.select(m | m.isTypeOf(JSL!UIRowColumnDeclaration) and m.referenceType.`primitive`.isDefined());
        // var links = rowDeclaration.members.select(m | m.isTypeOf(JSL!RowLinkDeclaration));

        for (column in columns) {
            var col = column.equivalentDiscriminated("TablePrimitiveColumn", id);
            t.columns.add(col);
            if (col.attributeType.isFilterable) {
               t.filters.add(column.equivalentDiscriminated("TablePrimitiveColumnFilter", id));
            }
        }
/*
        for (link in links) {
            if (link.getDetail().isUndefined()) {
                var col = link.equivalentDiscriminated("RowLinkDerivedColumn", id);
                t.columns.add(col);
                if (col.attributeType.isFilterable) {
                   t.filters.add(link.equivalentDiscriminated("RowLinkDerivedColumnFilter", id));
                }
            } else {
                // TODO generate open action from link with detail modifier
            }

        }
*/
        log.debug("ViewTableDeclarationAddSelectorTableTable: " + t.name);
}

@lazy
rule ViewTableDeclarationAddSelectorTableTableButtonGroup
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::ButtonGroup {
	    t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationAddSelectorTableTableButtonGroup");
 		t.name = s.getFqName() + "::AddSelectorTableActions";
 		t.label = "Actions";

    	t.buttons.add(s.equivalent("ViewTableDeclarationAddSelectorTableTableFilterButton"));
    	t.buttons.add(s.equivalent("TransferObjectTableAddSelectorTableRefreshButton"));

        log.debug("ViewTableDeclarationAddSelectorTableTableButtonGroup: " + t.name);
}

@lazy
rule ViewTableDeclarationAddSelectorTableTableFilterButton
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::Button {
	    t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationAddSelectorTableTableFilterButton");
 		t.name = s.getFqName() + "::AddSelector::Table::Filter";
    	t.label = "Set Filters";
    	t.buttonStyle = "text";
    	t.icon = "filter".createSyntheticIcon(s.getId(), s.getFqName());
    	t.actionDefinition = s.equivalent("ViewTableDeclarationAddSelectorTableTableFilterActionDefinition");

        log.debug("ViewTableDeclarationAddSelectorTableTableFilterButton: " + t.name);
}

@lazy
rule ViewTableDeclarationAddSelectorTableTableFilterActionDefinition
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::FilterActionDefinition {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationAddSelectorTableTableFilterActionDefinition");
        t.name = s.getFqName() + "::Table::Filter";
        log.debug("ViewTableDeclarationAddSelectorTableTableFilterActionDefinition: " + t.name);
}

@lazy
rule TransferObjectTableAddSelectorTableRefreshButton
    transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::Button {
	    t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/TransferObjectTableAddSelectorTableRefreshButton");
 		t.name = s.getFqName() + "::AddSelector::Table::Refresh";
    	t.label = "Refresh";
    	t.buttonStyle = "text";
    	t.icon = "refresh".createSyntheticIcon(s.getId(), s.getFqName());
    	t.actionDefinition = s.equivalent("ViewTableDeclarationAddSelectorTableRangeActionDefinition");

        log.debug("TransferObjectTableAddSelectorTableRefreshButton: " + t.name);
}

@lazy
rule ViewTableDeclarationAddSelectorAddAction
	transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::Action {
	    t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationAddSelectorAddAction");
 		t.name = s.getFqName() + "::AddSelector::Add";
        t.ownerDataElement = s.transferRelation.target.equivalent("RelationType");
        t.actionDefinition = s.equivalent("ViewTableDeclarationAddSelectorTableAddSelectorAddActionDefinition");

        log.debug("ViewTableDeclarationAddSelectorAddAction: " + t.name);
}

@lazy
rule ViewTableDeclarationAddSelectorBackAction
	transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::Action {
	    t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationAddSelectorBackAction");
 		t.name = s.getFqName() + "::AddSelector::Back";
        t.ownerDataElement = s.transferRelation.target.equivalent("RelationType");
        t.actionDefinition = s.equivalent("ViewTableDeclarationAddSelectorTableBackActionDefinition");

        log.debug("ViewTableDeclarationAddSelectorBackAction: " + t.name);
}

@lazy
rule ViewTableDeclarationAddSelectorTableFilterAction
	transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::Action {
	    t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationAddSelectorTableFilterAction");
 		t.name = s.getFqName() + "::AddSelector::Table::Filter";
        t.ownerDataElement = s.transferRelation.target.equivalent("RelationType");
        t.targetDataElement = s.transferRelation.target.equivalent("RelationType");
        t.actionDefinition = s.equivalent("ViewTableDeclarationAddSelectorTableTableFilterActionDefinition");

        log.debug("ViewTableDeclarationAddSelectorTableFilterAction: " + t.name);
}

@lazy
rule ViewTableDeclarationAddSelectorTableRangeAction
	transform s: JSL!UIViewTableDeclaration
    to t: UI!ui::Action {
	    t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewTableDeclarationAddSelectorTableRangeAction");
 		t.name = s.getFqName() + "::AddSelector::Table::Range";
        t.ownerDataElement = s.transferRelation.target.equivalent("RelationType");
        t.targetDataElement = s.transferRelation.target.equivalent("RelationType");
        t.actionDefinition = s.equivalent("ViewTableDeclarationAddSelectorTableRangeActionDefinition");

        log.debug("ViewTableDeclarationAddSelectorTableRangeAction: " + t.name);
}

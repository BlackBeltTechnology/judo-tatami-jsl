rule Application
    transform s: JSL!UIMenuDeclaration
    to t: UI!ui::Application {
        guard: s = rootMenu

        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/Application");

        log.debug("Application: " + s.name);


        //t.version = esmUtils.getModel(s).version;

        t.name = rootMenu.map.actor.name;
        t.modelName = defaultModelName;

        t.actor = s.map.actor.equivalent("Actor");
        t.dataElements.add(t.actor);

        var identity = s.map.actor.getIdentityTransferDeclaration();

        if (identity.isDefined()) {
            t.principal = identity.equivalent("Actor");
        }

        //if (s.defaultLanguage.isDefined()) {
        t.defaultLanguage = "en-US";
        //}

        //if (s.applicationLogo.isDefined()) {
        t.logo = "judo-color-logo.png";
        //}

        t.navigationController = s.equivalent("NavigationController");
        t.theme = s.equivalent("Theme");
}

@lazy
rule Theme
    transform s: JSL!UIMenuDeclaration
    to t: UI!ui::Theme {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/Theme");
        t.textPrimaryColor = "#17191DFF";
        t.textSecondaryColor = "#434448FF";
        t.primaryColor = "#3C4166FF";
        t.secondaryColor = "#E7501DFF";
        t.subtitleColor = "#8C8C8C";
        t.backgroundColor = "#FAFAFAFF";
}

@lazy
rule NavigationController
    transform s: JSL!UIMenuDeclaration
    to t : UI!ui::NavigationController {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/NavigationController");
        t.name = s.getFqName() + "::NavigationController";

        log.debug("Create NavigationController: " + t.name);
}

rule EmptyDashboardPageDefinition
    transform s: JSL!UIMenuDeclaration
    to t: UI!ui::PageDefinition {
        guard: s = rootMenu

        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/EmptyDashboardPageDefinition");
        t.name = s.getFqName() + "::DashboardPage";
        t.dashboard = true;
        t.dataElement = s.map.actor.equivalent("Actor");

        t.container = s.equivalent("EmptyDashboardPageContainer");
        rootMenu.equivalent("Application").pages.add(t);

        log.debug("EmptyDashboardPageDefinition [" + t.name + "]");
}

rule EmptyDashboardPageContainer
    transform s: JSL!UIMenuDeclaration
    to t: UI!ui::PageContainer {
        guard: s = rootMenu

        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/EmptyDashboardPageContainer");
        t.name = s.getFqName() + "::Dashboard";
        t.label = "Dashboard";
        t.type = UI!ui::PageContainerType#VIEW;
        t.dataElement = s.map.actor.equivalent("Actor");

        rootMenu.equivalent("Application").pageContainers.add(t);

        log.debug("EmptyDashboardPageContainer [" + t.name + "]");
}

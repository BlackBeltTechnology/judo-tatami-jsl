/*
rule RowLinkPageDefinition
    transform s: JSL!RowLinkDeclaration
    to t: UI!ui::PageDefinition {
        guard: actorDeclaration.getAllRelations().contains(s)

        t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/RowLinkPageDefinition");

        t.name = s.getFqName() + "::ViewPage";
        t.container = s.referenceType.equivalent("TransferDeclarationPageContainer");

        actorDeclaration.equivalent("Application").pages.add(t);

        t.dataElement = s.equivalent("RelationType");

        var relations = s.referenceType.getDirectRelations();

        for (link in relations.select(r | r.isKindOf(JSL!UIViewLinkDeclaration))) {
            t.actions.add(link.equivalentDiscriminated("ViewLinkDeclarationOpenPageAction", "RowLinkPageDefinition"));

            if (link.isRefreshAllowed() and not link.isEager()) {
                t.actions.add(link.equivalentDiscriminated("ViewLinkDeclarationRefreshAction", "RowLinkPageDefinition"));
            }
            if (link.isCreateAllowed()) {
                t.actions.add(link.equivalentDiscriminated("ViewLinkDeclarationOpenFormAction", "RowLinkPageDefinition"));
            }
            if (link.isDeleteAllowed()) {
                t.actions.add(link.equivalentDiscriminated("ViewLinkDeclarationRowDeleteAction", "RowLinkPageDefinition"));
            }
            if (link.isSetReferenceAllowed()) {
                t.actions.add(link.equivalentDiscriminated("ViewLinkDeclarationOpenSetSelectorDialogAction", "RowLinkPageDefinition"));
            }
            if (link.isUnsetReferenceAllowed()) {
                t.actions.add(link.equivalentDiscriminated("ViewLinkDeclarationUnsetAction", "RowLinkPageDefinition"));
            }
        }

        for (table in relations.select(r | r.isKindOf(JSL!UIViewTableDeclaration))) {
            var detailLink = table.getDetailLink();

            if (table.isFilterSupported()) {
                t.actions.add(table.equivalentDiscriminated("ViewTableDeclarationFilterAction", "RowLinkPageDefinition"));
            }
            if (table.isRefreshAllowed()) {
                t.actions.add(table.equivalentDiscriminated("ViewTableDeclarationRefreshAction", "RowLinkPageDefinition"));
            }
            if (table.isCreateAllowed()) {
                t.actions.add(table.equivalentDiscriminated("ViewTableDeclarationOpenCreateAction", "RowLinkPageDefinition"));
            }
            if (table.isDeleteAllowed()) {
                t.actions.add(table.equivalentDiscriminated("ViewTableDeclarationRowDeleteAction", "RowLinkPageDefinition"));
            }
            if (table.isAddReferenceAllowed()) {
                t.actions.add(table.equivalentDiscriminated("ViewTableDeclarationOpenAddSelectorAction", "RowLinkPageDefinition"));
            }
            if (table.isRemoveReferenceAllowed()) {
                t.actions.add(table.equivalentDiscriminated("ViewTableDeclarationClearAction", "RowLinkPageDefinition"));
                t.actions.add(table.equivalentDiscriminated("ViewTableDeclarationBulkRemoveAction", "RowLinkPageDefinition"));
            }
            if (detailLink.isDefined()) {
                t.actions.add(table.equivalentDiscriminated("ViewTableDeclarationOpenPageAction", "RowLinkPageDefinition"));
            }
        }

        t.actions.add(s.equivalent("RowLinkPageDefinitionBackAction"));
        if (s.isRefreshAllowed()) {
            t.actions.add(s.equivalent("RowLinkPageDefinitionRefreshAction"));
        }
        if (s.isUpdateAllowed()) {
            t.actions.add(s.equivalent("RowLinkPageDefinitionUpdateAction"));
        }
        if (s.isDeleteAllowed()) {
            t.actions.add(s.equivalent("RowLinkPageDefinitionDeleteAction"));
        }

        log.debug("Create RowLinkPageDefinition: " + t.name);
}

@lazy
@greedy
rule RowLinkPageDefinitionRefreshAction
    transform s: JSL!RowLinkDeclaration
    to t: UI!ui::Action {
        guard: actorDeclaration.getAllRelations().contains(s)

        t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/RowLinkPageDefinitionRefreshAction");
        t.name = s.name + "::Refresh";
        t.actionDefinition = s.referenceType.equivalent("TransferDeclarationRefreshActionDefinition");

        log.debug("RowLinkPageDefinitionRefreshAction: " + t.name);
}

@lazy
@greedy
rule RowLinkPageDefinitionBackAction
    transform s: JSL!RowLinkDeclaration
    to t: UI!ui::Action {
        guard: actorDeclaration.getAllRelations().contains(s)

        t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/RowLinkPageDefinitionBackAction");
        t.name = s.name + "::Back";
        t.actionDefinition = s.referenceType.equivalent("TransferDeclarationBackActionDefinition");

        log.debug("RowLinkPageDefinitionBackAction: " + t.name);
}

@lazy
@greedy
rule RowLinkPageDefinitionUpdateAction
    transform s: JSL!RowLinkDeclaration
    to t: UI!ui::Action {
        t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/RowLinkPageDefinitionUpdateAction");

        t.name = s.name + "::Update";
        t.actionDefinition = s.referenceType.equivalent("TransferDeclarationUpdateActionDefinition");

        log.debug("RowLinkPageDefinitionUpdateAction: " + t.name);
}

@lazy
@greedy
rule RowLinkPageDefinitionDeleteAction
    transform s: JSL!RowLinkDeclaration
    to t: UI!ui::Action {
        t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/RowLinkPageDefinitionDeleteAction");

        t.name = s.name + "::Delete";
        t.actionDefinition = s.referenceType.equivalent("TransferDeclarationDeleteActionDefinition");

        log.debug("RowLinkPageDefinitionDeleteAction: " + t.name);
}
*/

rule FormPageContainer
    transform s: JSL!UIViewDeclaration
    to t: UI!ui::PageContainer {
        guard: rootMenu.containsVisualElement(s) and s.form.isDefined() and s.form

        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/FormPageContainer");
        if (t.~pos.isUndefined()) {
            t.~pos = 0;
        }
        t.label = s.getLabelWithNameFallback();
        t.name = s.getFqName() + "::Create::PageContainer";
        t.children.add(s.equivalent("FormPageContainerVisualElement"));
        t.actionButtonGroup = s.equivalent("FormPageContainerButtonGroup");
        t.dataElement = s.map.transfer.equivalent("ClassType");
        t.type = UI!ui::PageContainerType#FORM;
        t.onInit = s.equivalent("FormPageContainerGetTemplateActionDefinition");
        t.templateAction = s.equivalent("FormPageContainerGetTemplateActionDefinition");

        rootMenu.equivalent("Application").pageContainers.add(t);

        log.debug("Create FormPageContainer: " + t.name);
}

@lazy
rule FormPageContainerVisualElement
    transform s: JSL!UIViewDeclaration
    to t: UI!ui::Flex {
        guard: rootMenu.containsVisualElement(s) and s.form.isDefined() and s.form

        t.~pos = 0;
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/FormPageContainerVisualElement");
        t.name = s.name;
        t.direction = UI!Axis#VERTICAL;
        t.mainAxisAlignment = UI!ui::MainAxisAlignment#START;
        t.crossAxisAlignment = UI!ui::CrossAxisAlignment#STRETCH;
        t.col = 12d;

        log.debug("FormPageContainerVisualElement: " + t.name);
}

@lazy
rule FormPageContainerButtonGroup
    transform s: JSL!UIViewDeclaration
    to t: UI!ui::ButtonGroup {
		var id = rootMenu.name + "/(jsl/" + s.getId() + ")/FormPageContainerButtonGroup";
	    t.setId(id);
 		t.name = s.getFqName() + "::PageActions";
 		t.label = "Actions";
 		t.buttons.add(s.equivalent("FormPageContainerBackButton"));
 		t.buttons.add(s.equivalent("FormPageContainerCreateButton"));

        log.debug("FormPageContainerButtonGroup: " + t.name);
}

@lazy
rule FormPageContainerBackActionDefinition
    transform s: JSL!UIViewDeclaration
    to t: UI!ui::BackActionDefinition  {
	    t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/FormPageContainerBackActionDefinition");
 		t.name = s.getFqName() + "::Back";
        log.debug("FormPageContainerBackActionDefinition: " + t.name);
}

@lazy
rule FormPageContainerBackButtonIcon
    transform s: JSL!UIViewDeclaration
    to t: UI!ui::Icon {
    	t.iconName = "arrow-left";
    	t.name = s.name + "BackButtonIcon";
    	t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/FormPageContainerBackButtonIcon");
}

@lazy
rule FormPageContainerBackButton
    transform s: JSL!UIViewDeclaration
    to t: UI!ui::Button {
	    t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/FormPageContainerBackButton");
 		t.name = s.getFqName() + "::Back";
    	t.label = "Back";
    	t.buttonStyle = "text";
    	t.icon = s.equivalent("FormPageContainerBackButtonIcon");
    	t.actionDefinition = s.equivalent("FormPageContainerBackActionDefinition");

        log.debug("FormPageContainerBackButton: " + t.name);
}

@lazy
rule FormPageContainerCreateButtonIcon
    transform s: JSL!UIViewDeclaration
    to t: UI!ui::Icon {
    	t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/FormPageContainerCreateButtonIcon");
    	t.name = s.name + "CreateButtonIcon";
    	t.iconName = "content-save";

    	log.debug("FormPageContainerCreateButtonIcon: " + t.name);
}

@lazy
rule FormPageContainerCreateButton
    transform s: JSL!UIViewDeclaration
    to t: UI!ui::Button {
	    t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/FormPageContainerCreateButton");
 		t.name = s.getFqName() + "::Create";
    	t.label = "Create";
    	t.buttonStyle = "contained";
    	t.icon = s.equivalent("FormPageContainerCreateButtonIcon");
    	t.actionDefinition = s.equivalent("FormPageContainerCreateActionDefinition");

        log.debug("FormPageContainerCreateButton: " + t.name);
}

@lazy
rule FormPageContainerCreateActionDefinition
    transform s: JSL!UIViewDeclaration
    to t: UI!ui::CreateActionDefinition {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/FormPageContainerCreateActionDefinition");
        t.name = s.getFqName() + "::Create";

        /*
        if (s.autoOpenAfterCreate.isDefined()) {
            t.autoOpenAfterCreate = s.autoOpenAfterCreate;
        }
        */

        log.debug("FormPageContainerCreateActionDefinition: " + t.name);
}

@lazy
rule FormPageContainerGetTemplateActionDefinition
    transform s: JSL!UIViewDeclaration
    to t: UI!ui::GetTemplateActionDefinition {
	    t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/FormPageContainerGetTemplateActionDefinition");
 		t.name = s.getFqName() + "::GetTemplate";
		t.targetType = s.map.transfer.equivalent("ClassType");

        log.debug("FormPageContainerGetTemplateActionDefinition: " + t.name);
}

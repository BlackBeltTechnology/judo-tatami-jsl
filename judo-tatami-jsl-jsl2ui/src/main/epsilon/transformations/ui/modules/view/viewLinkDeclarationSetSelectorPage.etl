@lazy
rule ViewLinkDeclarationSetSelectorPageDefinition
    transform s: JSL!UIViewLinkDeclaration
    to t: UI!ui::PageDefinition {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewLinkDeclarationSetSelectorPageDefinition");
        t.name = s.getFqName() + "::SetSelectorPage";
        t.container = s.equivalent("ViewLinkDeclarationSetSelectorPageContainer");
        t.dataElement = s.equivalent("RelationType");
        t.openInDialog = true;
        t.dialogSize = UI!ui::DialogSize#MD;

        t.actions.add(s.equivalent("ViewLinkDeclarationSetSelectorSetAction"));
        t.actions.add(s.equivalent("ViewLinkDeclarationSetSelectorBackAction"));
        t.actions.add(s.equivalent("ViewLinkDeclarationSetSelectorTableFilterAction"));
        t.actions.add(s.equivalent("ViewLinkDeclarationSetSelectorTableRangeAction"));

        rootMenu.equivalent("Application").pages.add(t);

        log.debug("ViewLinkDeclarationSetSelectorPageDefinition: " + t.name);
}

@lazy
rule ViewLinkDeclarationSetSelectorPageContainer
    transform s: JSL!UIViewLinkDeclaration
    to t: UI!ui::PageContainer {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewLinkDeclarationSetSelectorPageContainer");
        t.name = s.getFqName() + "::SetSelector::PageContainer";
        t.label = s.getLabelWithNameFallback();
        t.titleFrom = UI!ui::TitleFrom#LABEL;
        t.type = UI!ui::PageContainerType#TABLE;
        t.onInit = s.equivalent("ViewLinkDeclarationSetSelectorTableRangeActionDefinition");

        t.children.add(s.equivalent("ViewLinkDeclarationSetSelectorVisualElement"));
        t.actionButtonGroup = s.equivalent("ViewLinkDeclarationSetSelectorButtonGroup");
        t.dataElement = s.transferRelation.target.referenceType.equivalent("ClassType");
        t.isSelector = true;
        t.isRelationSelector = true;

        rootMenu.equivalent("Application").pageContainers.add(t);

        log.debug("ViewLinkDeclarationSetSelectorPageContainer: " + t.name);
}

@lazy
rule ViewLinkDeclarationSetSelectorVisualElement
    transform s: JSL!UIViewLinkDeclaration
    to t: UI!ui::Flex {
        t.~pos = 0;
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewLinkDeclarationSetSelectorVisualElement");
        t.name = s.name;
        t.direction = UI!Axis#VERTICAL;
        t.mainAxisAlignment = UI!ui::MainAxisAlignment#START;
        t.crossAxisAlignment = UI!ui::CrossAxisAlignment#STRETCH;
        t.col = 12d;
        t.children.add(s.equivalent("ViewLinkDeclarationSetSelectorTable"));
        t.frame = s.equivalent("ViewLinkDeclarationSetSelectorFrame");

        log.debug("ViewLinkDeclarationSetSelectorVisualElement: " + t.name);
}

@lazy
rule ViewLinkDeclarationSetSelectorFrame
    transform s: JSL!UIViewLinkDeclaration
    to t: UI!ui::Frame {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewLinkDeclarationSetSelectorFrame");
}

@lazy
rule ViewLinkDeclarationSetSelectorTable
    transform s: JSL!UIViewLinkDeclaration
    to t: UI!ui::Table {
        var id = rootMenu.name + "/(jsl/" + s.getId() + ")/ViewLinkDeclarationSetSelectorTable";
        t.setId(id);
        t.col = 12d;
        t.label = s.getLabelWithNameFallback();
        t.isSelectorTable = true;
        t.isRelationSelectorTable = true;
        t.allowSelectMultiple = false;
        t.name = s.name + "::Set::Selector";
        t.relationName = s.transferRelation.target.name;
        t.dataElement = s.transferRelation.target.referenceType.equivalent("ClassType");
        t.tableActionButtonGroup = s.equivalent("ViewLinkDeclarationSetSelectorTableButtonGroup");
        t.~pos = s.~pos;
        t.showTotalCount = false;
        t.selectorRowsPerPage = 10;

        if (s.getRows().isDefined()) {
            t.rowsPerPage = s.getRows().value.asInteger();
        } else {
            t.rowsPerPage = 10;
        }
        if (t.~pos.isUndefined()) {
            t.~pos = 0;
        }

        // TODO eventually selector should work?
        var targetDeclaration = s.referenceType;
        var rowDeclaration = s.getSelectorTableModifier().row;

        var columns = rowDeclaration.members.select(m | m.isTypeOf(JSL!UIRowColumnDeclaration) and m.referenceType.`primitive`.isDefined());

        for (column in columns) {
            var col = column.equivalentDiscriminated("TablePrimitiveColumn", id);
            t.columns.add(col);
            if (col.attributeType.isFilterable) {
               t.filters.add(column.equivalentDiscriminated("TablePrimitiveColumnFilter", id));
            }
        }

        log.debug("ViewLinkDeclarationSetSelectorTable: " + t.name);
}

@lazy
rule ViewLinkDeclarationSetSelectorTableButtonGroup
    transform s: JSL!UIViewLinkDeclaration
    to t: UI!ui::ButtonGroup {
	    t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewLinkDeclarationSetSelectorTableButtonGroup");
 		t.name = s.getFqName() + "::SetSelectorTableActions";
 		t.label = "Actions";

    	t.buttons.add(s.equivalent("ViewLinkDeclarationSetSelectorTableFilterButton"));
    	t.buttons.add(s.equivalent("ViewLinkDeclarationSetSelectorTableRefreshButton"));

        log.debug("ViewLinkDeclarationSetSelectorTableButtonGroup: " + t.name);
}

@lazy
rule ViewLinkDeclarationSetSelectorTableFilterButton
    transform s: JSL!UIViewLinkDeclaration
    to t: UI!ui::Button {
	    t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewLinkDeclarationSetSelectorTableFilterButton");
 		t.name = s.getFqName() + "::SetSelector::Table::Filter";
    	t.label = "Set Filters";
    	t.buttonStyle = "text";
    	t.icon = "filter".createSyntheticIcon(s.getId(), s.getFqName());
    	t.actionDefinition = s.equivalent("ViewLinkDeclarationSetSelectorTableFilterActionDefinition");

        log.debug("ViewLinkDeclarationSetSelectorTableFilterButton: " + t.name);
}

@lazy
rule ViewLinkDeclarationSetSelectorTableFilterActionDefinition
    transform s: JSL!UIViewLinkDeclaration
    to t: UI!ui::FilterActionDefinition {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewLinkDeclarationSetSelectorTableFilterActionDefinition");
        t.name = s.getFqName() + "::Table::Filter";
        log.debug("ViewLinkDeclarationSetSelectorTableFilterActionDefinition: " + t.name);
}

@lazy
rule ViewLinkDeclarationSetSelectorTableRefreshButton
    transform s: JSL!UIViewLinkDeclaration
    to t: UI!ui::Button {
	    t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewLinkDeclarationSetSelectorTableRefreshButton");
 		t.name = s.getFqName() + "::SetSelector::Table::Refresh";
    	t.label = "Refresh";
    	t.buttonStyle = "text";
    	t.icon = "refresh".createSyntheticIcon(s.getId(), s.getFqName());
    	t.actionDefinition = s.equivalent("ViewLinkDeclarationSetSelectorTableRangeActionDefinition");

        log.debug("ViewLinkDeclarationSetSelectorTableRefreshButton: " + t.name);
}

@lazy
rule ViewLinkDeclarationSetSelectorTableRangeActionDefinition
    transform s: JSL!UIViewLinkDeclaration
    to t: UI!ui::SelectorRangeActionDefinition {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewLinkDeclarationSetSelectorTableRangeActionDefinition");

        t.name = s.getFqName() + "::SetSelector::Table::Range";
        t.targetType = s.transferRelation.target.referenceType.equivalent("ClassType");

        log.debug("ViewLinkDeclarationSetSelectorTableRangeActionDefinition: " + t.name);
}

@lazy
rule ViewLinkDeclarationSetSelectorButtonGroup
    transform s: JSL!UIViewLinkDeclaration
    to t: UI!ui::ButtonGroup {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewLinkDeclarationSetSelectorButtonGroup");
        t.name = s.getFqName() + "::SetSelectorButtonGroup";
        t.label = "Actions";

        t.buttons.add(s.equivalent("ViewLinkDeclarationSetSelectorSetSelectorBackButton"));
        t.buttons.add(s.equivalent("ViewLinkDeclarationSetSelectorSetSelectorSetButton"));

        log.debug("ViewLinkDeclarationSetSelectorButtonGroup: " + t.name);
}

@lazy
rule ViewLinkDeclarationSetSelectorSetSelectorBackButton
    transform s: JSL!UIViewLinkDeclaration
    to t: UI!ui::Button {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewLinkDeclarationSetSelectorSetSelectorBackButton");
        t.name = s.getFqName() + "::Back";
        t.label = "Back";
        t.buttonStyle = "text";
        t.icon = "arrow-left".createSyntheticIcon(s.getId(), s.getFqName());
        t.actionDefinition = s.equivalent("ViewLinkDeclarationSetSelectorBackActionDefinition");

        log.debug("ViewLinkDeclarationSetSelectorSetSelectorBackButton: " + t.name);
}

@lazy
rule ViewLinkDeclarationSetSelectorBackActionDefinition
    transform s: JSL!UIViewLinkDeclaration
    to t: UI!ui::BackActionDefinition {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewLinkDeclarationSetSelectorBackActionDefinition");
        t.name = s.getFqName() + "::Back";
        log.debug("ViewLinkDeclarationSetSelectorBackActionDefinition: " + t.name);
}

@lazy
rule ViewLinkDeclarationSetSelectorSetSelectorSetButton
    transform s: JSL!UIViewLinkDeclaration
    to t: UI!ui::Button {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewLinkDeclarationSetSelectorSetSelectorSetButton");
        t.name = s.getFqName() + "::Set";
        t.label = "Set";
        t.buttonStyle = "contained";
        t.icon = "attachment-plus".createSyntheticIcon(s.getId(), s.getFqName());
        t.actionDefinition = s.equivalent("ViewLinkDeclarationSetSelectorSetSelectorSetActionDefinition");

        log.debug("ViewLinkDeclarationSetSelectorSetSelectorSetButton: " + t.name);
}

@lazy
rule ViewLinkDeclarationSetSelectorSetSelectorSetActionDefinition
    transform s: JSL!UIViewLinkDeclaration
    to t: UI!ui::SetActionDefinition {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewLinkDeclarationSetSelectorSetSelectorSetActionDefinition");
        t.name = s.getFqName() + "::Set";
        t.targetType = s.transferRelation.target.referenceType.equivalent("ClassType");

        log.debug("ViewLinkDeclarationSetSelectorSetSelectorSetActionDefinition: " + t.name);
}

@lazy
rule ViewLinkDeclarationSetSelectorSetAction
	transform s: JSL!UIViewLinkDeclaration
    to t: UI!ui::Action {
	    t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewLinkDeclarationSetSelectorSetAction");
 		t.name = s.getFqName() + "::SetSelector::Set";
        t.ownerDataElement = s.equivalent("RelationType");
        t.actionDefinition = s.equivalent("ViewLinkDeclarationSetSelectorSetSelectorSetActionDefinition");

        log.debug("ViewLinkDeclarationSetSelectorSetAction: " + t.name);
}

@lazy
rule ViewLinkDeclarationSetSelectorBackAction
	transform s: JSL!UIViewLinkDeclaration
    to t: UI!ui::Action {
	    t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewLinkDeclarationSetSelectorBackAction");
 		t.name = s.getFqName() + "::SetSelector::Back";
        t.ownerDataElement = s.equivalent("RelationType");
        t.actionDefinition = s.equivalent("ViewLinkDeclarationSetSelectorBackActionDefinition");

        log.debug("ViewLinkDeclarationSetSelectorBackAction: " + t.name);
}

@lazy
rule ViewLinkDeclarationSetSelectorTableFilterAction
	transform s: JSL!UIViewLinkDeclaration
    to t: UI!ui::Action {
	    t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewLinkDeclarationSetSelectorTableFilterAction");
 		t.name = s.getFqName() + "::SetSelector::Table::Filter";
        t.ownerDataElement = s.equivalent("RelationType");
        t.targetDataElement = s.equivalent("RelationType");
        t.actionDefinition = s.equivalent("ViewLinkDeclarationSetSelectorTableFilterActionDefinition");

        log.debug("ViewLinkDeclarationSetSelectorTableFilterAction: " + t.name);
}

@lazy
rule ViewLinkDeclarationSetSelectorTableRangeAction
	transform s: JSL!UIViewLinkDeclaration
    to t: UI!ui::Action {
	    t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/ViewLinkDeclarationSetSelectorTableRangeAction");
 		t.name = s.getFqName() + "::SetSelector::Table::Range";
        t.ownerDataElement = s.equivalent("RelationType");
        t.targetDataElement = s.equivalent("RelationType");
        t.actionDefinition = s.equivalent("ViewLinkDeclarationSetSelectorTableRangeActionDefinition");

        log.debug("ViewLinkDeclarationSetSelectorTableRangeAction: " + t.name);
}

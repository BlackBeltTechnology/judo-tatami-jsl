@greedy
rule ClassType
    transform s: JSL!TransferDeclaration
    to t: UI!ui::data::ClassType {
        guard: actorDeclaration.getExposedTransferObjects().includes(s)

        t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/ClassType");

        t.name = s.getFqName() + "::ClassType";
        t.transferObjectTypeName = s.name;
        t.simpleName = s.name;
        //t.setPackageNameTokens(s);

        t.isMapped = s.map.isDefined();
        // t.isOptional = s.isMapped();

        if (s.isRefreshSupported()) {
            t.behaviours.add(UI!ui::data::ClassBehaviourType#REFRESH);
        }
        if (s.isUpdateSupported()) {
            t.behaviours.add(UI!ui::data::ClassBehaviourType#UPDATE);
            t.isForCreateOrUpdateType = true;
        }

        if (s.isDeleteSupported()) {
            t.behaviours.add(UI!ui::data::ClassBehaviourType#DELETE);
        }

        if (s.isGetTemplateSupported()) {
            t.behaviours.add(UI!ui::data::ClassBehaviourType#TEMPLATE);
            t.isOptional = true;
        }

        actorDeclaration.equivalent("Application").dataElements.add(t);

        var identity = actorDeclaration.getIdentityTransferDeclaration();

        if (identity.isDefined() and identity == s) {
            t.isPrincipal = true;
        }

        t.isActor = s.isKindOf(JSL!ActorDeclaration);

        log.debug("Create ClassType: " + t.name);
}

@greedy
rule TransferDeclarationPageContainer
    transform s: JSL!TransferDeclaration
    to t: UI!ui::PageContainer {
        guard: actorDeclaration.getExposedTransferObjects().contains(s)

        t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/TransferDeclarationPageContainer");
        t.name = s.getFqName() + "::PageContainer";
        var label = s.getLabelModifier();
        if (label.isDefined()) {
            t.label = label.value.value;
        }
        t.titleFrom = UI!ui::TitleFrom#LABEL;
        t.type = s.isCreateEventParameter() ? UI!ui::PageContainerType#FORM : UI!ui::PageContainerType#VIEW;
        // t.onInit = s.equivalent("TransferObjectTableAddSelectorTableRangeActionDefinition");
        actorDeclaration.equivalent("Application").pageContainers.add(t);
        t.children.add(s.equivalent("TransferDeclarationVisualElement"));
        t.actionButtonGroup = s.equivalent("TransferDeclarationActionButtonGroup");
        t.dataElement = s.equivalent("ClassType");

        t.actionButtonGroup.buttons.add(s.equivalent("TransferDeclarationBackButton"));

        if (s.isCreateEventParameter()) {
            t.actionButtonGroup.buttons.add(s.equivalent("TransferDeclarationCreateButton"));
        }
        if (s.isUpdateSupported()) {
            t.actionButtonGroup.buttons.add(s.equivalent("TransferDeclarationUpdateButton"));
        }
        if (s.isDeleteSupported()) {
            t.actionButtonGroup.buttons.add(s.equivalent("TransferDeclarationDeleteButton"));
        }

        log.debug("TransferDeclarationPageContainer: " + t.name);
}

@greedy
@lazy
rule TransferDeclarationActionButtonGroup
    transform s: JSL!TransferDeclaration
    to t: UI!ui::ButtonGroup {
        t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/TransferDeclarationActionButtonGroup");
        t.name = s.getFqName() + "::PageActions";
        t.label = "Actions";

        log.debug("TransferDeclarationActionButtonGroup: " + t.name);
}

@greedy
rule TransferDeclarationVisualElement
    transform s: JSL!TransferDeclaration
    to t: UI!ui::Flex {
        guard: actorDeclaration.getExposedTransferObjects().contains(s)

	    t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/TransferDeclarationVisualElement");
 		t.name = s.name;
 		t.~pos = 0;
 		t.col = 12d;
 		t.direction = UI!Axis#VERTICAL;
 		t.label = null; // we don't need labels for root visual elements
        log.debug("TransferDeclarationVisualElement: " + t.name);
}

@lazy
@greedy
rule TransferDeclarationCreateButton
    transform s: JSL!TransferDeclaration
    to t: UI!ui::Button {
    	t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/TransferDeclarationCreateButton");
        t.name = s.getFqName() + "::Create::Submit";
        t.buttonStyle = "contained";
        t.actionDefinition = s.equivalent("TransferDeclarationCreateActionDefinition");

        t.label = "Create";
        t.icon = "content-save".createSyntheticIcon(s.getId(), s.getFqName());

        log.debug("TransferDeclarationCreateButton: " + t.name);
}

@lazy
@greedy
rule TransferDeclarationCreateActionDefinition
    transform s: JSL!TransferDeclaration
    to t: UI!ui::CreateActionDefinition {
        t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/TransferDeclarationCreateActionDefinition");
        t.name = s.getFqName() + "::Create";

        /*
        if (s.autoOpenAfterCreate.isDefined()) {
            t.autoOpenAfterCreate = s.autoOpenAfterCreate;
        }
        */

        log.debug("TransferDeclarationCreateActionDefinition: " + t.name);
}

@lazy
@greedy
rule TransferDeclarationUpdateButton
    transform s: JSL!TransferDeclaration
    to t: UI!ui::Button {
    	t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/TransferDeclarationUpdateButton");
        t.name = s.getFqName() + "::Update";
        t.buttonStyle = "contained";
        t.actionDefinition = s.equivalent("TransferDeclarationUpdateActionDefinition");

        t.label = "Update";
        t.icon = "content-save".createSyntheticIcon(s.getId(), s.getFqName());

        log.debug("TransferDeclarationUpdateButton: " + t.name);
}

@lazy
@greedy
rule TransferDeclarationUpdateActionDefinition
    transform s: JSL!TransferDeclaration
    to t: UI!ui::UpdateActionDefinition {
        t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/TransferDeclarationUpdateActionDefinition");
        t.name = s.getFqName() + "::Update";

        log.debug("TransferDeclarationUpdateActionDefinition: " + t.name);
}

@lazy
@greedy
rule TransferDeclarationDeleteButton
    transform s: JSL!TransferDeclaration
    to t: UI!ui::Button {
    	t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/TransferDeclarationDeleteButton");
        t.name = s.getFqName() + "::Delete";
        t.buttonStyle = "contained";
        t.actionDefinition = s.equivalent("TransferDeclarationDeleteActionDefinition");

        t.label = "Delete";
        t.icon = "delete_forever".createSyntheticIcon(s.getId(), s.getFqName());

        log.debug("TransferDeclarationDeleteButton: " + t.name);
}

@lazy
@greedy
rule TransferDeclarationDeleteActionDefinition
    transform s: JSL!TransferDeclaration
    to t: UI!ui::DeleteActionDefinition {
        t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/TransferDeclarationDeleteActionDefinition");
        t.name = s.getFqName() + "::Delete";

        log.debug("TransferDeclarationDeleteActionDefinition: " + t.name);
}

@greedy
rule TransferDeclarationBackButton
    transform s: JSL!TransferDeclaration
    to t: UI!ui::Button {
        guard: actorDeclaration.getExposedTransferObjects().contains(s)

    	t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/TransferDeclarationBackButton");
        t.name = s.getFqName() + "::Create::Back";
        t.buttonStyle = "text";
        t.actionDefinition = s.equivalent("TransferDeclarationBackActionDefinition");

        t.label = "Back";
        t.icon = "arrow-left".createSyntheticIcon(s.getId(), s.getFqName());

        log.debug("TransferDeclarationBackButton: " + t.name);
}

@greedy
rule TransferDeclarationBackActionDefinition
    transform s: JSL!TransferDeclaration
    to t: UI!ui::BackActionDefinition {
        guard: actorDeclaration.getExposedTransferObjects().contains(s)

        t.setId(actorDeclaration.name + "/(jsl/" + s.getId() + ")/TransferDeclarationBackActionDefinition");
        t.name = s.getFqName() + "::Back";

        log.debug("TransferDeclarationBackActionDefinition: " + t.name);
}

@greedy
rule CreateNumericType
    transform s: JSL!DataTypeDeclaration
    to t: UI!ui::data::NumericType {
        guard: s.`primitive` == "numeric"

        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/CreateNumericType");
        t.name = s.name;
        t.precision = s.getPrecision().value.intValue();
        t.scale = s.getScale().value.intValue();
        t.operator = actorDeclaration.equivalent("NumericOperation");
        rootMenu.equivalent("Application").dataTypes.add(t);
        log.debug("Created NumericType: " + t.name);
}

@greedy
rule CreateDateType
    transform s: JSL!DataTypeDeclaration
    to t: UI!ui::data::DateType {
        guard: s.`primitive` == "date"

        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/CreateDateType");
        t.name = s.name;
        t.operator = actorDeclaration.equivalent("NumericOperation");
        rootMenu.equivalent("Application").dataTypes.add(t);
        log.debug("Created DateType: " + t.name);
}

@greedy
rule CreateTimeType
    transform s: JSL!DataTypeDeclaration
    to t: UI!ui::data::TimeType {
        guard: s.`primitive` == "time"

        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/CreateTimeType");
        t.name = s.name;
        t.operator = actorDeclaration.equivalent("NumericOperation");
        rootMenu.equivalent("Application").dataTypes.add(t);
        log.debug("Created TimeType: " + t.name);
}

@greedy
rule CreateTimestampType
    transform s: JSL!DataTypeDeclaration
    to t: UI!ui::data::TimestampType {
        guard: s.`primitive` == "timestamp"

        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/CreateTimestampType");
        t.name = s.name;
        t.operator = actorDeclaration.equivalent("NumericOperation");
        rootMenu.equivalent("Application").dataTypes.add(t);
        log.debug("Created TimestampType: " + t.name);
}

@greedy
rule CreateEnumerationType
    transform s: JSL!EnumDeclaration
    to t: UI!ui::data::EnumerationType {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/CreateEnumerationType");
        t.name = s.name;
        t.operator = actorDeclaration.equivalent("EnumerationOperation");
        rootMenu.equivalent("Application").dataTypes.add(t);
        log.debug("Created EnumerationType: " + t.name);
}

@greedy
rule CreateEnumerationMember
    transform s: JSL!EnumLiteral
    to t: UI!ui::data::EnumerationMember {
        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/CreateEnumerationMember");
        t.name = s.name;
        t.ordinal = s.value.intValue();
        s.eContainer.equivalent("CreateEnumerationType").members.add(t);
        log.debug("Created EnumerationMember: " + t.name);
}

@greedy   
rule CreateBooleanType 
    transform s : JSL!DataTypeDeclaration
    to t : UI!ui::data::BooleanType {
        guard: s.`primitive` == "boolean"

        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/CreateBooleanType");
        t.name = s.name;
        rootMenu.equivalent("Application").dataTypes.add(t);
        t.operator = actorDeclaration.equivalent("BooleanOperation");
        log.debug("Created BooleanType: " + t.name);
}

@greedy
rule CreateStringType 
    transform s : JSL!DataTypeDeclaration
    to t : UI!ui::data::StringType {
        guard: s.`primitive` == "string"

        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/CreateStringType");
        t.name = s.name;
        t.maxLength = s.getMaxSize().value.intValue();

        if (s.getRegex().isDefined() and s.getRegex().regex.value.isDefined()) {
            t.regExp = s.getRegex().regex.value;
        }

        t.operator = actorDeclaration.equivalent("StringOperation");

        rootMenu.equivalent("Application").dataTypes.add(t);
        log.debug("Created StringType: " + t.name);
}

@lazy
rule MimeType
    transform s: String
    to t: UI!ui::data::MimeType {
        t.setId(rootMenu.name + "/(jsl/" + s + ")/MimeType");
        var split = s.split("/");
        t.type = split[0];
        t.subType = split[1];

        rootMenu.equivalent("Application").mimeTypes.add(t);
        log.debug("Created MimeType: " + s);
}

@greedy
rule CreateBinaryType
    transform s : JSL!DataTypeDeclaration
    to t : UI!ui::data::BinaryType {
        guard: s.`primitive` == "binary"

        t.setId(rootMenu.name + "/(jsl/" + s.getId() + ")/CreateBinaryType");
        t.name = s.name;

        if (s.getMimeType().isDefined()) {
            for (mimeType in s.getMimeType().values) {
                t.mimeTypes.add(mimeType.value.value.equivalent("MimeType"));
            }
        }

        if (s.getMaxFileSize().isDefined()) {
            t.maxFileSize = jslUtils.getMaxFileSizeValue(s.getMaxFileSize()).longValue();
        }

        rootMenu.equivalent("Application").dataTypes.add(t);
        log.debug("Created BinaryType: " + t.name);
}
